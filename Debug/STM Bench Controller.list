
STM Bench Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a80  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08010c60  08010c60  00011c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112f0  080112f0  00013350  2**0
                  CONTENTS
  4 .ARM          00000008  080112f0  080112f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112f8  080112f8  00013350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112f8  080112f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080112fc  080112fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  08011300  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b0  20000350  08011650  00013350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d00  08011650  00013d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013350  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccaa  00000000  00000000  00013380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043c5  00000000  00000000  0003002a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  000343f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000147e  00000000  00000000  00035ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000070f2  00000000  00000000  0003734e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f569  00000000  00000000  0003e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5dbb  00000000  00000000  0005d9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008740  00000000  00000000  001437a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014bee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010c48 	.word	0x08010c48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08010c48 	.word	0x08010c48

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff23 	bl	8000b2c <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc99 	bl	8000648 <__aeabi_dmul>
 8000d16:	f7ff ff6f 	bl	8000bf8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc1a 	bl	8000554 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc90 	bl	8000648 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff fad2 	bl	80002d8 <__aeabi_dsub>
 8000d34:	f7ff ff60 	bl	8000bf8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f001 fc10 	bl	800256e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 feb9 	bl	8001ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f001 f893 	bl	8001e7c <MX_GPIO_Init>
  MX_RTC_Init();
 8000d56:	f000 ffe3 	bl	8001d20 <MX_RTC_Init>
  MX_USB_Device_Init();
 8000d5a:	f00b f8f5 	bl	800bf48 <MX_USB_Device_Init>
  MX_USB_OTG_FS_Init();
 8000d5e:	f000 fe6d 	bl	8001a3c <MX_USB_OTG_FS_Init>
  MX_ADC1_Init();
 8000d62:	f000 feff 	bl	8001b64 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d66:	f000 ff75 	bl	8001c54 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000d6a:	f001 f80f 	bl	8001d8c <MX_TIM3_Init>
	  //if (encoderPrevCount != (TIM2->CNT)){
		//  encoderPrevCount = (TIM2->CNT);
	  //}

 	  // Button inputs
 	  uint8_t values = ReadInputs();
 8000d6e:	f000 f847 	bl	8000e00 <ReadInputs>
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
 	  }if ((values & 0b00000011) > 0){ // Encoder Up

 	  }

 	  // Serial COmms
 	  if (VCP_retrieveInputData(hexBuf,&pos32) != 0)
 8000d76:	491b      	ldr	r1, [pc, #108]	@ (8000de4 <main+0xa0>)
 8000d78:	481b      	ldr	r0, [pc, #108]	@ (8000de8 <main+0xa4>)
 8000d7a:	f00b f915 	bl	800bfa8 <VCP_retrieveInputData>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d02a      	beq.n	8000dda <main+0x96>
 	   	 {
 	   		 // you could do data processing here.
 	   		 //by demo, i just send it back to PC
 	   		 sprintf(strBuf,"%s", hexBuf);
 8000d84:	4a18      	ldr	r2, [pc, #96]	@ (8000de8 <main+0xa4>)
 8000d86:	4919      	ldr	r1, [pc, #100]	@ (8000dec <main+0xa8>)
 8000d88:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <main+0xac>)
 8000d8a:	f00d fa47 	bl	800e21c <siprintf>
 	   		 nullint8(hexBuf,255);
 8000d8e:	21ff      	movs	r1, #255	@ 0xff
 8000d90:	4815      	ldr	r0, [pc, #84]	@ (8000de8 <main+0xa4>)
 8000d92:	f000 fb5b 	bl	800144c <nullint8>
 	   		 // combine the new chars with the old
 	   		 sprintf(strOutBuf, "%s%s", SerialStr, strBuf);
 8000d96:	4b16      	ldr	r3, [pc, #88]	@ (8000df0 <main+0xac>)
 8000d98:	4a16      	ldr	r2, [pc, #88]	@ (8000df4 <main+0xb0>)
 8000d9a:	4917      	ldr	r1, [pc, #92]	@ (8000df8 <main+0xb4>)
 8000d9c:	4817      	ldr	r0, [pc, #92]	@ (8000dfc <main+0xb8>)
 8000d9e:	f00d fa3d 	bl	800e21c <siprintf>
 	   		 strcpy(SerialStr, strOutBuf);
 8000da2:	4916      	ldr	r1, [pc, #88]	@ (8000dfc <main+0xb8>)
 8000da4:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <main+0xb0>)
 8000da6:	f00d fb60 	bl	800e46a <strcpy>
 	   		 nullstr(strOutBuf,1024);
 8000daa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dae:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <main+0xb8>)
 8000db0:	f000 fb30 	bl	8001414 <nullstr>
 	   		 nullstr(strBuf,1024);
 8000db4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <main+0xac>)
 8000dba:	f000 fb2b 	bl	8001414 <nullstr>
 	   		 // loopback raw
 	   		 //sprintf(strOutBuf,"data ='%s' (%d)\n\r", strBuf, strlen(strBuf));
 	   		 //SendStrToUSB(strOutBuf);
 	   		 // loopback current cmd

 	   		 nullstr(strOutBuf, 1024);
 8000dbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dc2:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <main+0xb8>)
 8000dc4:	f000 fb26 	bl	8001414 <nullstr>
 	   		 if (containsChar('\n', SerialStr) >= 0){
 8000dc8:	490a      	ldr	r1, [pc, #40]	@ (8000df4 <main+0xb0>)
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f000 fdca 	bl	8001964 <containsChar>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db01      	blt.n	8000dda <main+0x96>
 	   			 HandleCmd();
 8000dd6:	f000 f91d 	bl	8001014 <HandleCmd>
 	   		 }
 	   	 }
 	   	 HAL_Delay(10);
 8000dda:	200a      	movs	r0, #10
 8000ddc:	f001 fc38 	bl	8002650 <HAL_Delay>
     {
 8000de0:	e7c5      	b.n	8000d6e <main+0x2a>
 8000de2:	bf00      	nop
 8000de4:	200011b8 	.word	0x200011b8
 8000de8:	200010b8 	.word	0x200010b8
 8000dec:	08010c60 	.word	0x08010c60
 8000df0:	200004b8 	.word	0x200004b8
 8000df4:	200008b8 	.word	0x200008b8
 8000df8:	08010c64 	.word	0x08010c64
 8000dfc:	20000cb8 	.word	0x20000cb8

08000e00 <ReadInputs>:
 	 }
    /* USER CODE END 3 */
  }


 uint8_t ReadInputs(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 	uint8_t InputStatus = 0b00000000;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]
 	// Buttons
 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e12:	f003 f9af 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00c      	beq.n	8000e36 <ReadInputs+0x36>
 		// delay
 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f003 f9a6 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <ReadInputs+0x36>
 			InputStatus |= 0b10000000;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e34:	73fb      	strb	r3, [r7, #15]
 		}
 	}
 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3e:	f003 f999 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00c      	beq.n	8000e62 <ReadInputs+0x62>
 			// delay
 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e50:	f003 f990 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <ReadInputs+0x62>
 			InputStatus |= 0b01000000;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e60:	73fb      	strb	r3, [r7, #15]
 		}
 	}
 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f003 f983 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <ReadInputs+0x8e>
 			// delay
 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f003 f97a 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <ReadInputs+0x8e>
 			InputStatus |= 0b00100000;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f043 0320 	orr.w	r3, r3, #32
 8000e8c:	73fb      	strb	r3, [r7, #15]
 		}
 	}
 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000e8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e96:	f003 f96d 	bl	8004174 <HAL_GPIO_ReadPin>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00c      	beq.n	8000eba <ReadInputs+0xba>
 		// delay
 		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
 8000ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f003 f964 	bl	8004174 <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <ReadInputs+0xba>
 			InputStatus |= 0b00010000;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	f043 0310 	orr.w	r3, r3, #16
 8000eb8:	73fb      	strb	r3, [r7, #15]
 		}
 	}
 	// Encoder Button
 	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ebe:	4851      	ldr	r0, [pc, #324]	@ (8001004 <ReadInputs+0x204>)
 8000ec0:	f003 f958 	bl	8004174 <HAL_GPIO_ReadPin>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00b      	beq.n	8000ee2 <ReadInputs+0xe2>
 		// delay
 		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ece:	484d      	ldr	r0, [pc, #308]	@ (8001004 <ReadInputs+0x204>)
 8000ed0:	f003 f950 	bl	8004174 <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <ReadInputs+0xe2>
 			InputStatus |= 0b00001000;
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	73fb      	strb	r3, [r7, #15]
 		}
 	}

 	// Encoder
 	int nextState = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60bb      	str	r3, [r7, #8]
 	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f003 f942 	bl	8004174 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <ReadInputs+0x10c>
 8000ef6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000efa:	4842      	ldr	r0, [pc, #264]	@ (8001004 <ReadInputs+0x204>)
 8000efc:	f003 f93a 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <ReadInputs+0x10c>
	{
		nextState = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	e037      	b.n	8000f7c <ReadInputs+0x17c>
	}else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && ! HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f003 f92f 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00a      	beq.n	8000f32 <ReadInputs+0x132>
 8000f1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f20:	4838      	ldr	r0, [pc, #224]	@ (8001004 <ReadInputs+0x204>)
 8000f22:	f003 f927 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <ReadInputs+0x132>
	{
		nextState = 1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	e024      	b.n	8000f7c <ReadInputs+0x17c>
	}else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000f32:	2101      	movs	r1, #1
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f003 f91c 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10a      	bne.n	8000f58 <ReadInputs+0x158>
 8000f42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f46:	482f      	ldr	r0, [pc, #188]	@ (8001004 <ReadInputs+0x204>)
 8000f48:	f003 f914 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d102      	bne.n	8000f58 <ReadInputs+0x158>
	{
		nextState = 2;
 8000f52:	2302      	movs	r3, #2
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e011      	b.n	8000f7c <ReadInputs+0x17c>
	}else if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15))
 8000f58:	2101      	movs	r1, #1
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f003 f909 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <ReadInputs+0x17c>
 8000f68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f6c:	4825      	ldr	r0, [pc, #148]	@ (8001004 <ReadInputs+0x204>)
 8000f6e:	f003 f901 	bl	8004174 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <ReadInputs+0x17c>
	{
		nextState = 3;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]
	}

	int diff = (int)encoderState + (int)nextState;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <ReadInputs+0x208>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	4413      	add	r3, r2
 8000f84:	607b      	str	r3, [r7, #4]

	if (diff != 0){
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d035      	beq.n	8000ff8 <ReadInputs+0x1f8>
		sprintf(strOutBuf, "Diff: %d\n\r", diff);
		SendStrToUSB(strOutBuf);
		nullstr(strOutBuf, 1024);
*/

		encoderState = nextState;
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <ReadInputs+0x208>)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	6013      	str	r3, [r2, #0]
		sprintf(strOutBuf, "EncoderCount: %d\n\r", EncoderCount);
		SendStrToUSB(strOutBuf);
		nullstr(strOutBuf, 1024);
*/

		if (diff < 0) diff += 4;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da02      	bge.n	8000f9e <ReadInputs+0x19e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	607b      	str	r3, [r7, #4]


		EncoderCount += diff;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <ReadInputs+0x20c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a19      	ldr	r2, [pc, #100]	@ (800100c <ReadInputs+0x20c>)
 8000fa8:	6013      	str	r3, [r2, #0]

		if (EncoderCount >= EncoderCounterLimit){
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <ReadInputs+0x20c>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <ReadInputs+0x210>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	db03      	blt.n	8000fbe <ReadInputs+0x1be>
			EncoderCount = 0;
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <ReadInputs+0x20c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e007      	b.n	8000fce <ReadInputs+0x1ce>
		}else if (EncoderCount < 0){
 8000fbe:	4b13      	ldr	r3, [pc, #76]	@ (800100c <ReadInputs+0x20c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da03      	bge.n	8000fce <ReadInputs+0x1ce>
			EncoderCount = EncoderCounterLimit;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <ReadInputs+0x210>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <ReadInputs+0x20c>)
 8000fcc:	6013      	str	r3, [r2, #0]
		}


		InputStatus &= 0b11111100;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	f023 0303 	bic.w	r3, r3, #3
 8000fd4:	73fb      	strb	r3, [r7, #15]
		if (diff < 0){
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	da04      	bge.n	8000fe6 <ReadInputs+0x1e6>
			InputStatus |= 0b00000010;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e006      	b.n	8000ff4 <ReadInputs+0x1f4>
		}else if (diff > 0){
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dd03      	ble.n	8000ff4 <ReadInputs+0x1f4>
			InputStatus |= 0b00000001;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
		}
		nextState = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
 	 }
 	return InputStatus;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 }
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	48000800 	.word	0x48000800
 8001008:	200011bc 	.word	0x200011bc
 800100c:	200011c0 	.word	0x200011c0
 8001010:	20000000 	.word	0x20000000

08001014 <HandleCmd>:
   * MEAS:CURR:[X]
   * CTRL:[X] <OFF|ON>
   * SET:VOLT [X]
   * OVP:[X]
   * */
  void HandleCmd(){
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	ed2d 8b02 	vpush	{d8}
 800101a:	b093      	sub	sp, #76	@ 0x4c
 800101c:	af04      	add	r7, sp, #16
 	if (containsStr("MEAS:", SerialStr) >= 0){
 800101e:	4998      	ldr	r1, [pc, #608]	@ (8001280 <HandleCmd+0x26c>)
 8001020:	4898      	ldr	r0, [pc, #608]	@ (8001284 <HandleCmd+0x270>)
 8001022:	f000 fcbe 	bl	80019a2 <containsStr>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	db7c      	blt.n	8001126 <HandleCmd+0x112>
 		 // Get Mode
 		 // 0 = Current
 		 // 1 = Voltage
 		 // 2 = Internal Ref
 		 int8_t Mode = -1;
 800102c:	23ff      	movs	r3, #255	@ 0xff
 800102e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 		 if (containsStr("VOLT:", SerialStr) == 5){
 8001032:	4993      	ldr	r1, [pc, #588]	@ (8001280 <HandleCmd+0x26c>)
 8001034:	4894      	ldr	r0, [pc, #592]	@ (8001288 <HandleCmd+0x274>)
 8001036:	f000 fcb4 	bl	80019a2 <containsStr>
 800103a:	4603      	mov	r3, r0
 800103c:	2b05      	cmp	r3, #5
 800103e:	d103      	bne.n	8001048 <HandleCmd+0x34>
 			 Mode = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001046:	e024      	b.n	8001092 <HandleCmd+0x7e>
 		 }else if (containsStr("CURR:", SerialStr) == 5){
 8001048:	498d      	ldr	r1, [pc, #564]	@ (8001280 <HandleCmd+0x26c>)
 800104a:	4890      	ldr	r0, [pc, #576]	@ (800128c <HandleCmd+0x278>)
 800104c:	f000 fca9 	bl	80019a2 <containsStr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b05      	cmp	r3, #5
 8001054:	d103      	bne.n	800105e <HandleCmd+0x4a>
 			 Mode = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800105c:	e019      	b.n	8001092 <HandleCmd+0x7e>
 		 }else if (containsStr("VREF", SerialStr) == 5){
 800105e:	4988      	ldr	r1, [pc, #544]	@ (8001280 <HandleCmd+0x26c>)
 8001060:	488b      	ldr	r0, [pc, #556]	@ (8001290 <HandleCmd+0x27c>)
 8001062:	f000 fc9e 	bl	80019a2 <containsStr>
 8001066:	4603      	mov	r3, r0
 8001068:	2b05      	cmp	r3, #5
 800106a:	d109      	bne.n	8001080 <HandleCmd+0x6c>
 			 getVref(4000);
 800106c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001070:	f000 fa78 	bl	8001564 <getVref>
 			 nullstr(SerialStr, 1024);
 8001074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001078:	4881      	ldr	r0, [pc, #516]	@ (8001280 <HandleCmd+0x26c>)
 800107a:	f000 f9cb 	bl	8001414 <nullstr>
 			 return;
 800107e:	e1a2      	b.n	80013c6 <HandleCmd+0x3b2>
 		 }else{
 			SendStrToUSB("INVALID COMMAND\r\nERROR:-3\r\n");
 8001080:	4884      	ldr	r0, [pc, #528]	@ (8001294 <HandleCmd+0x280>)
 8001082:	f000 fcae 	bl	80019e2 <SendStrToUSB>
 			nullstr(SerialStr, 1024);
 8001086:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800108a:	487d      	ldr	r0, [pc, #500]	@ (8001280 <HandleCmd+0x26c>)
 800108c:	f000 f9c2 	bl	8001414 <nullstr>
 			return;
 8001090:	e199      	b.n	80013c6 <HandleCmd+0x3b2>
 		 }
 		 sprintf(strOutBuf,"Mode: %d\n\r", Mode);
 8001092:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001096:	461a      	mov	r2, r3
 8001098:	497f      	ldr	r1, [pc, #508]	@ (8001298 <HandleCmd+0x284>)
 800109a:	4880      	ldr	r0, [pc, #512]	@ (800129c <HandleCmd+0x288>)
 800109c:	f00d f8be 	bl	800e21c <siprintf>
 		 SendStrToUSB(strOutBuf);
 80010a0:	487e      	ldr	r0, [pc, #504]	@ (800129c <HandleCmd+0x288>)
 80010a2:	f000 fc9e 	bl	80019e2 <SendStrToUSB>

 		 // Output Line
 		 if (strlen(SerialStr) >= 11){
 80010a6:	4876      	ldr	r0, [pc, #472]	@ (8001280 <HandleCmd+0x26c>)
 80010a8:	f7ff f90a 	bl	80002c0 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b0a      	cmp	r3, #10
 80010b0:	d930      	bls.n	8001114 <HandleCmd+0x100>
 			 uint8_t OutputChannel = SerialStr[10] - 48;
 80010b2:	4b73      	ldr	r3, [pc, #460]	@ (8001280 <HandleCmd+0x26c>)
 80010b4:	7a9b      	ldrb	r3, [r3, #10]
 80010b6:	3b30      	subs	r3, #48	@ 0x30
 80010b8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 			 if (OutputChannel >= 0 && OutputChannel <= 3){
 80010bc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d81e      	bhi.n	8001102 <HandleCmd+0xee>
 				 float value = Measure(Mode, OutputChannel);
 80010c4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80010c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fac2 	bl	8001658 <Measure>
 80010d4:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 				 sprintf(strOutBuf, "%0.6f%s\r\n", value, Mode == 1 ? "A" : "V");
 80010d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010da:	f7ff fa5d 	bl	8000598 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	f997 1037 	ldrsb.w	r1, [r7, #55]	@ 0x37
 80010e6:	2901      	cmp	r1, #1
 80010e8:	d101      	bne.n	80010ee <HandleCmd+0xda>
 80010ea:	496d      	ldr	r1, [pc, #436]	@ (80012a0 <HandleCmd+0x28c>)
 80010ec:	e000      	b.n	80010f0 <HandleCmd+0xdc>
 80010ee:	496d      	ldr	r1, [pc, #436]	@ (80012a4 <HandleCmd+0x290>)
 80010f0:	9100      	str	r1, [sp, #0]
 80010f2:	496d      	ldr	r1, [pc, #436]	@ (80012a8 <HandleCmd+0x294>)
 80010f4:	4869      	ldr	r0, [pc, #420]	@ (800129c <HandleCmd+0x288>)
 80010f6:	f00d f891 	bl	800e21c <siprintf>
 				 SendStrToUSB(strOutBuf);
 80010fa:	4868      	ldr	r0, [pc, #416]	@ (800129c <HandleCmd+0x288>)
 80010fc:	f000 fc71 	bl	80019e2 <SendStrToUSB>
 8001100:	e011      	b.n	8001126 <HandleCmd+0x112>
 			 }else{
 				SendStrToUSB("INVALID COMMAND\r\nERROR:-1\r\n");
 8001102:	486a      	ldr	r0, [pc, #424]	@ (80012ac <HandleCmd+0x298>)
 8001104:	f000 fc6d 	bl	80019e2 <SendStrToUSB>
 				nullstr(SerialStr, 1024);
 8001108:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110c:	485c      	ldr	r0, [pc, #368]	@ (8001280 <HandleCmd+0x26c>)
 800110e:	f000 f981 	bl	8001414 <nullstr>
 				return;
 8001112:	e158      	b.n	80013c6 <HandleCmd+0x3b2>
 			 }
 		 }else{
 			SendStrToUSB("INVALID COMMAND\r\nERROR:-2\r\n");
 8001114:	4866      	ldr	r0, [pc, #408]	@ (80012b0 <HandleCmd+0x29c>)
 8001116:	f000 fc64 	bl	80019e2 <SendStrToUSB>
 			nullstr(SerialStr, 1024);
 800111a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800111e:	4858      	ldr	r0, [pc, #352]	@ (8001280 <HandleCmd+0x26c>)
 8001120:	f000 f978 	bl	8001414 <nullstr>
 			return;
 8001124:	e14f      	b.n	80013c6 <HandleCmd+0x3b2>
 		 }

 	 }

 	if (containsStr("CTRL:", SerialStr) >= 0){
 8001126:	4956      	ldr	r1, [pc, #344]	@ (8001280 <HandleCmd+0x26c>)
 8001128:	4862      	ldr	r0, [pc, #392]	@ (80012b4 <HandleCmd+0x2a0>)
 800112a:	f000 fc3a 	bl	80019a2 <containsStr>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	db4b      	blt.n	80011cc <HandleCmd+0x1b8>
 		 if (strlen(SerialStr) >= 6){
 8001134:	4852      	ldr	r0, [pc, #328]	@ (8001280 <HandleCmd+0x26c>)
 8001136:	f7ff f8c3 	bl	80002c0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	2b05      	cmp	r3, #5
 800113e:	d93c      	bls.n	80011ba <HandleCmd+0x1a6>
 			 // Channel
 			uint8_t OutputChannel = SerialStr[5] - 48;
 8001140:	4b4f      	ldr	r3, [pc, #316]	@ (8001280 <HandleCmd+0x26c>)
 8001142:	795b      	ldrb	r3, [r3, #5]
 8001144:	3b30      	subs	r3, #48	@ 0x30
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 			 if (!(OutputChannel >= 0 && OutputChannel <= 3)){
 800114a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800114e:	2b03      	cmp	r3, #3
 8001150:	d908      	bls.n	8001164 <HandleCmd+0x150>
 				 SendStrToUSB("INVALID COMMAND\r\nERROR:-7\r\n");
 8001152:	4859      	ldr	r0, [pc, #356]	@ (80012b8 <HandleCmd+0x2a4>)
 8001154:	f000 fc45 	bl	80019e2 <SendStrToUSB>
 					nullstr(SerialStr, 1024);
 8001158:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800115c:	4848      	ldr	r0, [pc, #288]	@ (8001280 <HandleCmd+0x26c>)
 800115e:	f000 f959 	bl	8001414 <nullstr>
 				 return;
 8001162:	e130      	b.n	80013c6 <HandleCmd+0x3b2>
 			 }
 			 // New State
 			 uint8_t State = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 			 if (containsStr(" ON", SerialStr)){
 800116a:	4945      	ldr	r1, [pc, #276]	@ (8001280 <HandleCmd+0x26c>)
 800116c:	4853      	ldr	r0, [pc, #332]	@ (80012bc <HandleCmd+0x2a8>)
 800116e:	f000 fc18 	bl	80019a2 <containsStr>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HandleCmd+0x16c>
 				 State = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800117e:	e013      	b.n	80011a8 <HandleCmd+0x194>
 			 }else if (containsStr(" OFF", SerialStr)){
 8001180:	493f      	ldr	r1, [pc, #252]	@ (8001280 <HandleCmd+0x26c>)
 8001182:	484f      	ldr	r0, [pc, #316]	@ (80012c0 <HandleCmd+0x2ac>)
 8001184:	f000 fc0d 	bl	80019a2 <containsStr>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HandleCmd+0x182>
 				 State = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001194:	e008      	b.n	80011a8 <HandleCmd+0x194>
 			 }else{
 				 SendStrToUSB("INVALID COMMAND\r\nERROR:-9\r\n");
 8001196:	484b      	ldr	r0, [pc, #300]	@ (80012c4 <HandleCmd+0x2b0>)
 8001198:	f000 fc23 	bl	80019e2 <SendStrToUSB>
 					nullstr(SerialStr, 1024);
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	4837      	ldr	r0, [pc, #220]	@ (8001280 <HandleCmd+0x26c>)
 80011a2:	f000 f937 	bl	8001414 <nullstr>
 				 return;
 80011a6:	e10e      	b.n	80013c6 <HandleCmd+0x3b2>
 			 }

 			 Output(OutputChannel, State);
 80011a8:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80011ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f966 	bl	8001484 <Output>
 80011b8:	e008      	b.n	80011cc <HandleCmd+0x1b8>

 		 }else{
 			SendStrToUSB("INVALID COMMAND\r\nERROR:-8\r\n");
 80011ba:	4843      	ldr	r0, [pc, #268]	@ (80012c8 <HandleCmd+0x2b4>)
 80011bc:	f000 fc11 	bl	80019e2 <SendStrToUSB>
 			nullstr(SerialStr, 1024);
 80011c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c4:	482e      	ldr	r0, [pc, #184]	@ (8001280 <HandleCmd+0x26c>)
 80011c6:	f000 f925 	bl	8001414 <nullstr>
 			return;
 80011ca:	e0fc      	b.n	80013c6 <HandleCmd+0x3b2>
 		 }

 	 }

 	if (containsStr("SET:VOLT", SerialStr) >= 0 && strlen(SerialStr) > 10){
 80011cc:	492c      	ldr	r1, [pc, #176]	@ (8001280 <HandleCmd+0x26c>)
 80011ce:	483f      	ldr	r0, [pc, #252]	@ (80012cc <HandleCmd+0x2b8>)
 80011d0:	f000 fbe7 	bl	80019a2 <containsStr>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f2c0 80f5 	blt.w	80013c6 <HandleCmd+0x3b2>
 80011dc:	4828      	ldr	r0, [pc, #160]	@ (8001280 <HandleCmd+0x26c>)
 80011de:	f7ff f86f 	bl	80002c0 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b0a      	cmp	r3, #10
 80011e6:	f240 80ee 	bls.w	80013c6 <HandleCmd+0x3b2>
 		nullstr(strOutBuf, 1024);
 80011ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ee:	482b      	ldr	r0, [pc, #172]	@ (800129c <HandleCmd+0x288>)
 80011f0:	f000 f910 	bl	8001414 <nullstr>
 		char *start =  &SerialStr[9];
 80011f4:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <HandleCmd+0x2bc>)
 80011f6:	623b      	str	r3, [r7, #32]
 		char *end =  &SerialStr[14];
 80011f8:	4b36      	ldr	r3, [pc, #216]	@ (80012d4 <HandleCmd+0x2c0>)
 80011fa:	61fb      	str	r3, [r7, #28]
 		char *substr = (char *)calloc(1, end - start + 1);
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	6a3b      	ldr	r3, [r7, #32]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	3301      	adds	r3, #1
 8001204:	4619      	mov	r1, r3
 8001206:	2001      	movs	r0, #1
 8001208:	f00b fc16 	bl	800ca38 <calloc>
 800120c:	4603      	mov	r3, r0
 800120e:	61bb      	str	r3, [r7, #24]
 		memcpy(substr, start, end - start);
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	461a      	mov	r2, r3
 8001218:	6a39      	ldr	r1, [r7, #32]
 800121a:	69b8      	ldr	r0, [r7, #24]
 800121c:	f00d f92d 	bl	800e47a <memcpy>
 		float TargetVoltage = atof(substr);
 8001220:	69b8      	ldr	r0, [r7, #24]
 8001222:	f00b fc05 	bl	800ca30 <atof>
 8001226:	ec53 2b10 	vmov	r2, r3, d0
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fd03 	bl	8000c38 <__aeabi_d2f>
 8001232:	4603      	mov	r3, r0
 8001234:	617b      	str	r3, [r7, #20]
 		sprintf(strOutBuf, "Set to %s V\r\n", substr);
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4927      	ldr	r1, [pc, #156]	@ (80012d8 <HandleCmd+0x2c4>)
 800123a:	4818      	ldr	r0, [pc, #96]	@ (800129c <HandleCmd+0x288>)
 800123c:	f00c ffee 	bl	800e21c <siprintf>
		SendStrToUSB(strOutBuf);
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <HandleCmd+0x288>)
 8001242:	f000 fbce 	bl	80019e2 <SendStrToUSB>
 		nullstr(strOutBuf, 1024);
 8001246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800124a:	4814      	ldr	r0, [pc, #80]	@ (800129c <HandleCmd+0x288>)
 800124c:	f000 f8e2 	bl	8001414 <nullstr>

 		float ActualVoltage = Measure(0, Vadj);
 8001250:	2100      	movs	r1, #0
 8001252:	2000      	movs	r0, #0
 8001254:	f000 fa00 	bl	8001658 <Measure>
 8001258:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

 		uint16_t CurrentPWM = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 		int PWMIncrement = TargetVoltage > ActualVoltage ? 10 : -10;
 8001260:	ed97 7a05 	vldr	s14, [r7, #20]
 8001264:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	dd01      	ble.n	8001276 <HandleCmd+0x262>
 8001272:	230a      	movs	r3, #10
 8001274:	e001      	b.n	800127a <HandleCmd+0x266>
 8001276:	f06f 0309 	mvn.w	r3, #9
 800127a:	613b      	str	r3, [r7, #16]
 		while(ActualVoltage < TargetVoltage && CurrentPWM < 1000){
 800127c:	e096      	b.n	80013ac <HandleCmd+0x398>
 800127e:	bf00      	nop
 8001280:	200008b8 	.word	0x200008b8
 8001284:	08010c6c 	.word	0x08010c6c
 8001288:	08010c74 	.word	0x08010c74
 800128c:	08010c7c 	.word	0x08010c7c
 8001290:	08010c84 	.word	0x08010c84
 8001294:	08010c8c 	.word	0x08010c8c
 8001298:	08010ca8 	.word	0x08010ca8
 800129c:	20000cb8 	.word	0x20000cb8
 80012a0:	08010cb4 	.word	0x08010cb4
 80012a4:	08010cb8 	.word	0x08010cb8
 80012a8:	08010cbc 	.word	0x08010cbc
 80012ac:	08010cc8 	.word	0x08010cc8
 80012b0:	08010ce4 	.word	0x08010ce4
 80012b4:	08010d00 	.word	0x08010d00
 80012b8:	08010d08 	.word	0x08010d08
 80012bc:	08010d24 	.word	0x08010d24
 80012c0:	08010d28 	.word	0x08010d28
 80012c4:	08010d30 	.word	0x08010d30
 80012c8:	08010d4c 	.word	0x08010d4c
 80012cc:	08010d68 	.word	0x08010d68
 80012d0:	200008c1 	.word	0x200008c1
 80012d4:	200008c6 	.word	0x200008c6
 80012d8:	08010d74 	.word	0x08010d74
 80012dc:	3f9b22d1 	.word	0x3f9b22d1
 80012e0:	457ff000 	.word	0x457ff000
 			CurrentPWM += PWMIncrement;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012ea:	4413      	add	r3, r2
 80012ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 			PWM(CurrentPWM);
 80012ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 f871 	bl	80013d8 <PWM>
 			ActualVoltage = Measure(0, Vadj);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 f9ad 	bl	8001658 <Measure>
 80012fe:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 			float VREF_plus = (float)1.212 * ((float)*getVrefCalData(0) / (float)*getVrefCalData(1));
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f990 	bl	8001628 <getVrefCalData>
 8001308:	4603      	mov	r3, r0
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001314:	2001      	movs	r0, #1
 8001316:	f000 f987 	bl	8001628 <getVrefCalData>
 800131a:	4603      	mov	r3, r0
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001326:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800132a:	ed1f 7a14 	vldr	s14, [pc, #-80]	@ 80012dc <HandleCmd+0x2c8>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	edc7 7a03 	vstr	s15, [r7, #12]
 		 	float Vref = (VREF_plus / (float)getVref(4000)) * 4095;
 8001336:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800133a:	f000 f913 	bl	8001564 <getVref>
 800133e:	eef0 6a40 	vmov.f32	s13, s0
 8001342:	ed97 7a03 	vldr	s14, [r7, #12]
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	ed1f 7a1b 	vldr	s14, [pc, #-108]	@ 80012e0 <HandleCmd+0x2cc>
 800134e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001352:	edc7 7a02 	vstr	s15, [r7, #8]
 		 	float OutputVoltage = ((Vref / 4095) * CurrentPWM);
 8001356:	edd7 7a02 	vldr	s15, [r7, #8]
 800135a:	ed5f 6a1f 	vldr	s13, [pc, #-124]	@ 80012e0 <HandleCmd+0x2cc>
 800135e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001362:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	edc7 7a01 	vstr	s15, [r7, #4]
 	 		sprintf(strOutBuf, "DAC: %d / %0.3f V - Vadj: %0.3f V\r\n", CurrentPWM, OutputVoltage, ActualVoltage);
 8001374:	8dfe      	ldrh	r6, [r7, #46]	@ 0x2e
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f90e 	bl	8000598 <__aeabi_f2d>
 800137c:	4604      	mov	r4, r0
 800137e:	460d      	mov	r5, r1
 8001380:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001382:	f7ff f909 	bl	8000598 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800138e:	e9cd 4500 	strd	r4, r5, [sp]
 8001392:	4632      	mov	r2, r6
 8001394:	490e      	ldr	r1, [pc, #56]	@ (80013d0 <HandleCmd+0x3bc>)
 8001396:	480f      	ldr	r0, [pc, #60]	@ (80013d4 <HandleCmd+0x3c0>)
 8001398:	f00c ff40 	bl	800e21c <siprintf>
 			SendStrToUSB(strOutBuf);
 800139c:	480d      	ldr	r0, [pc, #52]	@ (80013d4 <HandleCmd+0x3c0>)
 800139e:	f000 fb20 	bl	80019e2 <SendStrToUSB>
 	 		nullstr(strOutBuf, 1024);
 80013a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <HandleCmd+0x3c0>)
 80013a8:	f000 f834 	bl	8001414 <nullstr>
 		while(ActualVoltage < TargetVoltage && CurrentPWM < 1000){
 80013ac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80013b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	d503      	bpl.n	80013c6 <HandleCmd+0x3b2>
 80013be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013c4:	d38e      	bcc.n	80012e4 <HandleCmd+0x2d0>




 	}
  }
 80013c6:	373c      	adds	r7, #60	@ 0x3c
 80013c8:	46bd      	mov	sp, r7
 80013ca:	ecbd 8b02 	vpop	{d8}
 80013ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d0:	08010d84 	.word	0x08010d84
 80013d4:	20000cb8 	.word	0x20000cb8

080013d8 <PWM>:
void PWM(uint16_t value)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e2:	2360      	movs	r3, #96	@ 0x60
 80013e4:	60fb      	str	r3, [r7, #12]
	sConfigOC.Pulse = value;
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4805      	ldr	r0, [pc, #20]	@ (8001410 <PWM+0x38>)
 80013fc:	f005 ff02 	bl	8007204 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001400:	2104      	movs	r1, #4
 8001402:	4803      	ldr	r0, [pc, #12]	@ (8001410 <PWM+0x38>)
 8001404:	f005 fdfe 	bl	8007004 <HAL_TIM_PWM_Start>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	@ 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000046c 	.word	0x2000046c

08001414 <nullstr>:

void nullstr(char* str, uint16_t size){
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
for (int i = 0; i < size; i++){
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	e007      	b.n	8001436 <nullstr+0x22>
	str[i] = '\0';
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
for (int i = 0; i < size; i++){
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbf3      	blt.n	8001426 <nullstr+0x12>
}
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <nullint8>:
void nullint8(uint8_t* pointer, uint16_t size){
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
for (int i = 0; i < size; i++){
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	e007      	b.n	800146e <nullint8+0x22>
	pointer[i] = 0;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
for (int i = 0; i < size; i++){
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	429a      	cmp	r2, r3
 8001474:	dbf3      	blt.n	800145e <nullint8+0x12>
}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <Output>:

void Output(uint8_t Channel, uint8_t State){
 8001484:	b580      	push	{r7, lr}
 8001486:	b0c4      	sub	sp, #272	@ 0x110
 8001488:	af00      	add	r7, sp, #0
 800148a:	4602      	mov	r2, r0
 800148c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001490:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800149a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
GPIO_TypeDef* port;
uint8_t pin = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
switch(Channel){
 80014a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80014ac:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d828      	bhi.n	8001508 <Output+0x84>
 80014b6:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <Output+0x38>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014dd 	.word	0x080014dd
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	080014fb 	.word	0x080014fb
	case Vadj:
		port = RelayPort0;
 80014cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		pin = RelayPin0;
 80014d4:	2309      	movs	r3, #9
 80014d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		break;
 80014da:	e019      	b.n	8001510 <Output+0x8c>
	case TwelveV:
		port = RelayPort1;
 80014dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80014e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		pin = RelayPin1;
 80014e4:	230b      	movs	r3, #11
 80014e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		break;
 80014ea:	e011      	b.n	8001510 <Output+0x8c>
	case FiveV:
		port = RelayPort2;
 80014ec:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <Output+0xd0>)
 80014ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		pin = RelayPin2;
 80014f2:	230b      	movs	r3, #11
 80014f4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		break;
 80014f8:	e00a      	b.n	8001510 <Output+0x8c>
	case ThreeV3:
		port = RelayPort3;
 80014fa:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <Output+0xd4>)
 80014fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
		pin = RelayPin3;
 8001500:	2304      	movs	r3, #4
 8001502:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		break;
 8001506:	e003      	b.n	8001510 <Output+0x8c>
	default:
		SendStrToUSB("INVALID COMMAND\r\nERROR:-10\r\n");
 8001508:	4814      	ldr	r0, [pc, #80]	@ (800155c <Output+0xd8>)
 800150a:	f000 fa6a 	bl	80019e2 <SendStrToUSB>
 800150e:	e01d      	b.n	800154c <Output+0xc8>
		return;
}
HAL_GPIO_WritePin(port, pin, State);
 8001510:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8001514:	b299      	uxth	r1, r3
 8001516:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800151a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001526:	f002 fe3d 	bl	80041a4 <HAL_GPIO_WritePin>
char output[255];
sprintf(output, "Set Pin: %d to %d\r\n", pin, State);
 800152a:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 800152e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001532:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	f107 000c 	add.w	r0, r7, #12
 800153c:	4908      	ldr	r1, [pc, #32]	@ (8001560 <Output+0xdc>)
 800153e:	f00c fe6d 	bl	800e21c <siprintf>
SendStrToUSB(output);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fa4b 	bl	80019e2 <SendStrToUSB>
}
 800154c:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	48000800 	.word	0x48000800
 8001558:	48000400 	.word	0x48000400
 800155c:	08010da8 	.word	0x08010da8
 8001560:	08010dc8 	.word	0x08010dc8

08001564 <getVref>:

float getVref(uint16_t Samples){
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	@ 0x30
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]


ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2220      	movs	r2, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00c feb3 	bl	800e2e2 <memset>

sConfig.Channel = ADC_CHANNEL_VREFINT;
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <getVref+0xbc>)
 800157e:	60bb      	str	r3, [r7, #8]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8001580:	2306      	movs	r3, #6
 8001582:	60fb      	str	r3, [r7, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001584:	2300      	movs	r3, #0
 8001586:	613b      	str	r3, [r7, #16]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001588:	237f      	movs	r3, #127	@ 0x7f
 800158a:	617b      	str	r3, [r7, #20]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800158c:	2304      	movs	r3, #4
 800158e:	61bb      	str	r3, [r7, #24]
sConfig.Offset = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]

float adcAvg = 0UL;
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(uint16_t i = 0; i < Samples; i++){
 800159a:	2300      	movs	r3, #0
 800159c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800159e:	e027      	b.n	80015f0 <getVref+0x8c>

		// Take reading
		// Start ADC Conversion
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	481f      	ldr	r0, [pc, #124]	@ (8001624 <getVref+0xc0>)
 80015a8:	f001 fe12 	bl	80031d0 <HAL_ADC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <getVref+0x52>
		{
			Error_Handler();
 80015b2:	f000 fd03 	bl	8001fbc <Error_Handler>
		}
		if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80015b6:	481b      	ldr	r0, [pc, #108]	@ (8001624 <getVref+0xc0>)
 80015b8:	f001 fc68 	bl	8002e8c <HAL_ADC_Start>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <getVref+0x62>
		{
			Error_Handler();
 80015c2:	f000 fcfb 	bl	8001fbc <Error_Handler>
		}
		 // Wait for conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015c6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ca:	4816      	ldr	r0, [pc, #88]	@ (8001624 <getVref+0xc0>)
 80015cc:	f001 fd1a 	bl	8003004 <HAL_ADC_PollForConversion>

		// Get ADC reading
		// Assuming Vref is 3.3V and 12-bit resolution

		adcAvg += (float)HAL_ADC_GetValue(&hadc1);
 80015d0:	4814      	ldr	r0, [pc, #80]	@ (8001624 <getVref+0xc0>)
 80015d2:	f001 fdef 	bl	80031b4 <HAL_ADC_GetValue>
 80015d6:	ee07 0a90 	vmov	s15, r0
 80015da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	for(uint16_t i = 0; i < Samples; i++){
 80015ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015ec:	3301      	adds	r3, #1
 80015ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80015f0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3d3      	bcc.n	80015a0 <getVref+0x3c>

	}
	adcAvg /= Samples;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001602:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c


//sprintf(strOutBuf, "Reference Voltage: %0.6f \r\n", (float)adcAvg);
//SendStrToUSB(strOutBuf);
return adcAvg;
 800160e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001610:	ee07 3a90 	vmov	s15, r3
}
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	3730      	adds	r7, #48	@ 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	cb840000 	.word	0xcb840000
 8001624:	2000036c 	.word	0x2000036c

08001628 <getVrefCalData>:
// gets the calibration data from the memory location selected by Index 0 to 1
volatile uint32_t * getVrefCalData(int Index){
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
volatile uint32_t * refAddress = ( volatile uint32_t *)(Index == 0 ? 0x1FFF75AA : 0x1FFF75AB);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <getVrefCalData+0x12>
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <getVrefCalData+0x24>)
 8001638:	e000      	b.n	800163c <getVrefCalData+0x14>
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <getVrefCalData+0x28>)
 800163c:	60fb      	str	r3, [r7, #12]
//sprintf(strOutBuf,"VrefCal(%d): %ld\n\r", Index, *refAddress);
//SendStrToUSB(strOutBuf);
//nullstr(strOutBuf, 1014);
return refAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	1fff75aa 	.word	0x1fff75aa
 8001650:	1fff75ab 	.word	0x1fff75ab
 8001654:	00000000 	.word	0x00000000

08001658 <Measure>:


float Measure(int8_t Mode, uint8_t Channel)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	ed2d 8b02 	vpush	{d8}
 800165e:	b092      	sub	sp, #72	@ 0x48
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]

// Set ADC Channel
ADC_ChannelConfTypeDef sConfig = {0};
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f00c fe34 	bl	800e2e2 <memset>
// 1 = Current
uint32_t adcChannel;
ADC_HandleTypeDef* hadc;
//sprintf(strOutBuf,"Channel: %d\n\r", Channel);
//SendStrToUSB(strOutBuf);
switch(Mode){
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <Measure+0x30>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d028      	beq.n	80016d8 <Measure+0x80>
 8001686:	e04f      	b.n	8001728 <Measure+0xd0>
	case 0:
		switch(Channel){
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d81e      	bhi.n	80016cc <Measure+0x74>
 800168e:	a201      	add	r2, pc, #4	@ (adr r2, 8001694 <Measure+0x3c>)
 8001690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001694:	080016a5 	.word	0x080016a5
 8001698:	080016af 	.word	0x080016af
 800169c:	080016b9 	.word	0x080016b9
 80016a0:	080016c3 	.word	0x080016c3
			case Vadj:
				// B12
				adcChannel = ADC_CHANNEL_11;
 80016a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001910 <Measure+0x2b8>)
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc1;
 80016a8:	4b9a      	ldr	r3, [pc, #616]	@ (8001914 <Measure+0x2bc>)
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80016ac:	e013      	b.n	80016d6 <Measure+0x7e>
			case TwelveV:
				// B1
				adcChannel = ADC_CHANNEL_12;
 80016ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001918 <Measure+0x2c0>)
 80016b0:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc1;
 80016b2:	4b98      	ldr	r3, [pc, #608]	@ (8001914 <Measure+0x2bc>)
 80016b4:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80016b6:	e00e      	b.n	80016d6 <Measure+0x7e>
			case FiveV:
				// B14
				adcChannel = ADC_CHANNEL_15;
 80016b8:	4b98      	ldr	r3, [pc, #608]	@ (800191c <Measure+0x2c4>)
 80016ba:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc1;
 80016bc:	4b95      	ldr	r3, [pc, #596]	@ (8001914 <Measure+0x2bc>)
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80016c0:	e009      	b.n	80016d6 <Measure+0x7e>
			case ThreeV3:
				// B11
				adcChannel = ADC_CHANNEL_14;
 80016c2:	4b97      	ldr	r3, [pc, #604]	@ (8001920 <Measure+0x2c8>)
 80016c4:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc2;
 80016c6:	4b97      	ldr	r3, [pc, #604]	@ (8001924 <Measure+0x2cc>)
 80016c8:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80016ca:	e004      	b.n	80016d6 <Measure+0x7e>
			default:
				SendStrToUSB("INVALID COMMAND\r\nERROR:-4\r\n");
 80016cc:	4896      	ldr	r0, [pc, #600]	@ (8001928 <Measure+0x2d0>)
 80016ce:	f000 f988 	bl	80019e2 <SendStrToUSB>
				return -4;
 80016d2:	4b96      	ldr	r3, [pc, #600]	@ (800192c <Measure+0x2d4>)
 80016d4:	e109      	b.n	80018ea <Measure+0x292>
		}
		break;
 80016d6:	e02c      	b.n	8001732 <Measure+0xda>
	case 1:
		switch(Channel){
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d81e      	bhi.n	800171c <Measure+0xc4>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <Measure+0x8c>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	080016ff 	.word	0x080016ff
 80016ec:	08001709 	.word	0x08001709
 80016f0:	08001713 	.word	0x08001713
			case Vadj:
				// C4
				adcChannel = ADC_CHANNEL_5;
 80016f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001930 <Measure+0x2d8>)
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc2;
 80016f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001924 <Measure+0x2cc>)
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 80016fc:	e013      	b.n	8001726 <Measure+0xce>
			case TwelveV:
				// B2
				adcChannel = ADC_CHANNEL_12;
 80016fe:	4b86      	ldr	r3, [pc, #536]	@ (8001918 <Measure+0x2c0>)
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc2;
 8001702:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <Measure+0x2cc>)
 8001704:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 8001706:	e00e      	b.n	8001726 <Measure+0xce>
			case FiveV:
				// B0
				adcChannel = ADC_CHANNEL_15;
 8001708:	4b84      	ldr	r3, [pc, #528]	@ (800191c <Measure+0x2c4>)
 800170a:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc1;
 800170c:	4b81      	ldr	r3, [pc, #516]	@ (8001914 <Measure+0x2bc>)
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 8001710:	e009      	b.n	8001726 <Measure+0xce>
			case ThreeV3:
				// A7
				adcChannel = ADC_CHANNEL_4;
 8001712:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <Measure+0x2dc>)
 8001714:	647b      	str	r3, [r7, #68]	@ 0x44
				hadc = &hadc2;
 8001716:	4b83      	ldr	r3, [pc, #524]	@ (8001924 <Measure+0x2cc>)
 8001718:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 800171a:	e004      	b.n	8001726 <Measure+0xce>
			default:
				SendStrToUSB("INVALID COMMAND\r\nERROR:-5\r\n");
 800171c:	4886      	ldr	r0, [pc, #536]	@ (8001938 <Measure+0x2e0>)
 800171e:	f000 f960 	bl	80019e2 <SendStrToUSB>
				return -5;
 8001722:	4b86      	ldr	r3, [pc, #536]	@ (800193c <Measure+0x2e4>)
 8001724:	e0e1      	b.n	80018ea <Measure+0x292>
		}
		break;
 8001726:	e004      	b.n	8001732 <Measure+0xda>
	default:
		SendStrToUSB("INVALID COMMAND\r\nERROR:-6\r\n");
 8001728:	4885      	ldr	r0, [pc, #532]	@ (8001940 <Measure+0x2e8>)
 800172a:	f000 f95a 	bl	80019e2 <SendStrToUSB>
		return -6;
 800172e:	4b85      	ldr	r3, [pc, #532]	@ (8001944 <Measure+0x2ec>)
 8001730:	e0db      	b.n	80018ea <Measure+0x292>
}

sConfig.Channel = adcChannel;
 8001732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001734:	60bb      	str	r3, [r7, #8]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2306      	movs	r3, #6
 8001738:	60fb      	str	r3, [r7, #12]
sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800173e:	237f      	movs	r3, #127	@ 0x7f
 8001740:	617b      	str	r3, [r7, #20]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001742:	2304      	movs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
sConfig.Offset = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]

// Take reading
// Start ADC Conversion
// 4k Samples
float adcAvg = 0UL;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	643b      	str	r3, [r7, #64]	@ 0x40
for(uint16_t i = 0; i < 4000; i++){
 8001750:	2300      	movs	r3, #0
 8001752:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001754:	e027      	b.n	80017a6 <Measure+0x14e>

	// Take reading
	// Start ADC Conversion
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4619      	mov	r1, r3
 800175c:	486d      	ldr	r0, [pc, #436]	@ (8001914 <Measure+0x2bc>)
 800175e:	f001 fd37 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <Measure+0x114>
	{
		Error_Handler();
 8001768:	f000 fc28 	bl	8001fbc <Error_Handler>
	}
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800176c:	4869      	ldr	r0, [pc, #420]	@ (8001914 <Measure+0x2bc>)
 800176e:	f001 fb8d 	bl	8002e8c <HAL_ADC_Start>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <Measure+0x124>
	{
		Error_Handler();
 8001778:	f000 fc20 	bl	8001fbc <Error_Handler>
	}
	 // Wait for conversion to complete
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	4864      	ldr	r0, [pc, #400]	@ (8001914 <Measure+0x2bc>)
 8001782:	f001 fc3f 	bl	8003004 <HAL_ADC_PollForConversion>

	// Get ADC reading

	adcAvg += HAL_ADC_GetValue(&hadc1);
 8001786:	4863      	ldr	r0, [pc, #396]	@ (8001914 <Measure+0x2bc>)
 8001788:	f001 fd14 	bl	80031b4 <HAL_ADC_GetValue>
 800178c:	ee07 0a90 	vmov	s15, r0
 8001790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001794:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
for(uint16_t i = 0; i < 4000; i++){
 80017a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80017a2:	3301      	adds	r3, #1
 80017a4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80017a6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80017a8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80017ac:	d3d3      	bcc.n	8001756 <Measure+0xfe>

}

adcAvg /= 4000;
 80017ae:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80017b2:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001948 <Measure+0x2f0>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
//SendStrToUSB(strOutBuf);
//nullstr(strOutBuf, 1024);

// Convert ADC reading to voltage/current

float VREF_plus = (float)1.212 * ((float)*getVrefCalData(0) / (float)*getVrefCalData(1));
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ff32 	bl	8001628 <getVrefCalData>
 80017c4:	4603      	mov	r3, r0
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff ff29 	bl	8001628 <getVrefCalData>
 80017d6:	4603      	mov	r3, r0
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80017e6:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800194c <Measure+0x2f4>
 80017ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
float Vref = (VREF_plus / (float)getVref(4000)) * 4095;
 80017f2:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80017f6:	f7ff feb5 	bl	8001564 <getVref>
 80017fa:	eef0 6a40 	vmov.f32	s13, s0
 80017fe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001806:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001950 <Measure+0x2f8>
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
float ChannelVoltage = ((Vref / 4095) * adcAvg); // + (float)RefCalOffset; // Assuming Vref is 3.3V and 12-bit resolution
 8001812:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001816:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001950 <Measure+0x2f8>
 800181a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001826:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
// Convert ADC reading to voltage/currentVREF_plus
//sprintf(strOutBuf,"Calibrated Channel Voltage(ref): %0.6f\n\r", ChannelVoltage);
//(strOutBuf);
//nullstr(strOutBuf, 1024);
// Convert to Current reading or attenuated voltage reading
float Reading = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
switch(Mode){
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d002      	beq.n	800183e <Measure+0x1e6>
 8001838:	2b01      	cmp	r3, #1
 800183a:	d047      	beq.n	80018cc <Measure+0x274>
 800183c:	e04f      	b.n	80018de <Measure+0x286>
	case 0:
		switch(Channel){
 800183e:	79bb      	ldrb	r3, [r7, #6]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d030      	beq.n	80018a6 <Measure+0x24e>
 8001844:	2b03      	cmp	r3, #3
 8001846:	dc3b      	bgt.n	80018c0 <Measure+0x268>
 8001848:	2b01      	cmp	r3, #1
 800184a:	dc02      	bgt.n	8001852 <Measure+0x1fa>
 800184c:	2b00      	cmp	r3, #0
 800184e:	da03      	bge.n	8001858 <Measure+0x200>
 8001850:	e036      	b.n	80018c0 <Measure+0x268>
 8001852:	2b02      	cmp	r3, #2
 8001854:	d01a      	beq.n	800188c <Measure+0x234>
 8001856:	e033      	b.n	80018c0 <Measure+0x268>
			case Vadj:
			case TwelveV:
				// B12
				// B1
				Reading = ChannelVoltage * ( 33.6 + 9.72 ) / 9.72;
 8001858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800185a:	f7fe fe9d 	bl	8000598 <__aeabi_f2d>
 800185e:	a328      	add	r3, pc, #160	@ (adr r3, 8001900 <Measure+0x2a8>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fef0 	bl	8000648 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	a325      	add	r3, pc, #148	@ (adr r3, 8001908 <Measure+0x2b0>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7ff f811 	bl	800089c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f9d9 	bl	8000c38 <__aeabi_d2f>
 8001886:	4603      	mov	r3, r0
 8001888:	63bb      	str	r3, [r7, #56]	@ 0x38
				break;
 800188a:	e01e      	b.n	80018ca <Measure+0x272>
			case FiveV:
				// B14
				Reading = ChannelVoltage * ( 15 + 10 ) / 10;
 800188c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001890:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001894:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001898:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800189c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
				break;
 80018a4:	e011      	b.n	80018ca <Measure+0x272>
			case ThreeV3:
				// B11
				Reading = ChannelVoltage * ( 5 + 10 ) / 10;
 80018a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018aa:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80018ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ba:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
				break;
 80018be:	e004      	b.n	80018ca <Measure+0x272>
			default:
				SendStrToUSB("INVALID COMMAND\r\nERROR:-11\r\n");
 80018c0:	4824      	ldr	r0, [pc, #144]	@ (8001954 <Measure+0x2fc>)
 80018c2:	f000 f88e 	bl	80019e2 <SendStrToUSB>
				return -11;
 80018c6:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <Measure+0x300>)
 80018c8:	e00f      	b.n	80018ea <Measure+0x292>
		}
		break;
 80018ca:	e00d      	b.n	80018e8 <Measure+0x290>
	case 1:
		// C4
		// B2
		// B0
		// A7
		Reading = ChannelVoltage / (2500 * 0.01);
 80018cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80018d0:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80018d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		break;
 80018dc:	e004      	b.n	80018e8 <Measure+0x290>
	default:
		SendStrToUSB("INVALID COMMAND\r\nERROR:-12\r\n");
 80018de:	481f      	ldr	r0, [pc, #124]	@ (800195c <Measure+0x304>)
 80018e0:	f000 f87f 	bl	80019e2 <SendStrToUSB>
		return -12;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <Measure+0x308>)
 80018e6:	e000      	b.n	80018ea <Measure+0x292>
}

return Reading;
 80018e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb0 0a67 	vmov.f32	s0, s15
 80018f2:	3748      	adds	r7, #72	@ 0x48
 80018f4:	46bd      	mov	sp, r7
 80018f6:	ecbd 8b02 	vpop	{d8}
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	f3af 8000 	nop.w
 8001900:	c28f5c29 	.word	0xc28f5c29
 8001904:	4045a8f5 	.word	0x4045a8f5
 8001908:	d70a3d71 	.word	0xd70a3d71
 800190c:	402370a3 	.word	0x402370a3
 8001910:	2e300800 	.word	0x2e300800
 8001914:	2000036c 	.word	0x2000036c
 8001918:	32601000 	.word	0x32601000
 800191c:	3ef08000 	.word	0x3ef08000
 8001920:	3ac04000 	.word	0x3ac04000
 8001924:	200003d8 	.word	0x200003d8
 8001928:	08010ddc 	.word	0x08010ddc
 800192c:	c0800000 	.word	0xc0800000
 8001930:	14f00020 	.word	0x14f00020
 8001934:	10c00010 	.word	0x10c00010
 8001938:	08010df8 	.word	0x08010df8
 800193c:	c0a00000 	.word	0xc0a00000
 8001940:	08010e14 	.word	0x08010e14
 8001944:	c0c00000 	.word	0xc0c00000
 8001948:	457a0000 	.word	0x457a0000
 800194c:	3f9b22d1 	.word	0x3f9b22d1
 8001950:	457ff000 	.word	0x457ff000
 8001954:	08010e30 	.word	0x08010e30
 8001958:	c1300000 	.word	0xc1300000
 800195c:	08010e50 	.word	0x08010e50
 8001960:	c1400000 	.word	0xc1400000

08001964 <containsChar>:
ssize_t containsChar(char needle, const char *haystack)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
 if (!haystack)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <containsChar+0x18>
	 return -1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e00e      	b.n	800199a <containsChar+0x36>

 const char *needle_in_haystack = strchr(haystack, needle);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	4619      	mov	r1, r3
 8001980:	6838      	ldr	r0, [r7, #0]
 8001982:	f00c fcb6 	bl	800e2f2 <strchr>
 8001986:	60f8      	str	r0, [r7, #12]
 return needle_in_haystack ? needle_in_haystack - haystack : -1;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <containsChar+0x32>
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	e001      	b.n	800199a <containsChar+0x36>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <containsStr>:
ssize_t containsStr(const char * needle, const char *haystack)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
 char *needle_in_haystack;
 if(!needle || !haystack) return -1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <containsStr+0x16>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <containsStr+0x1c>
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	e00d      	b.n	80019da <containsStr+0x38>
 needle_in_haystack = strstr(haystack, needle);
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f00c fcb5 	bl	800e330 <strstr>
 80019c6:	60f8      	str	r0, [r7, #12]
 return needle_in_haystack ? needle_in_haystack - haystack : -1;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <containsStr+0x34>
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	e001      	b.n	80019da <containsStr+0x38>
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <SendStrToUSB>:

void SendStrToUSB(char* buf){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	f843 0c04 	str.w	r0, [r3, #-4]
char outbuffer[4096];
strcpy (outbuffer, buf);
 80019f4:	f107 0308 	add.w	r3, r7, #8
 80019f8:	461a      	mov	r2, r3
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00c fd31 	bl	800e46a <strcpy>
CDC_Transmit_FS((uint8_t *)outbuffer, (uint16_t)strlen(outbuffer));
 8001a08:	f107 0308 	add.w	r3, r7, #8
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7fe fc57 	bl	80002c0 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f00a fbbb 	bl	800c198 <CDC_Transmit_FS>

nullstr(outbuffer,4096);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fcf2 	bl	8001414 <nullstr>
}
 8001a30:	bf00      	nop
 8001a32:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MX_USB_OTG_FS_Init>:

static void MX_USB_OTG_FS_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
hUsbDeviceFS.pData = NULL;
 8001a40:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
hUsbDeviceFS.pClassData = NULL;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
hUsbDeviceFS.pClass = NULL;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
hUsbDeviceFS.dev_state = USBD_STATE_DEFAULT;
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
hUsbDeviceFS.id = 204;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a62:	22cc      	movs	r2, #204	@ 0xcc
 8001a64:	701a      	strb	r2, [r3, #0]

/* Init Device Library, add supported class and start the library. */
if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8001a66:	2200      	movs	r2, #0
 8001a68:	4913      	ldr	r1, [pc, #76]	@ (8001ab8 <MX_USB_OTG_FS_Init+0x7c>)
 8001a6a:	4812      	ldr	r0, [pc, #72]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a6c:	f009 f94c 	bl	800ad08 <USBD_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USB_OTG_FS_Init+0x3e>
{
 Error_Handler();
 8001a76:	f000 faa1 	bl	8001fbc <Error_Handler>
}
if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001a7a:	4910      	ldr	r1, [pc, #64]	@ (8001abc <MX_USB_OTG_FS_Init+0x80>)
 8001a7c:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a7e:	f009 f973 	bl	800ad68 <USBD_RegisterClass>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USB_OTG_FS_Init+0x50>
{
 Error_Handler();
 8001a88:	f000 fa98 	bl	8001fbc <Error_Handler>
}
if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <MX_USB_OTG_FS_Init+0x84>)
 8001a8e:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001a90:	f009 f894 	bl	800abbc <USBD_CDC_RegisterInterface>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USB_OTG_FS_Init+0x62>
{
 Error_Handler();
 8001a9a:	f000 fa8f 	bl	8001fbc <Error_Handler>
}
if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USB_OTG_FS_Init+0x78>)
 8001aa0:	f009 f989 	bl	800adb6 <USBD_Start>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USB_OTG_FS_Init+0x72>
{
 Error_Handler();
 8001aaa:	f000 fa87 	bl	8001fbc <Error_Handler>
}
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200011d4 	.word	0x200011d4
 8001ab8:	20000134 	.word	0x20000134
 8001abc:	2000001c 	.word	0x2000001c
 8001ac0:	20000120 	.word	0x20000120

08001ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	@ 0x50
 8001ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 0318 	add.w	r3, r7, #24
 8001ace:	2238      	movs	r2, #56	@ 0x38
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00c fc05 	bl	800e2e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001aea:	f004 f8a7 	bl	8005c3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 8001aee:	232a      	movs	r3, #42	@ 0x2a
 8001af0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af8:	2340      	movs	r3, #64	@ 0x40
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001afc:	2301      	movs	r3, #1
 8001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b04:	2302      	movs	r3, #2
 8001b06:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001b10:	2312      	movs	r3, #18
 8001b12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f004 f93d 	bl	8005da4 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001b30:	f000 fa44 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fc3b 	bl	80063c8 <HAL_RCC_ClockConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b58:	f000 fa30 	bl	8001fbc <Error_Handler>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	@ 0x30
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	2220      	movs	r2, #32
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f00c fbb0 	bl	800e2e2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b82:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001b84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b8a:	4b30      	ldr	r3, [pc, #192]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001b8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b92:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b98:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ba4:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001baa:	4b28      	ldr	r3, [pc, #160]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bac:	2204      	movs	r2, #4
 8001bae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bca:	4b20      	ldr	r3, [pc, #128]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bec:	4817      	ldr	r0, [pc, #92]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001bee:	f000 ffc9 	bl	8002b84 <HAL_ADC_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001bf8:	f000 f9e0 	bl	8001fbc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001c08:	f001 ff7e 	bl	8003b08 <HAL_ADCEx_MultiModeConfigChannel>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001c12:	f000 f9d3 	bl	8001fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_ADC1_Init+0xec>)
 8001c18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c22:	237f      	movs	r3, #127	@ 0x7f
 8001c24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c26:	2304      	movs	r3, #4
 8001c28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <MX_ADC1_Init+0xe8>)
 8001c34:	f001 facc 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c3e:	f000 f9bd 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	@ 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000036c 	.word	0x2000036c
 8001c50:	3ef08000 	.word	0x3ef08000

08001c54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00c fb3e 	bl	800e2e2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <MX_ADC2_Init+0xc4>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c6c:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c72:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001c74:	4b27      	ldr	r3, [pc, #156]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c86:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c8e:	2204      	movs	r2, #4
 8001c90:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb2:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001cc6:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001cce:	4811      	ldr	r0, [pc, #68]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cd0:	f000 ff58 	bl	8002b84 <HAL_ADC_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001cda:	f000 f96f 	bl	8001fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <MX_ADC2_Init+0xc8>)
 8001ce0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ce2:	2306      	movs	r3, #6
 8001ce4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001cea:	237f      	movs	r3, #127	@ 0x7f
 8001cec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <MX_ADC2_Init+0xc0>)
 8001cfc:	f001 fa68 	bl	80031d0 <HAL_ADC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001d06:	f000 f959 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003d8 	.word	0x200003d8
 8001d18:	50000100 	.word	0x50000100
 8001d1c:	10c00010 	.word	0x10c00010

08001d20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d26:	4a18      	ldr	r2, [pc, #96]	@ (8001d88 <MX_RTC_Init+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d32:	227f      	movs	r2, #127	@ 0x7f
 8001d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d38:	22ff      	movs	r2, #255	@ 0xff
 8001d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d48:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d54:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d5c:	4809      	ldr	r0, [pc, #36]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d5e:	f004 ff07 	bl	8006b70 <HAL_RTC_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001d68:	f000 f928 	bl	8001fbc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4804      	ldr	r0, [pc, #16]	@ (8001d84 <MX_RTC_Init+0x64>)
 8001d72:	f005 f81a 	bl	8006daa <HAL_RTCEx_SetWakeUpTimer>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001d7c:	f000 f91e 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000444 	.word	0x20000444
 8001d88:	40002800 	.word	0x40002800

08001d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08e      	sub	sp, #56	@ 0x38
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dac:	463b      	mov	r3, r7
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	615a      	str	r2, [r3, #20]
 8001dbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e78 <MX_TIM3_Init+0xec>)
 8001dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001dc6:	2247      	movs	r2, #71	@ 0x47
 8001dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dd0:	4b28      	ldr	r3, [pc, #160]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd8:	4b26      	ldr	r3, [pc, #152]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dde:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de4:	4823      	ldr	r0, [pc, #140]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001de6:	f005 f854 	bl	8006e92 <HAL_TIM_Base_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001df0:	f000 f8e4 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481c      	ldr	r0, [pc, #112]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001e02:	f005 fb13 	bl	800742c <HAL_TIM_ConfigClockSource>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e0c:	f000 f8d6 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e10:	4818      	ldr	r0, [pc, #96]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001e12:	f005 f895 	bl	8006f40 <HAL_TIM_PWM_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e1c:	f000 f8ce 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4811      	ldr	r0, [pc, #68]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001e30:	f006 f84a 	bl	8007ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e3a:	f000 f8bf 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3e:	2360      	movs	r3, #96	@ 0x60
 8001e40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001e56:	f005 f9d5 	bl	8007204 <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e60:	f000 f8ac 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM3_Init+0xe8>)
 8001e66:	f000 fa11 	bl	800228c <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	@ 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000046c 	.word	0x2000046c
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b47      	ldr	r3, [pc, #284]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e96:	4a46      	ldr	r2, [pc, #280]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e9e:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	4a40      	ldr	r2, [pc, #256]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ece:	4b38      	ldr	r3, [pc, #224]	@ (8001fb0 <MX_GPIO_Init+0x134>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	603b      	str	r3, [r7, #0]
 8001ed8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	f244 4140 	movw	r1, #17472	@ 0x4440
 8001ee0:	4834      	ldr	r0, [pc, #208]	@ (8001fb4 <MX_GPIO_Init+0x138>)
 8001ee2:	f002 f95f 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f24c 112a 	movw	r1, #49450	@ 0xc12a
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef0:	f002 f958 	bl	80041a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	21a0      	movs	r1, #160	@ 0xa0
 8001ef8:	482f      	ldr	r0, [pc, #188]	@ (8001fb8 <MX_GPIO_Init+0x13c>)
 8001efa:	f002 f953 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_10;
 8001efe:	f244 4340 	movw	r3, #17472	@ 0x4440
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	4619      	mov	r1, r3
 8001f16:	4827      	ldr	r0, [pc, #156]	@ (8001fb4 <MX_GPIO_Init+0x138>)
 8001f18:	f001 ffaa 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 8001f1c:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4820      	ldr	r0, [pc, #128]	@ (8001fb4 <MX_GPIO_Init+0x138>)
 8001f32:	f001 ff9d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA8
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 8001f36:	f24c 132a 	movw	r3, #49450	@ 0xc12a
 8001f3a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f001 ff8d 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6e:	f001 ff7f 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f72:	2310      	movs	r3, #16
 8001f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <MX_GPIO_Init+0x13c>)
 8001f86:	f001 ff73 	bl	8003e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001f8a:	23a0      	movs	r3, #160	@ 0xa0
 8001f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4805      	ldr	r0, [pc, #20]	@ (8001fb8 <MX_GPIO_Init+0x13c>)
 8001fa2:	f001 ff65 	bl	8003e70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	48000400 	.word	0x48000400

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <Error_Handler+0x8>

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b13      	ldr	r3, [pc, #76]	@ (800201c <HAL_MspInit+0x54>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <HAL_MspInit+0x54>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <HAL_MspInit+0x54>)
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_MspInit+0x54>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fea:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_MspInit+0x54>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_MspInit+0x54>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 fb48 	bl	8002694 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002004:	f000 fb6e 	bl	80026e4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002008:	2000      	movs	r0, #0
 800200a:	f000 fb57 	bl	80026bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800200e:	f003 feb9 	bl	8005d84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000

08002020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09e      	sub	sp, #120	@ 0x78
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	2244      	movs	r2, #68	@ 0x44
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f00c f94e 	bl	800e2e2 <memset>
  if(hadc->Instance==ADC1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800204e:	d13e      	bne.n	80020ce <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002054:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002056:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800205a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	f107 0320 	add.w	r3, r7, #32
 8002060:	4618      	mov	r0, r3
 8002062:	f004 fb95 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800206c:	f7ff ffa6 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a52      	ldr	r2, [pc, #328]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 8002078:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800207a:	4b51      	ldr	r3, [pc, #324]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10b      	bne.n	800209a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002082:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002088:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800208c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208e:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4a49      	ldr	r2, [pc, #292]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 80020b2:	f245 0303 	movw	r3, #20483	@ 0x5003
 80020b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b8:	2303      	movs	r3, #3
 80020ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020c4:	4619      	mov	r1, r3
 80020c6:	4840      	ldr	r0, [pc, #256]	@ (80021c8 <HAL_ADC_MspInit+0x1a8>)
 80020c8:	f001 fed2 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020cc:	e073      	b.n	80021b6 <HAL_ADC_MspInit+0x196>
  else if(hadc->Instance==ADC2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	@ (80021cc <HAL_ADC_MspInit+0x1ac>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d16e      	bne.n	80021b6 <HAL_ADC_MspInit+0x196>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fb51 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 80020f4:	f7ff ff62 	bl	8001fbc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020f8:	4b31      	ldr	r3, [pc, #196]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a30      	ldr	r2, [pc, #192]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 8002100:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002102:	4b2f      	ldr	r3, [pc, #188]	@ (80021c0 <HAL_ADC_MspInit+0x1a0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10b      	bne.n	8002122 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800210a:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002110:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800212e:	4b25      	ldr	r3, [pc, #148]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	4a21      	ldr	r2, [pc, #132]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	4b1c      	ldr	r3, [pc, #112]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215e:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_ADC_MspInit+0x1a4>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216a:	2380      	movs	r3, #128	@ 0x80
 800216c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216e:	2303      	movs	r3, #3
 8002170:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f001 fe76 	bl	8003e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002184:	2310      	movs	r3, #16
 8002186:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002188:	2303      	movs	r3, #3
 800218a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002194:	4619      	mov	r1, r3
 8002196:	480e      	ldr	r0, [pc, #56]	@ (80021d0 <HAL_ADC_MspInit+0x1b0>)
 8002198:	f001 fe6a 	bl	8003e70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 800219c:	f640 0304 	movw	r3, #2052	@ 0x804
 80021a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a2:	2303      	movs	r3, #3
 80021a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021ae:	4619      	mov	r1, r3
 80021b0:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <HAL_ADC_MspInit+0x1a8>)
 80021b2:	f001 fe5d 	bl	8003e70 <HAL_GPIO_Init>
}
 80021b6:	bf00      	nop
 80021b8:	3778      	adds	r7, #120	@ 0x78
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200011c4 	.word	0x200011c4
 80021c4:	40021000 	.word	0x40021000
 80021c8:	48000400 	.word	0x48000400
 80021cc:	50000100 	.word	0x50000100
 80021d0:	48000800 	.word	0x48000800

080021d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b094      	sub	sp, #80	@ 0x50
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	2244      	movs	r2, #68	@ 0x44
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00c f87c 	bl	800e2e2 <memset>
  if(hrtc->Instance==RTC)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a15      	ldr	r2, [pc, #84]	@ (8002244 <HAL_RTC_MspInit+0x70>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d123      	bne.n	800223c <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80021f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fac3 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002210:	f7ff fed4 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_RTC_MspInit+0x74>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221a:	4a0b      	ldr	r2, [pc, #44]	@ (8002248 <HAL_RTC_MspInit+0x74>)
 800221c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002224:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <HAL_RTC_MspInit+0x74>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	4a07      	ldr	r2, [pc, #28]	@ (8002248 <HAL_RTC_MspInit+0x74>)
 800222a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_RTC_MspInit+0x74>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3750      	adds	r7, #80	@ 0x50
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40002800 	.word	0x40002800
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_TIM_Base_MspInit+0x38>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d10b      	bne.n	8002276 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <HAL_TIM_Base_MspInit+0x3c>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40000400 	.word	0x40000400
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_TIM_MspPostInit+0x64>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d11c      	bne.n	80022e8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b2:	4a10      	ldr	r2, [pc, #64]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <HAL_TIM_MspPostInit+0x68>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022c6:	2310      	movs	r3, #16
 80022c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022e4:	f001 fdc4 	bl	8003e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40021000 	.word	0x40021000

080022f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <NMI_Handler+0x4>

08002300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <HardFault_Handler+0x4>

08002308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <MemManage_Handler+0x4>

08002310 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <UsageFault_Handler+0x4>

08002320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234e:	f000 f961 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <USB_LP_IRQHandler+0x10>)
 800235e:	f002 f829 	bl	80043b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200046b8 	.word	0x200046b8

0800236c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return 1;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_kill>:

int _kill(int pid, int sig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002386:	f00c f843 	bl	800e410 <__errno>
 800238a:	4603      	mov	r3, r0
 800238c:	2216      	movs	r2, #22
 800238e:	601a      	str	r2, [r3, #0]
  return -1;
 8002390:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_exit>:

void _exit (int status)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe7 	bl	800237c <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <_exit+0x12>

080023b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e00a      	b.n	80023da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c4:	f3af 8000 	nop.w
 80023c8:	4601      	mov	r1, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbf0      	blt.n	80023c4 <_read+0x12>
  }

  return len;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e009      	b.n	8002412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf1      	blt.n	80023fe <_write+0x12>
  }
  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_close>:

int _close(int file)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800244c:	605a      	str	r2, [r3, #4]
  return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_isatty>:

int _isatty(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f00b ffa8 	bl	800e410 <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	@ (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	@ (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20008000 	.word	0x20008000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	200011c8 	.word	0x200011c8
 80024f4:	20004d00 	.word	0x20004d00

080024f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800251c:	480d      	ldr	r0, [pc, #52]	@ (8002554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800251e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002520:	f7ff ffea 	bl	80024f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002524:	480c      	ldr	r0, [pc, #48]	@ (8002558 <LoopForever+0x6>)
  ldr r1, =_edata
 8002526:	490d      	ldr	r1, [pc, #52]	@ (800255c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002528:	4a0d      	ldr	r2, [pc, #52]	@ (8002560 <LoopForever+0xe>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <LoopForever+0x16>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f00b ff67 	bl	800e41c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800254e:	f7fe fbf9 	bl	8000d44 <main>

08002552 <LoopForever>:

LoopForever:
    b LoopForever
 8002552:	e7fe      	b.n	8002552 <LoopForever>
  ldr   r0, =_estack
 8002554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002560:	08011300 	.word	0x08011300
  ldr r2, =_sbss
 8002564:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002568:	20004d00 	.word	0x20004d00

0800256c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC1_2_IRQHandler>

0800256e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f001 fc39 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800257e:	200f      	movs	r0, #15
 8002580:	f000 f80e 	bl	80025a0 <HAL_InitTick>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	e001      	b.n	8002594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002590:	f7ff fd1a 	bl	8001fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002594:	79fb      	ldrb	r3, [r7, #7]

}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80025ac:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_InitTick+0x68>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d022      	beq.n	80025fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80025b4:	4b15      	ldr	r3, [pc, #84]	@ (800260c <HAL_InitTick+0x6c>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_InitTick+0x68>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80025c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 fc44 	bl	8003e56 <HAL_SYSTICK_Config>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10f      	bne.n	80025f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	d809      	bhi.n	80025ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025da:	2200      	movs	r2, #0
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	f04f 30ff 	mov.w	r0, #4294967295
 80025e2:	f001 fc10 	bl	8003e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_InitTick+0x70>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e007      	b.n	80025fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e004      	b.n	80025fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
 80025f8:	e001      	b.n	80025fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000000c 	.word	0x2000000c
 800260c:	20000004 	.word	0x20000004
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_IncTick+0x1c>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_IncTick+0x20>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4413      	add	r3, r2
 8002622:	4a03      	ldr	r2, [pc, #12]	@ (8002630 <HAL_IncTick+0x1c>)
 8002624:	6013      	str	r3, [r2, #0]
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	200011cc 	.word	0x200011cc
 8002634:	2000000c 	.word	0x2000000c

08002638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_GetTick+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200011cc 	.word	0x200011cc

08002650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002658:	f7ff ffee 	bl	8002638 <HAL_GetTick>
 800265c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002668:	d004      	beq.n	8002674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <HAL_Delay+0x40>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4413      	add	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002674:	bf00      	nop
 8002676:	f7ff ffdf 	bl	8002638 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	429a      	cmp	r2, r3
 8002684:	d8f7      	bhi.n	8002676 <HAL_Delay+0x26>
  {
  }
}
 8002686:	bf00      	nop
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000000c 	.word	0x2000000c

08002694 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026a4:	4904      	ldr	r1, [pc, #16]	@ (80026b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40010030 	.word	0x40010030

080026bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0202 	bic.w	r2, r3, #2
 80026cc:	4904      	ldr	r1, [pc, #16]	@ (80026e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40010030 	.word	0x40010030

080026e4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80026ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002728 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002728 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026f6:	f7ff ff9f 	bl	8002638 <HAL_GetTick>
 80026fa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80026fc:	e008      	b.n	8002710 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80026fe:	f7ff ff9b 	bl	8002638 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b0a      	cmp	r3, #10
 800270a:	d901      	bls.n	8002710 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e006      	b.n	800271e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40010030 	.word	0x40010030

0800272c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	609a      	str	r2, [r3, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3360      	adds	r3, #96	@ 0x60
 80027a6:	461a      	mov	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <LL_ADC_SetOffset+0x44>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027cc:	bf00      	nop
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	03fff000 	.word	0x03fff000

080027dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3360      	adds	r3, #96	@ 0x60
 80027ea:	461a      	mov	r2, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3360      	adds	r3, #96	@ 0x60
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3360      	adds	r3, #96	@ 0x60
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3360      	adds	r3, #96	@ 0x60
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	615a      	str	r2, [r3, #20]
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b087      	sub	sp, #28
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3330      	adds	r3, #48	@ 0x30
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	211f      	movs	r1, #31
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 011f 	and.w	r1, r3, #31
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800294e:	b480      	push	{r7}
 8002950:	b087      	sub	sp, #28
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	3314      	adds	r3, #20
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	0e5b      	lsrs	r3, r3, #25
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	4413      	add	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	0d1b      	lsrs	r3, r3, #20
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2107      	movs	r1, #7
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	0d1b      	lsrs	r3, r3, #20
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	431a      	orrs	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029bc:	43db      	mvns	r3, r3
 80029be:	401a      	ands	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f003 0318 	and.w	r3, r3, #24
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029c8:	40d9      	lsrs	r1, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	400b      	ands	r3, r1
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	431a      	orrs	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	0007ffff 	.word	0x0007ffff

080029ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 031f 	and.w	r3, r3, #31
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a5c:	d101      	bne.n	8002a62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <LL_ADC_IsEnabled+0x18>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <LL_ADC_IsEnabled+0x1a>
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b1e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b22:	f043 0204 	orr.w	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d101      	bne.n	8002b74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	@ 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e167      	b.n	8002e6e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fa37 	bl	8002020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff3f 	bl	8002a48 <LL_ADC_IsDeepPowerDownEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff25 	bl	8002a24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff5a 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d115      	bne.n	8002c16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ff3e 	bl	8002a70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf4:	4ba0      	ldr	r3, [pc, #640]	@ (8002e78 <HAL_ADC_Init+0x2f4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	4aa0      	ldr	r2, [pc, #640]	@ (8002e7c <HAL_ADC_Init+0x2f8>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	3301      	adds	r3, #1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff3c 	bl	8002a98 <LL_ADC_IsInternalRegulatorEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff75 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8002c4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 8100 	bne.w	8002e5c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 80fc 	bne.w	8002e5c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d111      	bne.n	8002ca8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c84:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c88:	f7ff ff2e 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	487c      	ldr	r0, [pc, #496]	@ (8002e80 <HAL_ADC_Init+0x2fc>)
 8002c90:	f7ff ff2a 	bl	8002ae8 <LL_ADC_IsEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4323      	orrs	r3, r4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4878      	ldr	r0, [pc, #480]	@ (8002e84 <HAL_ADC_Init+0x300>)
 8002ca4:	f7ff fd42 	bl	800272c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7f5b      	ldrb	r3, [r3, #29]
 8002cac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cb2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002cb8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002cbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d106      	bne.n	8002ce4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	045b      	lsls	r3, r3, #17
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4b60      	ldr	r3, [pc, #384]	@ (8002e88 <HAL_ADC_Init+0x304>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	69b9      	ldr	r1, [r7, #24]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff14 	bl	8002b5c <LL_ADC_INJ_IsConversionOngoing>
 8002d34:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d16d      	bne.n	8002e18 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d16a      	bne.n	8002e18 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d46:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d4e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d5e:	f023 0302 	bic.w	r3, r3, #2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	69b9      	ldr	r1, [r7, #24]
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d017      	beq.n	8002da4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d8c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6911      	ldr	r1, [r2, #16]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002da2:	e013      	b.n	8002dcc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002db2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dc8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d118      	bne.n	8002e08 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	e007      	b.n	8002e18 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0201 	bic.w	r2, r2, #1
 8002e16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10c      	bne.n	8002e3a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	f023 010f 	bic.w	r1, r3, #15
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	1e5a      	subs	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e38:	e007      	b.n	8002e4a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 020f 	bic.w	r2, r2, #15
 8002e48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e5a:	e007      	b.n	8002e6c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	053e2d63 	.word	0x053e2d63
 8002e80:	50000100 	.word	0x50000100
 8002e84:	50000300 	.word	0x50000300
 8002e88:	fff04007 	.word	0xfff04007

08002e8c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e94:	4859      	ldr	r0, [pc, #356]	@ (8002ffc <HAL_ADC_Start+0x170>)
 8002e96:	f7ff fda9 	bl	80029ec <LL_ADC_GetMultimode>
 8002e9a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe48 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f040 809f 	bne.w	8002fec <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_Start+0x30>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e09a      	b.n	8002ff2 <HAL_ADC_Start+0x166>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fd73 	bl	80039b0 <ADC_Enable>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 8086 	bne.w	8002fe2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eda:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a44      	ldr	r2, [pc, #272]	@ (8003000 <HAL_ADC_Start+0x174>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d002      	beq.n	8002efa <HAL_ADC_Start+0x6e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	e001      	b.n	8002efe <HAL_ADC_Start+0x72>
 8002efa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d002      	beq.n	8002f0c <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d105      	bne.n	8002f18 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f2a:	f023 0206 	bic.w	r2, r3, #6
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f32:	e002      	b.n	8002f3a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	221c      	movs	r2, #28
 8002f40:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003000 <HAL_ADC_Start+0x174>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d002      	beq.n	8002f5a <HAL_ADC_Start+0xce>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	e001      	b.n	8002f5e <HAL_ADC_Start+0xd2>
 8002f5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d008      	beq.n	8002f78 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d002      	beq.n	8002f78 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	d114      	bne.n	8002fa2 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fdb7 	bl	8002b0e <LL_ADC_REG_StartConversion>
 8002fa0:	e026      	b.n	8002ff0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a13      	ldr	r2, [pc, #76]	@ (8003000 <HAL_ADC_Start+0x174>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d002      	beq.n	8002fbe <HAL_ADC_Start+0x132>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	e001      	b.n	8002fc2 <HAL_ADC_Start+0x136>
 8002fbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fc2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fd8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fe0:	e006      	b.n	8002ff0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002fea:	e001      	b.n	8002ff0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
 8002fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	50000300 	.word	0x50000300
 8003000:	50000100 	.word	0x50000100

08003004 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800300e:	4867      	ldr	r0, [pc, #412]	@ (80031ac <HAL_ADC_PollForConversion+0x1a8>)
 8003010:	f7ff fcec 	bl	80029ec <LL_ADC_GetMultimode>
 8003014:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d102      	bne.n	8003024 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800301e:	2308      	movs	r3, #8
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e02a      	b.n	800307a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b05      	cmp	r3, #5
 800302e:	d002      	beq.n	8003036 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b09      	cmp	r3, #9
 8003034:	d111      	bne.n	800305a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0a6      	b.n	80031a2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003054:	2304      	movs	r3, #4
 8003056:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003058:	e00f      	b.n	800307a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800305a:	4854      	ldr	r0, [pc, #336]	@ (80031ac <HAL_ADC_PollForConversion+0x1a8>)
 800305c:	f7ff fcd4 	bl	8002a08 <LL_ADC_GetMultiDMATransfer>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	f043 0220 	orr.w	r2, r3, #32
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e095      	b.n	80031a2 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003076:	2304      	movs	r3, #4
 8003078:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800307a:	f7ff fadd 	bl	8002638 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003080:	e021      	b.n	80030c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d01d      	beq.n	80030c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800308a:	f7ff fad5 	bl	8002638 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <HAL_ADC_PollForConversion+0x9c>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d112      	bne.n	80030c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f043 0204 	orr.w	r2, r3, #4
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e06d      	b.n	80031a2 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0d6      	beq.n	8003082 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fbf3 	bl	80028d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01c      	beq.n	800312a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7f5b      	ldrb	r3, [r3, #29]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d118      	bne.n	800312a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b08      	cmp	r3, #8
 8003104:	d111      	bne.n	800312a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a20      	ldr	r2, [pc, #128]	@ (80031b0 <HAL_ADC_PollForConversion+0x1ac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d002      	beq.n	800313a <HAL_ADC_PollForConversion+0x136>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	e001      	b.n	800313e <HAL_ADC_PollForConversion+0x13a>
 800313a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	4293      	cmp	r3, r2
 8003144:	d008      	beq.n	8003158 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b05      	cmp	r3, #5
 8003150:	d002      	beq.n	8003158 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d104      	bne.n	8003162 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e00d      	b.n	800317e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a12      	ldr	r2, [pc, #72]	@ (80031b0 <HAL_ADC_PollForConversion+0x1ac>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d002      	beq.n	8003172 <HAL_ADC_PollForConversion+0x16e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	e001      	b.n	8003176 <HAL_ADC_PollForConversion+0x172>
 8003172:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003176:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d104      	bne.n	800318e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e008      	b.n	80031a0 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	220c      	movs	r2, #12
 800319e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	50000300 	.word	0x50000300
 80031b0:	50000100 	.word	0x50000100

080031b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b0b6      	sub	sp, #216	@ 0xd8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x22>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e3c8      	b.n	8003984 <HAL_ADC_ConfigChannel+0x7b4>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fc99 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 83ad 	bne.w	8003966 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	f7ff fb6c 	bl	80028f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fc87 	bl	8002b36 <LL_ADC_REG_IsConversionOngoing>
 8003228:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fc93 	bl	8002b5c <LL_ADC_INJ_IsConversionOngoing>
 8003236:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800323a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 81d9 	bne.w	80035f6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 81d4 	bne.w	80035f6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003256:	d10f      	bne.n	8003278 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	4619      	mov	r1, r3
 8003264:	f7ff fb73 	bl	800294e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fb1a 	bl	80028aa <LL_ADC_SetSamplingTimeCommonConfig>
 8003276:	e00e      	b.n	8003296 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	461a      	mov	r2, r3
 8003286:	f7ff fb62 	bl	800294e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb0a 	bl	80028aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	08db      	lsrs	r3, r3, #3
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d022      	beq.n	80032fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6919      	ldr	r1, [r3, #16]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032c8:	f7ff fa64 	bl	8002794 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6919      	ldr	r1, [r3, #16]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	461a      	mov	r2, r3
 80032da:	f7ff fab0 	bl	800283e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x124>
 80032ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032f2:	e000      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x126>
 80032f4:	2300      	movs	r3, #0
 80032f6:	461a      	mov	r2, r3
 80032f8:	f7ff fabc 	bl	8002874 <LL_ADC_SetOffsetSaturation>
 80032fc:	e17b      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fa69 	bl	80027dc <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_ADC_ConfigChannel+0x15a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fa5e 	bl	80027dc <LL_ADC_GetOffsetChannel>
 8003320:	4603      	mov	r3, r0
 8003322:	0e9b      	lsrs	r3, r3, #26
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	e01e      	b.n	8003368 <HAL_ADC_ConfigChannel+0x198>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2100      	movs	r1, #0
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fa53 	bl	80027dc <LL_ADC_GetOffsetChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003348:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800334c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e004      	b.n	8003366 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800335c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003370:	2b00      	cmp	r3, #0
 8003372:	d105      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1b0>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0e9b      	lsrs	r3, r3, #26
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	e018      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1e2>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800339c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e004      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80033a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d106      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fa22 	bl	8002808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fa06 	bl	80027dc <LL_ADC_GetOffsetChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x220>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f9fb 	bl	80027dc <LL_ADC_GetOffsetChannel>
 80033e6:	4603      	mov	r3, r0
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	f003 021f 	and.w	r2, r3, #31
 80033ee:	e01e      	b.n	800342e <HAL_ADC_ConfigChannel+0x25e>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2101      	movs	r1, #1
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f9f0 	bl	80027dc <LL_ADC_GetOffsetChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800340e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003412:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003436:	2b00      	cmp	r3, #0
 8003438:	d105      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x276>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0e9b      	lsrs	r3, r3, #26
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	e018      	b.n	8003478 <HAL_ADC_ConfigChannel+0x2a8>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800345a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800345e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800346e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003478:	429a      	cmp	r2, r3
 800347a:	d106      	bne.n	800348a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2200      	movs	r2, #0
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff f9bf 	bl	8002808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f9a3 	bl	80027dc <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x2e6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2102      	movs	r1, #2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff f998 	bl	80027dc <LL_ADC_GetOffsetChannel>
 80034ac:	4603      	mov	r3, r0
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	e01e      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x324>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff f98d 	bl	80027dc <LL_ADC_GetOffsetChannel>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e004      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80034e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_ADC_ConfigChannel+0x33c>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	e016      	b.n	800353a <HAL_ADC_ConfigChannel+0x36a>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800351e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003520:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003524:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e004      	b.n	800353a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800353a:	429a      	cmp	r2, r3
 800353c:	d106      	bne.n	800354c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f95e 	bl	8002808 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2103      	movs	r1, #3
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f942 	bl	80027dc <LL_ADC_GetOffsetChannel>
 8003558:	4603      	mov	r3, r0
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x3a8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2103      	movs	r1, #3
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f937 	bl	80027dc <LL_ADC_GetOffsetChannel>
 800356e:	4603      	mov	r3, r0
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	f003 021f 	and.w	r2, r3, #31
 8003576:	e017      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x3d8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2103      	movs	r1, #3
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f92c 	bl	80027dc <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003590:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003592:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003594:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800359a:	2320      	movs	r3, #32
 800359c:	e003      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800359e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x3f0>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	e011      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x414>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80035dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d106      	bne.n	80035f6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2103      	movs	r1, #3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f909 	bl	8002808 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff fa74 	bl	8002ae8 <LL_ADC_IsEnabled>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 8140 	bne.w	8003888 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	461a      	mov	r2, r3
 8003616:	f7ff f9c5 	bl	80029a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a8f      	ldr	r2, [pc, #572]	@ (800385c <HAL_ADC_ConfigChannel+0x68c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	f040 8131 	bne.w	8003888 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <HAL_ADC_ConfigChannel+0x47e>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	0e9b      	lsrs	r3, r3, #26
 800363c:	3301      	adds	r3, #1
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2b09      	cmp	r3, #9
 8003644:	bf94      	ite	ls
 8003646:	2301      	movls	r3, #1
 8003648:	2300      	movhi	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	e019      	b.n	8003682 <HAL_ADC_ConfigChannel+0x4b2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800365c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800365e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800366a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2b09      	cmp	r3, #9
 800367a:	bf94      	ite	ls
 800367c:	2301      	movls	r3, #1
 800367e:	2300      	movhi	r3, #0
 8003680:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003682:	2b00      	cmp	r3, #0
 8003684:	d079      	beq.n	800377a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x4d2>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0e9b      	lsrs	r3, r3, #26
 8003698:	3301      	adds	r3, #1
 800369a:	069b      	lsls	r3, r3, #26
 800369c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036a0:	e015      	b.n	80036ce <HAL_ADC_ConfigChannel+0x4fe>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80036ba:	2320      	movs	r3, #32
 80036bc:	e003      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80036be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	3301      	adds	r3, #1
 80036c8:	069b      	lsls	r3, r3, #26
 80036ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x51e>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0e9b      	lsrs	r3, r3, #26
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	e017      	b.n	800371e <HAL_ADC_ConfigChannel+0x54e>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003706:	2320      	movs	r3, #32
 8003708:	e003      	b.n	8003712 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800370a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	2101      	movs	r1, #1
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	ea42 0103 	orr.w	r1, r2, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x574>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	0e9b      	lsrs	r3, r3, #26
 8003734:	3301      	adds	r3, #1
 8003736:	f003 021f 	and.w	r2, r3, #31
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	051b      	lsls	r3, r3, #20
 8003742:	e018      	b.n	8003776 <HAL_ADC_ConfigChannel+0x5a6>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f003 021f 	and.w	r2, r3, #31
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003776:	430b      	orrs	r3, r1
 8003778:	e081      	b.n	800387e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	2b00      	cmp	r3, #0
 8003784:	d107      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x5c6>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	3301      	adds	r3, #1
 800378e:	069b      	lsls	r3, r3, #26
 8003790:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003794:	e015      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x5f2>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80037a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80037a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e003      	b.n	80037ba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	069b      	lsls	r3, r3, #26
 80037be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x612>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0e9b      	lsrs	r3, r3, #26
 80037d4:	3301      	adds	r3, #1
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f303 	lsl.w	r3, r1, r3
 80037e0:	e017      	b.n	8003812 <HAL_ADC_ConfigChannel+0x642>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	61fb      	str	r3, [r7, #28]
  return result;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80037fa:	2320      	movs	r3, #32
 80037fc:	e003      	b.n	8003806 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	3301      	adds	r3, #1
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	ea42 0103 	orr.w	r1, r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10d      	bne.n	800383e <HAL_ADC_ConfigChannel+0x66e>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	0e9b      	lsrs	r3, r3, #26
 8003828:	3301      	adds	r3, #1
 800382a:	f003 021f 	and.w	r2, r3, #31
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	3b1e      	subs	r3, #30
 8003836:	051b      	lsls	r3, r3, #20
 8003838:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800383c:	e01e      	b.n	800387c <HAL_ADC_ConfigChannel+0x6ac>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	613b      	str	r3, [r7, #16]
  return result;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003856:	2320      	movs	r3, #32
 8003858:	e006      	b.n	8003868 <HAL_ADC_ConfigChannel+0x698>
 800385a:	bf00      	nop
 800385c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f003 021f 	and.w	r2, r3, #31
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	3b1e      	subs	r3, #30
 8003876:	051b      	lsls	r3, r3, #20
 8003878:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800387c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003882:	4619      	mov	r1, r3
 8003884:	f7ff f863 	bl	800294e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b3f      	ldr	r3, [pc, #252]	@ (800398c <HAL_ADC_ConfigChannel+0x7bc>)
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d071      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003894:	483e      	ldr	r0, [pc, #248]	@ (8003990 <HAL_ADC_ConfigChannel+0x7c0>)
 8003896:	f7fe ff6f 	bl	8002778 <LL_ADC_GetCommonPathInternalCh>
 800389a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003994 <HAL_ADC_ConfigChannel+0x7c4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_ADC_ConfigChannel+0x6e2>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003998 <HAL_ADC_ConfigChannel+0x7c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d127      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c6:	d157      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038d0:	4619      	mov	r1, r3
 80038d2:	482f      	ldr	r0, [pc, #188]	@ (8003990 <HAL_ADC_ConfigChannel+0x7c0>)
 80038d4:	f7fe ff3d 	bl	8002752 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <HAL_ADC_ConfigChannel+0x7cc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	4a30      	ldr	r2, [pc, #192]	@ (80039a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80038e0:	fba2 2303 	umull	r2, r3, r2, r3
 80038e4:	099b      	lsrs	r3, r3, #6
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	4613      	mov	r3, r2
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038f2:	e002      	b.n	80038fa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1f9      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003900:	e03a      	b.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a27      	ldr	r2, [pc, #156]	@ (80039a4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d113      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800390c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003910:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10d      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_ADC_ConfigChannel+0x7d8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02a      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003922:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800392a:	4619      	mov	r1, r3
 800392c:	4818      	ldr	r0, [pc, #96]	@ (8003990 <HAL_ADC_ConfigChannel+0x7c0>)
 800392e:	f7fe ff10 	bl	8002752 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003932:	e021      	b.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_ADC_ConfigChannel+0x7dc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11c      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800393e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a16      	ldr	r2, [pc, #88]	@ (80039a8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d011      	beq.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003954:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003958:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800395c:	4619      	mov	r1, r3
 800395e:	480c      	ldr	r0, [pc, #48]	@ (8003990 <HAL_ADC_ConfigChannel+0x7c0>)
 8003960:	f7fe fef7 	bl	8002752 <LL_ADC_SetCommonPathInternalCh>
 8003964:	e008      	b.n	8003978 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003980:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003984:	4618      	mov	r0, r3
 8003986:	37d8      	adds	r7, #216	@ 0xd8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	80080000 	.word	0x80080000
 8003990:	50000300 	.word	0x50000300
 8003994:	c3210000 	.word	0xc3210000
 8003998:	90c00010 	.word	0x90c00010
 800399c:	20000004 	.word	0x20000004
 80039a0:	053e2d63 	.word	0x053e2d63
 80039a4:	c7520000 	.word	0xc7520000
 80039a8:	50000100 	.word	0x50000100
 80039ac:	cb840000 	.word	0xcb840000

080039b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff f891 	bl	8002ae8 <LL_ADC_IsEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d169      	bne.n	8003aa0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b36      	ldr	r3, [pc, #216]	@ (8003aac <ADC_Enable+0xfc>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039de:	f043 0210 	orr.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e055      	b.n	8003aa2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f860 	bl	8002ac0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a00:	482b      	ldr	r0, [pc, #172]	@ (8003ab0 <ADC_Enable+0x100>)
 8003a02:	f7fe feb9 	bl	8002778 <LL_ADC_GetCommonPathInternalCh>
 8003a06:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a10:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <ADC_Enable+0x104>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	4a28      	ldr	r2, [pc, #160]	@ (8003ab8 <ADC_Enable+0x108>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a2a:	e002      	b.n	8003a32 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f9      	bne.n	8003a2c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a38:	f7fe fdfe 	bl	8002638 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a3e:	e028      	b.n	8003a92 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff f84f 	bl	8002ae8 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f833 	bl	8002ac0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a5a:	f7fe fded 	bl	8002638 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d914      	bls.n	8003a92 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d00d      	beq.n	8003a92 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a7a:	f043 0210 	orr.w	r2, r3, #16
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e007      	b.n	8003aa2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d1cf      	bne.n	8003a40 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	8000003f 	.word	0x8000003f
 8003ab0:	50000300 	.word	0x50000300
 8003ab4:	20000004 	.word	0x20000004
 8003ab8:	053e2d63 	.word	0x053e2d63

08003abc <LL_ADC_IsEnabled>:
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <LL_ADC_IsEnabled+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_ADC_IsEnabled+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d101      	bne.n	8003afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b0a1      	sub	sp, #132	@ 0x84
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e08b      	b.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b32:	2300      	movs	r3, #0
 8003b34:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b40:	4b41      	ldr	r3, [pc, #260]	@ (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	e001      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b46:	2300      	movs	r3, #0
 8003b48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e06a      	b.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ffb9 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff ffb3 	bl	8003ae2 <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d14c      	bne.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d149      	bne.n	8003c1c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b88:	4b30      	ldr	r3, [pc, #192]	@ (8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003b8a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d028      	beq.n	8003be6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6859      	ldr	r1, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ba6:	035b      	lsls	r3, r3, #13
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bb4:	f7ff ff82 	bl	8003abc <LL_ADC_IsEnabled>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	4823      	ldr	r0, [pc, #140]	@ (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bbc:	f7ff ff7e 	bl	8003abc <LL_ADC_IsEnabled>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4323      	orrs	r3, r4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d133      	bne.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bd0:	f023 030f 	bic.w	r3, r3, #15
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003be4:	e024      	b.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003be6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bf0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bf2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bf6:	f7ff ff61 	bl	8003abc <LL_ADC_IsEnabled>
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4812      	ldr	r0, [pc, #72]	@ (8003c48 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003bfe:	f7ff ff5d 	bl	8003abc <LL_ADC_IsEnabled>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4323      	orrs	r3, r4
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d112      	bne.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c12:	f023 030f 	bic.w	r3, r3, #15
 8003c16:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c18:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c1a:	e009      	b.n	8003c30 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c2e:	e000      	b.n	8003c32 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c30:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c3a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3784      	adds	r7, #132	@ 0x84
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	50000100 	.word	0x50000100
 8003c4c:	50000300 	.word	0x50000300

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	@ (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	@ (8003cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	db0b      	blt.n	8003cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4907      	ldr	r1, [pc, #28]	@ (8003cec <__NVIC_EnableIRQ+0x38>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	@ (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	@ (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	@ 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dbc:	d301      	bcc.n	8003dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00f      	b.n	8003de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dec <SysTick_Config+0x40>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dca:	210f      	movs	r1, #15
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7ff ff8e 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <SysTick_Config+0x40>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	@ (8003dec <SysTick_Config+0x40>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff29 	bl	8003c50 <__NVIC_SetPriorityGrouping>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e14:	f7ff ff40 	bl	8003c98 <__NVIC_GetPriorityGrouping>
 8003e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	6978      	ldr	r0, [r7, #20]
 8003e20:	f7ff ff90 	bl	8003d44 <NVIC_EncodePriority>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff5f 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e32:	bf00      	nop
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4603      	mov	r3, r0
 8003e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff ff33 	bl	8003cb4 <__NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ffa4 	bl	8003dac <SysTick_Config>
 8003e64:	4603      	mov	r3, r0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e7e:	e15a      	b.n	8004136 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 814c 	beq.w	8004130 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d005      	beq.n	8003eb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d130      	bne.n	8003f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	2203      	movs	r2, #3
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	f003 0201 	and.w	r2, r3, #1
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d017      	beq.n	8003f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d123      	bne.n	8003fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	08da      	lsrs	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3208      	adds	r2, #8
 8003f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	08da      	lsrs	r2, r3, #3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	6939      	ldr	r1, [r7, #16]
 8003f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	2203      	movs	r2, #3
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f003 0203 	and.w	r2, r3, #3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80a6 	beq.w	8004130 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe4:	4b5b      	ldr	r3, [pc, #364]	@ (8004154 <HAL_GPIO_Init+0x2e4>)
 8003fe6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe8:	4a5a      	ldr	r2, [pc, #360]	@ (8004154 <HAL_GPIO_Init+0x2e4>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff0:	4b58      	ldr	r3, [pc, #352]	@ (8004154 <HAL_GPIO_Init+0x2e4>)
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffc:	4a56      	ldr	r2, [pc, #344]	@ (8004158 <HAL_GPIO_Init+0x2e8>)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	3302      	adds	r3, #2
 8004004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	220f      	movs	r2, #15
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004026:	d01f      	beq.n	8004068 <HAL_GPIO_Init+0x1f8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a4c      	ldr	r2, [pc, #304]	@ (800415c <HAL_GPIO_Init+0x2ec>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d019      	beq.n	8004064 <HAL_GPIO_Init+0x1f4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a4b      	ldr	r2, [pc, #300]	@ (8004160 <HAL_GPIO_Init+0x2f0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d013      	beq.n	8004060 <HAL_GPIO_Init+0x1f0>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a4a      	ldr	r2, [pc, #296]	@ (8004164 <HAL_GPIO_Init+0x2f4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00d      	beq.n	800405c <HAL_GPIO_Init+0x1ec>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a49      	ldr	r2, [pc, #292]	@ (8004168 <HAL_GPIO_Init+0x2f8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <HAL_GPIO_Init+0x1e8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a48      	ldr	r2, [pc, #288]	@ (800416c <HAL_GPIO_Init+0x2fc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d101      	bne.n	8004054 <HAL_GPIO_Init+0x1e4>
 8004050:	2305      	movs	r3, #5
 8004052:	e00a      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 8004054:	2306      	movs	r3, #6
 8004056:	e008      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 8004058:	2304      	movs	r3, #4
 800405a:	e006      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 800405c:	2303      	movs	r3, #3
 800405e:	e004      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 8004060:	2302      	movs	r3, #2
 8004062:	e002      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <HAL_GPIO_Init+0x1fa>
 8004068:	2300      	movs	r3, #0
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	f002 0203 	and.w	r2, r2, #3
 8004070:	0092      	lsls	r2, r2, #2
 8004072:	4093      	lsls	r3, r2
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407a:	4937      	ldr	r1, [pc, #220]	@ (8004158 <HAL_GPIO_Init+0x2e8>)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	3302      	adds	r3, #2
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004088:	4b39      	ldr	r3, [pc, #228]	@ (8004170 <HAL_GPIO_Init+0x300>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040ac:	4a30      	ldr	r2, [pc, #192]	@ (8004170 <HAL_GPIO_Init+0x300>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <HAL_GPIO_Init+0x300>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040d6:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <HAL_GPIO_Init+0x300>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80040dc:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_GPIO_Init+0x300>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4013      	ands	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004100:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <HAL_GPIO_Init+0x300>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004106:	4b1a      	ldr	r3, [pc, #104]	@ (8004170 <HAL_GPIO_Init+0x300>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	43db      	mvns	r3, r3
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800412a:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_GPIO_Init+0x300>)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3301      	adds	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	f47f ae9d 	bne.w	8003e80 <HAL_GPIO_Init+0x10>
  }
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40021000 	.word	0x40021000
 8004158:	40010000 	.word	0x40010000
 800415c:	48000400 	.word	0x48000400
 8004160:	48000800 	.word	0x48000800
 8004164:	48000c00 	.word	0x48000c00
 8004168:	48001000 	.word	0x48001000
 800416c:	48001400 	.word	0x48001400
 8004170:	40010400 	.word	0x40010400

08004174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0c0      	b.n	8004368 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f008 f914 	bl	800c428 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2203      	movs	r2, #3
 8004204:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f003 fef4 	bl	8007ffa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
 8004216:	e03e      	b.n	8004296 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	440b      	add	r3, r1
 8004226:	3311      	adds	r3, #17
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	440b      	add	r3, r1
 800423a:	3310      	adds	r3, #16
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	440b      	add	r3, r1
 800424e:	3313      	adds	r3, #19
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	440b      	add	r3, r1
 8004262:	3320      	adds	r3, #32
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	440b      	add	r3, r1
 8004276:	3324      	adds	r3, #36	@ 0x24
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	440b      	add	r3, r1
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3301      	adds	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	7bfa      	ldrb	r2, [r7, #15]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3bb      	bcc.n	8004218 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
 80042a4:	e044      	b.n	8004330 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042a6:	7bfa      	ldrb	r2, [r7, #15]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	440b      	add	r3, r1
 80042b4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	440b      	add	r3, r1
 80042f6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	3301      	adds	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	791b      	ldrb	r3, [r3, #4]
 8004334:	7bfa      	ldrb	r2, [r7, #15]
 8004336:	429a      	cmp	r2, r3
 8004338:	d3b5      	bcc.n	80042a6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004346:	f003 fe73 	bl	8008030 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	7a9b      	ldrb	r3, [r3, #10]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d102      	bne.n	8004366 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 fc40 	bl	8005be6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_PCD_Start+0x16>
 8004382:	2302      	movs	r3, #2
 8004384:	e012      	b.n	80043ac <HAL_PCD_Start+0x3c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f003 fe1a 	bl	8007fcc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f006 f8da 	bl	800a556 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f006 f8df 	bl	800a584 <USB_ReadInterrupts>
 80043c6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fb04 	bl	80049e0 <PCD_EP_ISR_Handler>

    return;
 80043d8:	e110      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f6:	b292      	uxth	r2, r2
 80043f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f008 f8a4 	bl	800c54a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004402:	2100      	movs	r1, #0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8fc 	bl	8004602 <HAL_PCD_SetAddress>

    return;
 800440a:	e0f7      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004428:	b292      	uxth	r2, r2
 800442a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800442e:	e0e5      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800444c:	b292      	uxth	r2, r2
 800444e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004452:	e0d3      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d034      	beq.n	80044c8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004466:	b29a      	uxth	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	b292      	uxth	r2, r2
 8004472:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0208 	bic.w	r2, r2, #8
 8004488:	b292      	uxth	r2, r2
 800448a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044a0:	2100      	movs	r1, #0
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f008 fa44 	bl	800c930 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f008 f887 	bl	800c5bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044c0:	b292      	uxth	r2, r2
 80044c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044c6:	e099      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d027      	beq.n	8004522 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0208 	orr.w	r2, r2, #8
 80044e4:	b292      	uxth	r2, r2
 80044e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044fc:	b292      	uxth	r2, r2
 80044fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0204 	orr.w	r2, r2, #4
 8004514:	b292      	uxth	r2, r2
 8004516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f008 f834 	bl	800c588 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004520:	e06c      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	2b00      	cmp	r3, #0
 800452a:	d040      	beq.n	80045ae <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800453e:	b292      	uxth	r2, r2
 8004540:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d12b      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004556:	b29a      	uxth	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0204 	orr.w	r2, r2, #4
 8004560:	b292      	uxth	r2, r2
 8004562:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0208 	orr.w	r2, r2, #8
 8004578:	b292      	uxth	r2, r2
 800457a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800458e:	b29b      	uxth	r3, r3
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800459c:	2101      	movs	r1, #1
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f008 f9c6 	bl	800c930 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80045a4:	e02a      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f007 ffee 	bl	800c588 <HAL_PCD_SuspendCallback>
    return;
 80045ac:	e026      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00f      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80045ca:	b292      	uxth	r2, r2
 80045cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f007 ffac 	bl	800c52e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045d6:	e011      	b.n	80045fc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f4:	b292      	uxth	r2, r2
 80045f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80045fa:	bf00      	nop
  }
}
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
 800460a:	460b      	mov	r3, r1
 800460c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_PCD_SetAddress+0x1a>
 8004618:	2302      	movs	r3, #2
 800461a:	e012      	b.n	8004642 <HAL_PCD_SetAddress+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f005 ff7b 	bl	800a52e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	4608      	mov	r0, r1
 8004654:	4611      	mov	r1, r2
 8004656:	461a      	mov	r2, r3
 8004658:	4603      	mov	r3, r0
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	460b      	mov	r3, r1
 800465e:	803b      	strh	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da0e      	bge.n	800468e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	f003 0207 	and.w	r2, r3, #7
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	3310      	adds	r3, #16
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	705a      	strb	r2, [r3, #1]
 800468c:	e00e      	b.n	80046ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	f003 0207 	and.w	r2, r3, #7
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046b8:	883a      	ldrh	r2, [r7, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	78ba      	ldrb	r2, [r7, #2]
 80046c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046c4:	78bb      	ldrb	r3, [r7, #2]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d102      	bne.n	80046d0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_PCD_EP_Open+0x94>
 80046da:	2302      	movs	r3, #2
 80046dc:	e00e      	b.n	80046fc <HAL_PCD_EP_Open+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f003 fcbd 	bl	800806c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80046fa:	7afb      	ldrb	r3, [r7, #11]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	460b      	mov	r3, r1
 800470e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da0e      	bge.n	8004736 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	3310      	adds	r3, #16
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	705a      	strb	r2, [r3, #1]
 8004734:	e00e      	b.n	8004754 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 0207 	and.w	r2, r3, #7
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_PCD_EP_Close+0x6a>
 800476a:	2302      	movs	r3, #2
 800476c:	e00e      	b.n	800478c <HAL_PCD_EP_Close+0x88>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	4618      	mov	r0, r3
 800477e:	f004 f839 	bl	80087f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	460b      	mov	r3, r1
 80047a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047d4:	7afb      	ldrb	r3, [r7, #11]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6979      	ldr	r1, [r7, #20]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f004 f9f1 	bl	8008bce <USB_EPStartXfer>

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	f003 0207 	and.w	r2, r3, #7
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004818:	681b      	ldr	r3, [r3, #0]
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	607a      	str	r2, [r7, #4]
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	460b      	mov	r3, r1
 8004834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	f003 0207 	and.w	r2, r3, #7
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3310      	adds	r3, #16
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2200      	movs	r2, #0
 800486a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2201      	movs	r2, #1
 8004870:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004872:	7afb      	ldrb	r3, [r7, #11]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	b2da      	uxtb	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	4618      	mov	r0, r3
 8004886:	f004 f9a2 	bl	8008bce <USB_EPStartXfer>

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	7912      	ldrb	r2, [r2, #4]
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e03e      	b.n	8004930 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da0e      	bge.n	80048d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	f003 0207 	and.w	r2, r3, #7
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3310      	adds	r3, #16
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	705a      	strb	r2, [r3, #1]
 80048d6:	e00c      	b.n	80048f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4413      	add	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_PCD_EP_SetStall+0x7e>
 800490e:	2302      	movs	r3, #2
 8004910:	e00e      	b.n	8004930 <HAL_PCD_EP_SetStall+0x9c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f005 fd05 	bl	800a330 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	7912      	ldrb	r2, [r2, #4]
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e040      	b.n	80049d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004956:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	da0e      	bge.n	800497c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	f003 0207 	and.w	r2, r3, #7
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3310      	adds	r3, #16
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	705a      	strb	r2, [r3, #1]
 800497a:	e00e      	b.n	800499a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 0207 	and.w	r2, r3, #7
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_PCD_EP_ClrStall+0x82>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e00e      	b.n	80049d8 <HAL_PCD_EP_ClrStall+0xa0>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f005 fd02 	bl	800a3d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b096      	sub	sp, #88	@ 0x58
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80049e8:	e3ad      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049f2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80049f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8004a04:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 816f 	bne.w	8004cec <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d14c      	bne.n	8004ab4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	81fb      	strh	r3, [r7, #14]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3310      	adds	r3, #16
 8004a42:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	441a      	add	r2, r3
 8004a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a78:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f007 fd3c 	bl	800c4fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7b1b      	ldrb	r3, [r3, #12]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 835c 	beq.w	8005146 <PCD_EP_ISR_Handler+0x766>
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f040 8357 	bne.w	8005146 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7b1b      	ldrb	r3, [r3, #12]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	731a      	strb	r2, [r3, #12]
 8004ab2:	e348      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004aba:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004ac6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d032      	beq.n	8004b38 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	4413      	add	r3, r2
 8004aec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b0a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f005 fd8b 	bl	800a628 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b1e:	4013      	ands	r3, r2
 8004b20:	823b      	strh	r3, [r7, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	8a3a      	ldrh	r2, [r7, #16]
 8004b28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b2c:	b292      	uxth	r2, r2
 8004b2e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f007 fcb5 	bl	800c4a0 <HAL_PCD_SetupStageCallback>
 8004b36:	e306      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b38:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f280 8302 	bge.w	8005146 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004b4e:	4013      	ands	r3, r2
 8004b50:	83fb      	strh	r3, [r7, #30]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	8bfa      	ldrh	r2, [r7, #30]
 8004b58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6812      	ldr	r2, [r2, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b86:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d019      	beq.n	8004bc4 <PCD_EP_ISR_Handler+0x1e4>
 8004b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d015      	beq.n	8004bc4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9e:	6959      	ldr	r1, [r3, #20]
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f005 fd3d 	bl	800a628 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f007 fc80 	bl	800c4c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004bce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f040 82b5 	bne.w	8005146 <PCD_EP_ISR_Handler+0x766>
 8004bdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004be0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004be4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004be8:	f000 82ad 	beq.w	8005146 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	4413      	add	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	801a      	strh	r2, [r3, #0]
 8004c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c22:	d91d      	bls.n	8004c60 <PCD_EP_ISR_Handler+0x280>
 8004c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <PCD_EP_ISR_Handler+0x25e>
 8004c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	029b      	lsls	r3, r3, #10
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	e026      	b.n	8004cae <PCD_EP_ISR_Handler+0x2ce>
 8004c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <PCD_EP_ISR_Handler+0x29e>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e017      	b.n	8004cae <PCD_EP_ISR_Handler+0x2ce>
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <PCD_EP_ISR_Handler+0x2b8>
 8004c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c94:	3301      	adds	r3, #1
 8004c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	029b      	lsls	r3, r3, #10
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cbe:	827b      	strh	r3, [r7, #18]
 8004cc0:	8a7b      	ldrh	r3, [r7, #18]
 8004cc2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004cc6:	827b      	strh	r3, [r7, #18]
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004cce:	827b      	strh	r3, [r7, #18]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	8a7b      	ldrh	r3, [r7, #18]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]
 8004cea:	e22c      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f280 80f6 	bge.w	8004ef6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004d20:	4013      	ands	r3, r2
 8004d22:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004d38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d40:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d58:	7b1b      	ldrb	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d123      	bne.n	8004da6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	4413      	add	r3, r2
 8004d78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004d86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 808e 	beq.w	8004eac <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d96:	6959      	ldr	r1, [r3, #20]
 8004d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9a:	88da      	ldrh	r2, [r3, #6]
 8004d9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004da0:	f005 fc42 	bl	800a628 <USB_ReadPMA>
 8004da4:	e082      	b.n	8004eac <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d10a      	bne.n	8004dc4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004db2:	461a      	mov	r2, r3
 8004db4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9d3 	bl	8005162 <HAL_PCD_EP_DB_Receive>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004dc2:	e073      	b.n	8004eac <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dde:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	4413      	add	r3, r2
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d022      	beq.n	8004e68 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004e4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02c      	beq.n	8004eac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e58:	6959      	ldr	r1, [r3, #20]
 8004e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e5c:	891a      	ldrh	r2, [r3, #8]
 8004e5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e62:	f005 fbe1 	bl	800a628 <USB_ReadPMA>
 8004e66:	e021      	b.n	8004eac <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004e90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9e:	6959      	ldr	r1, [r3, #20]
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea2:	895a      	ldrh	r2, [r3, #10]
 8004ea4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ea8:	f005 fbbe 	bl	800a628 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004eb4:	441a      	add	r2, r3
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ec2:	441a      	add	r2, r3
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <PCD_EP_ISR_Handler+0x4fc>
 8004ed0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d206      	bcs.n	8004eea <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f007 faee 	bl	800c4c4 <HAL_PCD_DataOutStageCallback>
 8004ee8:	e005      	b.n	8004ef6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f003 fe6c 	bl	8008bce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ef6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8121 	beq.w	8005146 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f04:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	3310      	adds	r3, #16
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	441a      	add	r2, r3
 8004f44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f56:	78db      	ldrb	r3, [r3, #3]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 80a2 	bne.w	80050a2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	2200      	movs	r2, #0
 8004f62:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8093 	beq.w	8005094 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d046      	beq.n	8005008 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d126      	bne.n	8004fd0 <PCD_EP_ISR_Handler+0x5f0>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	4413      	add	r3, r2
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	00da      	lsls	r2, r3, #3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fa8:	623b      	str	r3, [r7, #32]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e061      	b.n	8005094 <PCD_EP_ISR_Handler+0x6b4>
 8004fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d15d      	bne.n	8005094 <PCD_EP_ISR_Handler+0x6b4>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fec:	4413      	add	r3, r2
 8004fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	00da      	lsls	r2, r3, #3
 8004ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	2200      	movs	r2, #0
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e045      	b.n	8005094 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800500e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d126      	bne.n	8005064 <PCD_EP_ISR_Handler+0x684>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	4413      	add	r3, r2
 800502c:	637b      	str	r3, [r7, #52]	@ 0x34
 800502e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	00da      	lsls	r2, r3, #3
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	4413      	add	r3, r2
 8005038:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800503c:	633b      	str	r3, [r7, #48]	@ 0x30
 800503e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005048:	b29a      	uxth	r2, r3
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	801a      	strh	r2, [r3, #0]
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505c:	b29a      	uxth	r2, r3
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e017      	b.n	8005094 <PCD_EP_ISR_Handler+0x6b4>
 8005064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d113      	bne.n	8005094 <PCD_EP_ISR_Handler+0x6b4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507a:	4413      	add	r3, r2
 800507c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	00da      	lsls	r2, r3, #3
 8005084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005086:	4413      	add	r3, r2
 8005088:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800508c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005090:	2200      	movs	r2, #0
 8005092:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f007 fa2d 	bl	800c4fa <HAL_PCD_DataInStageCallback>
 80050a0:	e051      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80050a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d144      	bne.n	8005138 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80050de:	429a      	cmp	r2, r3
 80050e0:	d907      	bls.n	80050f2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80050e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80050ea:	1ad2      	subs	r2, r2, r3
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	619a      	str	r2, [r3, #24]
 80050f0:	e002      	b.n	80050f8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80050f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f007 f9f7 	bl	800c4fa <HAL_PCD_DataInStageCallback>
 800510c:	e01b      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005116:	441a      	add	r2, r3
 8005118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800511c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005124:	441a      	add	r2, r3
 8005126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005128:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005130:	4618      	mov	r0, r3
 8005132:	f003 fd4c 	bl	8008bce <USB_EPStartXfer>
 8005136:	e006      	b.n	8005146 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005138:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800513c:	461a      	mov	r2, r3
 800513e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f917 	bl	8005374 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800514e:	b29b      	uxth	r3, r3
 8005150:	b21b      	sxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	f6ff ac49 	blt.w	80049ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3758      	adds	r7, #88	@ 0x58
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b088      	sub	sp, #32
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	4613      	mov	r3, r2
 800516e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d07c      	beq.n	8005274 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	4413      	add	r3, r2
 8005194:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	8b7b      	ldrh	r3, [r7, #26]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d306      	bcc.n	80051b8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	1ad2      	subs	r2, r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	619a      	str	r2, [r3, #24]
 80051b6:	e002      	b.n	80051be <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d123      	bne.n	800520e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e0:	833b      	strh	r3, [r7, #24]
 80051e2:	8b3b      	ldrh	r3, [r7, #24]
 80051e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051e8:	833b      	strh	r3, [r7, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	8b3b      	ldrh	r3, [r7, #24]
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01f      	beq.n	8005258 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800522e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005232:	82fb      	strh	r3, [r7, #22]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	8afb      	ldrh	r3, [r7, #22]
 8005244:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005248:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800524c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005250:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005254:	b29b      	uxth	r3, r3
 8005256:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005258:	8b7b      	ldrh	r3, [r7, #26]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8085 	beq.w	800536a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	6959      	ldr	r1, [r3, #20]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	891a      	ldrh	r2, [r3, #8]
 800526c:	8b7b      	ldrh	r3, [r7, #26]
 800526e:	f005 f9db 	bl	800a628 <USB_ReadPMA>
 8005272:	e07a      	b.n	800536a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	4413      	add	r3, r2
 800528e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005298:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	8b7b      	ldrh	r3, [r7, #26]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d306      	bcc.n	80052b2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	699a      	ldr	r2, [r3, #24]
 80052a8:	8b7b      	ldrh	r3, [r7, #26]
 80052aa:	1ad2      	subs	r2, r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	619a      	str	r2, [r3, #24]
 80052b0:	e002      	b.n	80052b8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d123      	bne.n	8005308 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052da:	83fb      	strh	r3, [r7, #30]
 80052dc:	8bfb      	ldrh	r3, [r7, #30]
 80052de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80052e2:	83fb      	strh	r3, [r7, #30]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	441a      	add	r2, r3
 80052f2:	8bfb      	ldrh	r3, [r7, #30]
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d11f      	bne.n	8005352 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532c:	83bb      	strh	r3, [r7, #28]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8bbb      	ldrh	r3, [r7, #28]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005352:	8b7b      	ldrh	r3, [r7, #26]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6959      	ldr	r1, [r3, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	895a      	ldrh	r2, [r3, #10]
 8005364:	8b7b      	ldrh	r3, [r7, #26]
 8005366:	f005 f95f 	bl	800a628 <USB_ReadPMA>
    }
  }

  return count;
 800536a:	8b7b      	ldrh	r3, [r7, #26]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b0a4      	sub	sp, #144	@ 0x90
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 81db 	beq.w	8005744 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	4413      	add	r3, r2
 80053a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053be:	429a      	cmp	r2, r3
 80053c0:	d907      	bls.n	80053d2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	619a      	str	r2, [r3, #24]
 80053d0:	e002      	b.n	80053d8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2200      	movs	r2, #0
 80053d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 80b9 	bne.w	8005554 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d126      	bne.n	8005438 <HAL_PCD_EP_DB_Transmit+0xc4>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	461a      	mov	r2, r3
 80053fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053fe:	4413      	add	r3, r2
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	00da      	lsls	r2, r3, #3
 8005408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540a:	4413      	add	r3, r2
 800540c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541c:	b29a      	uxth	r2, r3
 800541e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005430:	b29a      	uxth	r2, r3
 8005432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e01a      	b.n	800546e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d116      	bne.n	800546e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	637b      	str	r3, [r7, #52]	@ 0x34
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800544e:	b29b      	uxth	r3, r3
 8005450:	461a      	mov	r2, r3
 8005452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005454:	4413      	add	r3, r2
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	00da      	lsls	r2, r3, #3
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	4413      	add	r3, r2
 8005462:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005466:	633b      	str	r3, [r7, #48]	@ 0x30
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	2200      	movs	r2, #0
 800546c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	627b      	str	r3, [r7, #36]	@ 0x24
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d126      	bne.n	80054ca <HAL_PCD_EP_DB_Transmit+0x156>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00da      	lsls	r2, r3, #3
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	e017      	b.n	80054fa <HAL_PCD_EP_DB_Transmit+0x186>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	785b      	ldrb	r3, [r3, #1]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d113      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0x186>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054da:	b29b      	uxth	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	4413      	add	r3, r2
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	00da      	lsls	r2, r3, #3
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054f2:	623b      	str	r3, [r7, #32]
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	2200      	movs	r2, #0
 80054f8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	4619      	mov	r1, r3
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f006 fffa 	bl	800c4fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 82fa 	beq.w	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552c:	82fb      	strh	r3, [r7, #22]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8afb      	ldrh	r3, [r7, #22]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005546:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800554a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]
 8005552:	e2d8      	b.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d021      	beq.n	80055a2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005578:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005596:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800559a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	f040 82ac 	bne.w	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055b6:	441a      	add	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	69da      	ldr	r2, [r3, #28]
 80055c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055c4:	441a      	add	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d30b      	bcc.n	80055ee <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6a1a      	ldr	r2, [r3, #32]
 80055e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	621a      	str	r2, [r3, #32]
 80055ec:	e017      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80055f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80055fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005606:	e00a      	b.n	800561e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2200      	movs	r2, #0
 800561c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d165      	bne.n	80056f2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563a:	4413      	add	r3, r2
 800563c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	00da      	lsls	r2, r3, #3
 8005644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005646:	4413      	add	r3, r2
 8005648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800564c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005658:	b29a      	uxth	r2, r3
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005662:	2b3e      	cmp	r3, #62	@ 0x3e
 8005664:	d91d      	bls.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005666:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800566e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <HAL_PCD_EP_DB_Transmit+0x30c>
 800567a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567c:	3b01      	subs	r3, #1
 800567e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29a      	uxth	r2, r3
 8005686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005688:	b29b      	uxth	r3, r3
 800568a:	029b      	lsls	r3, r3, #10
 800568c:	b29b      	uxth	r3, r3
 800568e:	4313      	orrs	r3, r2
 8005690:	b29b      	uxth	r3, r3
 8005692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569a:	b29a      	uxth	r2, r3
 800569c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e044      	b.n	800572c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80056a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_PCD_EP_DB_Transmit+0x34c>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056bc:	801a      	strh	r2, [r3, #0]
 80056be:	e035      	b.n	800572c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80056c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_PCD_EP_DB_Transmit+0x366>
 80056d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d6:	3301      	adds	r3, #1
 80056d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	029b      	lsls	r3, r3, #10
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e01c      	b.n	800572c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d118      	bne.n	800572c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800570e:	4413      	add	r3, r2
 8005710:	647b      	str	r3, [r7, #68]	@ 0x44
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	00da      	lsls	r2, r3, #3
 8005718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571a:	4413      	add	r3, r2
 800571c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005720:	643b      	str	r3, [r7, #64]	@ 0x40
 8005722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005726:	b29a      	uxth	r2, r3
 8005728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6959      	ldr	r1, [r3, #20]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	891a      	ldrh	r2, [r3, #8]
 8005738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800573c:	b29b      	uxth	r3, r3
 800573e:	f004 ff31 	bl	800a5a4 <USB_WritePMA>
 8005742:	e1e0      	b.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800574c:	b29b      	uxth	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	4413      	add	r3, r2
 800575e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005768:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005774:	429a      	cmp	r2, r3
 8005776:	d307      	bcc.n	8005788 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005780:	1ad2      	subs	r2, r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	e002      	b.n	800578e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	f040 80c0 	bne.w	8005918 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d126      	bne.n	80057ee <HAL_PCD_EP_DB_Transmit+0x47a>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057b4:	4413      	add	r3, r2
 80057b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00da      	lsls	r2, r3, #3
 80057be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e01a      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	785b      	ldrb	r3, [r3, #1]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d116      	bne.n	8005824 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580a:	4413      	add	r3, r2
 800580c:	667b      	str	r3, [r7, #100]	@ 0x64
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	00da      	lsls	r2, r3, #3
 8005814:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005816:	4413      	add	r3, r2
 8005818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005820:	2200      	movs	r2, #0
 8005822:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	677b      	str	r3, [r7, #116]	@ 0x74
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	785b      	ldrb	r3, [r3, #1]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d12b      	bne.n	800588a <HAL_PCD_EP_DB_Transmit+0x516>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005846:	4413      	add	r3, r2
 8005848:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	00da      	lsls	r2, r3, #3
 8005850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005852:	4413      	add	r3, r2
 8005854:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005858:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800585c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	b29b      	uxth	r3, r3
 8005864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005868:	b29a      	uxth	r2, r3
 800586a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005880:	b29a      	uxth	r2, r3
 8005882:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e017      	b.n	80058ba <HAL_PCD_EP_DB_Transmit+0x546>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d113      	bne.n	80058ba <HAL_PCD_EP_DB_Transmit+0x546>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800589a:	b29b      	uxth	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a0:	4413      	add	r3, r2
 80058a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	00da      	lsls	r2, r3, #3
 80058aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ac:	4413      	add	r3, r2
 80058ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80058b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058b6:	2200      	movs	r2, #0
 80058b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	4619      	mov	r1, r3
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f006 fe1a 	bl	800c4fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058c6:	88fb      	ldrh	r3, [r7, #6]
 80058c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 811a 	bne.w	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ec:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800590a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800590e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]
 8005916:	e0f6      	b.n	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d121      	bne.n	8005966 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	441a      	add	r2, r3
 800594e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800595a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800595e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005962:	b29b      	uxth	r3, r3
 8005964:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800596c:	2b01      	cmp	r3, #1
 800596e:	f040 80ca 	bne.w	8005b06 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800597a:	441a      	add	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005988:	441a      	add	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d30b      	bcc.n	80059b2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6a1a      	ldr	r2, [r3, #32]
 80059a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	621a      	str	r2, [r3, #32]
 80059b0:	e017      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80059ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80059be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80059ca:	e00a      	b.n	80059e2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2200      	movs	r2, #0
 80059d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d165      	bne.n	8005abc <HAL_PCD_EP_DB_Transmit+0x748>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a04:	4413      	add	r3, r2
 8005a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00da      	lsls	r2, r3, #3
 8005a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a2e:	d91d      	bls.n	8005a6c <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a34:	095b      	lsrs	r3, r3, #5
 8005a36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005a44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a46:	3b01      	subs	r3, #1
 8005a48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e041      	b.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10a      	bne.n	8005a8a <HAL_PCD_EP_DB_Transmit+0x716>
 8005a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e032      	b.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_PCD_EP_DB_Transmit+0x730>
 8005a9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ab8:	801a      	strh	r2, [r3, #0]
 8005aba:	e019      	b.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	785b      	ldrb	r3, [r3, #1]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d115      	bne.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad2:	4413      	add	r3, r2
 8005ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	00da      	lsls	r2, r3, #3
 8005adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ade:	4413      	add	r3, r2
 8005ae0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	6959      	ldr	r1, [r3, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	895a      	ldrh	r2, [r3, #10]
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f004 fd4f 	bl	800a5a4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b20:	82bb      	strh	r3, [r7, #20]
 8005b22:	8abb      	ldrh	r3, [r7, #20]
 8005b24:	f083 0310 	eor.w	r3, r3, #16
 8005b28:	82bb      	strh	r3, [r7, #20]
 8005b2a:	8abb      	ldrh	r3, [r7, #20]
 8005b2c:	f083 0320 	eor.w	r3, r3, #32
 8005b30:	82bb      	strh	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	441a      	add	r2, r3
 8005b40:	8abb      	ldrh	r3, [r7, #20]
 8005b42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3790      	adds	r7, #144	@ 0x90
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	607b      	str	r3, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b7e:	897b      	ldrh	r3, [r7, #10]
 8005b80:	f003 0207 	and.w	r2, r3, #7
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	3310      	adds	r3, #16
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e009      	b.n	8005baa <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b96:	897a      	ldrh	r2, [r7, #10]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005baa:	893b      	ldrh	r3, [r7, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	80da      	strh	r2, [r3, #6]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f043 0302 	orr.w	r3, r3, #2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d141      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c56:	d131      	bne.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c58:	4b47      	ldr	r3, [pc, #284]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c5e:	4a46      	ldr	r2, [pc, #280]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c68:	4b43      	ldr	r3, [pc, #268]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c70:	4a41      	ldr	r2, [pc, #260]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c78:	4b40      	ldr	r3, [pc, #256]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2232      	movs	r2, #50	@ 0x32
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a3f      	ldr	r2, [pc, #252]	@ (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	0c9b      	lsrs	r3, r3, #18
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8e:	e002      	b.n	8005c96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c96:	4b38      	ldr	r3, [pc, #224]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca2:	d102      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f2      	bne.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005caa:	4b33      	ldr	r3, [pc, #204]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb6:	d158      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e057      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ccc:	e04d      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cd4:	d141      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd6:	4b28      	ldr	r3, [pc, #160]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce2:	d131      	bne.n	8005d48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce4:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cea:	4a23      	ldr	r2, [pc, #140]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2232      	movs	r2, #50	@ 0x32
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	0c9b      	lsrs	r3, r3, #18
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1a:	e002      	b.n	8005d22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d22:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2e:	d102      	bne.n	8005d36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f2      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d36:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d42:	d112      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e011      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d48:	4b0b      	ldr	r3, [pc, #44]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d58:	e007      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d5a:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d62:	4a05      	ldr	r2, [pc, #20]	@ (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40007000 	.word	0x40007000
 8005d7c:	20000004 	.word	0x20000004
 8005d80:	431bde83 	.word	0x431bde83

08005d84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005d88:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d92:	6093      	str	r3, [r2, #8]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40007000 	.word	0x40007000

08005da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e2fe      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d075      	beq.n	8005eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc2:	4b97      	ldr	r3, [pc, #604]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
 8005dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dcc:	4b94      	ldr	r3, [pc, #592]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_OscConfig+0x3e>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d002      	beq.n	8005de8 <HAL_RCC_OscConfig+0x44>
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d10b      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de8:	4b8d      	ldr	r3, [pc, #564]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05b      	beq.n	8005eac <HAL_RCC_OscConfig+0x108>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d157      	bne.n	8005eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e2d9      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e08:	d106      	bne.n	8005e18 <HAL_RCC_OscConfig+0x74>
 8005e0a:	4b85      	ldr	r3, [pc, #532]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a84      	ldr	r2, [pc, #528]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e01d      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e20:	d10c      	bne.n	8005e3c <HAL_RCC_OscConfig+0x98>
 8005e22:	4b7f      	ldr	r3, [pc, #508]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a7e      	ldr	r2, [pc, #504]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	4b7c      	ldr	r3, [pc, #496]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7b      	ldr	r2, [pc, #492]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	e00b      	b.n	8005e54 <HAL_RCC_OscConfig+0xb0>
 8005e3c:	4b78      	ldr	r3, [pc, #480]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a77      	ldr	r2, [pc, #476]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	4b75      	ldr	r3, [pc, #468]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a74      	ldr	r2, [pc, #464]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d013      	beq.n	8005e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fc fbec 	bl	8002638 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fc fbe8 	bl	8002638 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e29e      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e76:	4b6a      	ldr	r3, [pc, #424]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCC_OscConfig+0xc0>
 8005e82:	e014      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc fbd8 	bl	8002638 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fc fbd4 	bl	8002638 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e28a      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e9e:	4b60      	ldr	r3, [pc, #384]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0xe8>
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d075      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b59      	ldr	r3, [pc, #356]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec4:	4b56      	ldr	r3, [pc, #344]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b0c      	cmp	r3, #12
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_OscConfig+0x136>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d002      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x13c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d11f      	bne.n	8005f20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x154>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e25d      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef8:	4b49      	ldr	r3, [pc, #292]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	061b      	lsls	r3, r3, #24
 8005f06:	4946      	ldr	r1, [pc, #280]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f0c:	4b45      	ldr	r3, [pc, #276]	@ (8006024 <HAL_RCC_OscConfig+0x280>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fc fb45 	bl	80025a0 <HAL_InitTick>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d043      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e249      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d023      	beq.n	8005f70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f28:	4b3d      	ldr	r3, [pc, #244]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fc fb80 	bl	8002638 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f3c:	f7fc fb7c 	bl	8002638 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e232      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f4e:	4b34      	ldr	r3, [pc, #208]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f5a:	4b31      	ldr	r3, [pc, #196]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	061b      	lsls	r3, r3, #24
 8005f68:	492d      	ldr	r1, [pc, #180]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	604b      	str	r3, [r1, #4]
 8005f6e:	e01a      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f70:	4b2b      	ldr	r3, [pc, #172]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a2a      	ldr	r2, [pc, #168]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7c:	f7fc fb5c 	bl	8002638 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f84:	f7fc fb58 	bl	8002638 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e20e      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f96:	4b22      	ldr	r3, [pc, #136]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x1e0>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d041      	beq.n	8006036 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d01c      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fba:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fc2:	f043 0301 	orr.w	r3, r3, #1
 8005fc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fc fb35 	bl	8002638 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fd2:	f7fc fb31 	bl	8002638 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e1e7      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ef      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x22e>
 8005ff2:	e020      	b.n	8006036 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ffa:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006004:	f7fc fb18 	bl	8002638 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800600a:	e00d      	b.n	8006028 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800600c:	f7fc fb14 	bl	8002638 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d906      	bls.n	8006028 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e1ca      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006028:	4b8c      	ldr	r3, [pc, #560]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800602a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ea      	bne.n	800600c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80a6 	beq.w	8006190 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006044:	2300      	movs	r3, #0
 8006046:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006048:	4b84      	ldr	r3, [pc, #528]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800604a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_RCC_OscConfig+0x2b4>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x2b6>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800605e:	4b7f      	ldr	r3, [pc, #508]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006062:	4a7e      	ldr	r2, [pc, #504]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006068:	6593      	str	r3, [r2, #88]	@ 0x58
 800606a:	4b7c      	ldr	r3, [pc, #496]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800606e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006076:	2301      	movs	r3, #1
 8006078:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607a:	4b79      	ldr	r3, [pc, #484]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d118      	bne.n	80060b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006086:	4b76      	ldr	r3, [pc, #472]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a75      	ldr	r2, [pc, #468]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 800608c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006092:	f7fc fad1 	bl	8002638 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609a:	f7fc facd 	bl	8002638 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e183      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ac:	4b6c      	ldr	r3, [pc, #432]	@ (8006260 <HAL_RCC_OscConfig+0x4bc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d108      	bne.n	80060d2 <HAL_RCC_OscConfig+0x32e>
 80060c0:	4b66      	ldr	r3, [pc, #408]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c6:	4a65      	ldr	r2, [pc, #404]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060d0:	e024      	b.n	800611c <HAL_RCC_OscConfig+0x378>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d110      	bne.n	80060fc <HAL_RCC_OscConfig+0x358>
 80060da:	4b60      	ldr	r3, [pc, #384]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e0:	4a5e      	ldr	r2, [pc, #376]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060ea:	4b5c      	ldr	r3, [pc, #368]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f0:	4a5a      	ldr	r2, [pc, #360]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060f2:	f043 0301 	orr.w	r3, r3, #1
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060fa:	e00f      	b.n	800611c <HAL_RCC_OscConfig+0x378>
 80060fc:	4b57      	ldr	r3, [pc, #348]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006102:	4a56      	ldr	r2, [pc, #344]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800610c:	4b53      	ldr	r3, [pc, #332]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800610e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006112:	4a52      	ldr	r2, [pc, #328]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006114:	f023 0304 	bic.w	r3, r3, #4
 8006118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d016      	beq.n	8006152 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006124:	f7fc fa88 	bl	8002638 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800612a:	e00a      	b.n	8006142 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fc fa84 	bl	8002638 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e138      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006142:	4b46      	ldr	r3, [pc, #280]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0ed      	beq.n	800612c <HAL_RCC_OscConfig+0x388>
 8006150:	e015      	b.n	800617e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006152:	f7fc fa71 	bl	8002638 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006158:	e00a      	b.n	8006170 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fc fa6d 	bl	8002638 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006168:	4293      	cmp	r3, r2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e121      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006170:	4b3a      	ldr	r3, [pc, #232]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1ed      	bne.n	800615a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800617e:	7ffb      	ldrb	r3, [r7, #31]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006184:	4b35      	ldr	r3, [pc, #212]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006188:	4a34      	ldr	r2, [pc, #208]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800618a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800618e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0320 	and.w	r3, r3, #32
 8006198:	2b00      	cmp	r3, #0
 800619a:	d03c      	beq.n	8006216 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01c      	beq.n	80061de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a4:	4b2d      	ldr	r3, [pc, #180]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061aa:	4a2c      	ldr	r2, [pc, #176]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fc fa40 	bl	8002638 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061bc:	f7fc fa3c 	bl	8002638 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0f2      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061ce:	4b23      	ldr	r3, [pc, #140]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0ef      	beq.n	80061bc <HAL_RCC_OscConfig+0x418>
 80061dc:	e01b      	b.n	8006216 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061de:	4b1f      	ldr	r3, [pc, #124]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fc fa23 	bl	8002638 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f6:	f7fc fa1f 	bl	8002638 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e0d5      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006208:	4b14      	ldr	r3, [pc, #80]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800620a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ef      	bne.n	80061f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80c9 	beq.w	80063b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006220:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b0c      	cmp	r3, #12
 800622a:	f000 8083 	beq.w	8006334 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d15e      	bne.n	80062f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006236:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a08      	ldr	r2, [pc, #32]	@ (800625c <HAL_RCC_OscConfig+0x4b8>)
 800623c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006242:	f7fc f9f9 	bl	8002638 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006248:	e00c      	b.n	8006264 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624a:	f7fc f9f5 	bl	8002638 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d905      	bls.n	8006264 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e0ab      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
 800625c:	40021000 	.word	0x40021000
 8006260:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006264:	4b55      	ldr	r3, [pc, #340]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d1ec      	bne.n	800624a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006270:	4b52      	ldr	r3, [pc, #328]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	4b52      	ldr	r3, [pc, #328]	@ (80063c0 <HAL_RCC_OscConfig+0x61c>)
 8006276:	4013      	ands	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6a11      	ldr	r1, [r2, #32]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006280:	3a01      	subs	r2, #1
 8006282:	0112      	lsls	r2, r2, #4
 8006284:	4311      	orrs	r1, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800628a:	0212      	lsls	r2, r2, #8
 800628c:	4311      	orrs	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006292:	0852      	lsrs	r2, r2, #1
 8006294:	3a01      	subs	r2, #1
 8006296:	0552      	lsls	r2, r2, #21
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800629e:	0852      	lsrs	r2, r2, #1
 80062a0:	3a01      	subs	r2, #1
 80062a2:	0652      	lsls	r2, r2, #25
 80062a4:	4311      	orrs	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80062aa:	06d2      	lsls	r2, r2, #27
 80062ac:	430a      	orrs	r2, r1
 80062ae:	4943      	ldr	r1, [pc, #268]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062b4:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a40      	ldr	r2, [pc, #256]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062c0:	4b3e      	ldr	r3, [pc, #248]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a3d      	ldr	r2, [pc, #244]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fc f9b4 	bl	8002638 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fc f9b0 	bl	8002638 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e066      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e6:	4b35      	ldr	r3, [pc, #212]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0f0      	beq.n	80062d4 <HAL_RCC_OscConfig+0x530>
 80062f2:	e05e      	b.n	80063b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f4:	4b31      	ldr	r3, [pc, #196]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a30      	ldr	r2, [pc, #192]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 80062fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006300:	f7fc f99a 	bl	8002638 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006308:	f7fc f996 	bl	8002638 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e04c      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631a:	4b28      	ldr	r3, [pc, #160]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006326:	4b25      	ldr	r3, [pc, #148]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	4924      	ldr	r1, [pc, #144]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 800632c:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <HAL_RCC_OscConfig+0x620>)
 800632e:	4013      	ands	r3, r2
 8006330:	60cb      	str	r3, [r1, #12]
 8006332:	e03e      	b.n	80063b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e039      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006340:	4b1e      	ldr	r3, [pc, #120]	@ (80063bc <HAL_RCC_OscConfig+0x618>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f003 0203 	and.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	429a      	cmp	r2, r3
 8006352:	d12c      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	3b01      	subs	r3, #1
 8006360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006362:	429a      	cmp	r2, r3
 8006364:	d123      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006370:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d11b      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006380:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006382:	429a      	cmp	r2, r3
 8006384:	d113      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	3b01      	subs	r3, #1
 8006394:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	d109      	bne.n	80063ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063a4:	085b      	lsrs	r3, r3, #1
 80063a6:	3b01      	subs	r3, #1
 80063a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d001      	beq.n	80063b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40021000 	.word	0x40021000
 80063c0:	019f800c 	.word	0x019f800c
 80063c4:	feeefffc 	.word	0xfeeefffc

080063c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063d2:	2300      	movs	r3, #0
 80063d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e11e      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b91      	ldr	r3, [pc, #580]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d910      	bls.n	8006410 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 020f 	bic.w	r2, r3, #15
 80063f6:	498c      	ldr	r1, [pc, #560]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b8a      	ldr	r3, [pc, #552]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e106      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d073      	beq.n	8006504 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d129      	bne.n	8006478 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006424:	4b81      	ldr	r3, [pc, #516]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0f4      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006434:	f000 f966 	bl	8006704 <RCC_GetSysClockFreqFromPLLSource>
 8006438:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4a7c      	ldr	r2, [pc, #496]	@ (8006630 <HAL_RCC_ClockConfig+0x268>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d93f      	bls.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006442:	4b7a      	ldr	r3, [pc, #488]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006456:	2b00      	cmp	r3, #0
 8006458:	d033      	beq.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800645e:	2b00      	cmp	r3, #0
 8006460:	d12f      	bne.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006462:	4b72      	ldr	r3, [pc, #456]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800646a:	4a70      	ldr	r2, [pc, #448]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800646c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006470:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	e024      	b.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d107      	bne.n	8006490 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006480:	4b6a      	ldr	r3, [pc, #424]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d109      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0c6      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006490:	4b66      	ldr	r3, [pc, #408]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0be      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064a0:	f000 f8ce 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80064a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4a61      	ldr	r2, [pc, #388]	@ (8006630 <HAL_RCC_ClockConfig+0x268>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d909      	bls.n	80064c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ae:	4b5f      	ldr	r3, [pc, #380]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064b6:	4a5d      	ldr	r2, [pc, #372]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064c2:	4b5a      	ldr	r3, [pc, #360]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 0203 	bic.w	r2, r3, #3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4957      	ldr	r1, [pc, #348]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d4:	f7fc f8b0 	bl	8002638 <HAL_GetTick>
 80064d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064da:	e00a      	b.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064dc:	f7fc f8ac 	bl	8002638 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d901      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e095      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	4b4e      	ldr	r3, [pc, #312]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 020c 	and.w	r2, r3, #12
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	429a      	cmp	r2, r3
 8006502:	d1eb      	bne.n	80064dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d023      	beq.n	8006558 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800651c:	4b43      	ldr	r3, [pc, #268]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	4a42      	ldr	r2, [pc, #264]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006522:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006526:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006534:	4b3d      	ldr	r3, [pc, #244]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800653c:	4a3b      	ldr	r2, [pc, #236]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 800653e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006542:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006544:	4b39      	ldr	r3, [pc, #228]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	4936      	ldr	r1, [pc, #216]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
 8006556:	e008      	b.n	800656a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d105      	bne.n	800656a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800655e:	4b33      	ldr	r3, [pc, #204]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	4a32      	ldr	r2, [pc, #200]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 8006564:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006568:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d21d      	bcs.n	80065b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006578:	4b2b      	ldr	r3, [pc, #172]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 020f 	bic.w	r2, r3, #15
 8006580:	4929      	ldr	r1, [pc, #164]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	4313      	orrs	r3, r2
 8006586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006588:	f7fc f856 	bl	8002638 <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006590:	f7fc f852 	bl	8002638 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e03b      	b.n	800661e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d1ed      	bne.n	8006590 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	4917      	ldr	r1, [pc, #92]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0308 	and.w	r3, r3, #8
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065de:	4b13      	ldr	r3, [pc, #76]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	490f      	ldr	r1, [pc, #60]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065f2:	f000 f825 	bl	8006640 <HAL_RCC_GetSysClockFreq>
 80065f6:	4602      	mov	r2, r0
 80065f8:	4b0c      	ldr	r3, [pc, #48]	@ (800662c <HAL_RCC_ClockConfig+0x264>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	490c      	ldr	r1, [pc, #48]	@ (8006634 <HAL_RCC_ClockConfig+0x26c>)
 8006604:	5ccb      	ldrb	r3, [r1, r3]
 8006606:	f003 031f 	and.w	r3, r3, #31
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	4a0a      	ldr	r2, [pc, #40]	@ (8006638 <HAL_RCC_ClockConfig+0x270>)
 8006610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006612:	4b0a      	ldr	r3, [pc, #40]	@ (800663c <HAL_RCC_ClockConfig+0x274>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7fb ffc2 	bl	80025a0 <HAL_InitTick>
 800661c:	4603      	mov	r3, r0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40022000 	.word	0x40022000
 800662c:	40021000 	.word	0x40021000
 8006630:	04c4b400 	.word	0x04c4b400
 8006634:	08010eb8 	.word	0x08010eb8
 8006638:	20000004 	.word	0x20000004
 800663c:	20000008 	.word	0x20000008

08006640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006646:	4b2c      	ldr	r3, [pc, #176]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 030c 	and.w	r3, r3, #12
 800664e:	2b04      	cmp	r3, #4
 8006650:	d102      	bne.n	8006658 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006652:	4b2a      	ldr	r3, [pc, #168]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	e047      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006658:	4b27      	ldr	r3, [pc, #156]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 030c 	and.w	r3, r3, #12
 8006660:	2b08      	cmp	r3, #8
 8006662:	d102      	bne.n	800666a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006664:	4b26      	ldr	r3, [pc, #152]	@ (8006700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	e03e      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800666a:	4b23      	ldr	r3, [pc, #140]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d136      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006676:	4b20      	ldr	r3, [pc, #128]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006680:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	3301      	adds	r3, #1
 800668c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d10c      	bne.n	80066ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006694:	4a1a      	ldr	r2, [pc, #104]	@ (8006700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	4a16      	ldr	r2, [pc, #88]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800669e:	68d2      	ldr	r2, [r2, #12]
 80066a0:	0a12      	lsrs	r2, r2, #8
 80066a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	617b      	str	r3, [r7, #20]
      break;
 80066ac:	e00c      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ae:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b6:	4a10      	ldr	r2, [pc, #64]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b8:	68d2      	ldr	r2, [r2, #12]
 80066ba:	0a12      	lsrs	r2, r2, #8
 80066bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066c0:	fb02 f303 	mul.w	r3, r2, r3
 80066c4:	617b      	str	r3, [r7, #20]
      break;
 80066c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	0e5b      	lsrs	r3, r3, #25
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	3301      	adds	r3, #1
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	613b      	str	r3, [r7, #16]
 80066e2:	e001      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80066e8:	693b      	ldr	r3, [r7, #16]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	00f42400 	.word	0x00f42400
 8006700:	007a1200 	.word	0x007a1200

08006704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800670a:	4b1e      	ldr	r3, [pc, #120]	@ (8006784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006714:	4b1b      	ldr	r3, [pc, #108]	@ (8006784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	091b      	lsrs	r3, r3, #4
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	3301      	adds	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d10c      	bne.n	8006742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006728:	4a17      	ldr	r2, [pc, #92]	@ (8006788 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	4a14      	ldr	r2, [pc, #80]	@ (8006784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006732:	68d2      	ldr	r2, [r2, #12]
 8006734:	0a12      	lsrs	r2, r2, #8
 8006736:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	617b      	str	r3, [r7, #20]
    break;
 8006740:	e00c      	b.n	800675c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006742:	4a12      	ldr	r2, [pc, #72]	@ (800678c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	fbb2 f3f3 	udiv	r3, r2, r3
 800674a:	4a0e      	ldr	r2, [pc, #56]	@ (8006784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800674c:	68d2      	ldr	r2, [r2, #12]
 800674e:	0a12      	lsrs	r2, r2, #8
 8006750:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006754:	fb02 f303 	mul.w	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]
    break;
 800675a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800675c:	4b09      	ldr	r3, [pc, #36]	@ (8006784 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	0e5b      	lsrs	r3, r3, #25
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	3301      	adds	r3, #1
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006776:	687b      	ldr	r3, [r7, #4]
}
 8006778:	4618      	mov	r0, r3
 800677a:	371c      	adds	r7, #28
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	40021000 	.word	0x40021000
 8006788:	007a1200 	.word	0x007a1200
 800678c:	00f42400 	.word	0x00f42400

08006790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006798:	2300      	movs	r3, #0
 800679a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800679c:	2300      	movs	r3, #0
 800679e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8098 	beq.w	80068de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ae:	2300      	movs	r3, #0
 80067b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b2:	4b43      	ldr	r3, [pc, #268]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10d      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067be:	4b40      	ldr	r3, [pc, #256]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c2:	4a3f      	ldr	r2, [pc, #252]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80067ca:	4b3d      	ldr	r3, [pc, #244]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d6:	2301      	movs	r3, #1
 80067d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067da:	4b3a      	ldr	r3, [pc, #232]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a39      	ldr	r2, [pc, #228]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067e6:	f7fb ff27 	bl	8002638 <HAL_GetTick>
 80067ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ec:	e009      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ee:	f7fb ff23 	bl	8002638 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d902      	bls.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	74fb      	strb	r3, [r7, #19]
        break;
 8006800:	e005      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006802:	4b30      	ldr	r3, [pc, #192]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0ef      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800680e:	7cfb      	ldrb	r3, [r7, #19]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d159      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006814:	4b2a      	ldr	r3, [pc, #168]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800681e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d01e      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	429a      	cmp	r2, r3
 800682e:	d019      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006830:	4b23      	ldr	r3, [pc, #140]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800683a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800683c:	4b20      	ldr	r3, [pc, #128]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006842:	4a1f      	ldr	r2, [pc, #124]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800684c:	4b1c      	ldr	r3, [pc, #112]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006852:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006854:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800685c:	4a18      	ldr	r2, [pc, #96]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d016      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686e:	f7fb fee3 	bl	8002638 <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006874:	e00b      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006876:	f7fb fedf 	bl	8002638 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006884:	4293      	cmp	r3, r2
 8006886:	d902      	bls.n	800688e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	74fb      	strb	r3, [r7, #19]
            break;
 800688c:	e006      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800688e:	4b0c      	ldr	r3, [pc, #48]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0ec      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a2:	4b07      	ldr	r3, [pc, #28]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	4903      	ldr	r1, [pc, #12]	@ (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068b8:	e008      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ba:	7cfb      	ldrb	r3, [r7, #19]
 80068bc:	74bb      	strb	r3, [r7, #18]
 80068be:	e005      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80068c0:	40021000 	.word	0x40021000
 80068c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	7cfb      	ldrb	r3, [r7, #19]
 80068ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068cc:	7c7b      	ldrb	r3, [r7, #17]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d105      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d2:	4ba6      	ldr	r3, [pc, #664]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068d6:	4aa5      	ldr	r2, [pc, #660]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068ea:	4ba0      	ldr	r3, [pc, #640]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f0:	f023 0203 	bic.w	r2, r3, #3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	499c      	ldr	r1, [pc, #624]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00a      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800690c:	4b97      	ldr	r3, [pc, #604]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006912:	f023 020c 	bic.w	r2, r3, #12
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	4994      	ldr	r1, [pc, #592]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800692e:	4b8f      	ldr	r3, [pc, #572]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006934:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	498b      	ldr	r1, [pc, #556]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006950:	4b86      	ldr	r3, [pc, #536]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006956:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	4983      	ldr	r1, [pc, #524]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006960:	4313      	orrs	r3, r2
 8006962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006972:	4b7e      	ldr	r3, [pc, #504]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	497a      	ldr	r1, [pc, #488]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006994:	4b75      	ldr	r3, [pc, #468]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	4972      	ldr	r1, [pc, #456]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b6:	4b6d      	ldr	r3, [pc, #436]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	4969      	ldr	r1, [pc, #420]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069d8:	4b64      	ldr	r3, [pc, #400]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	4961      	ldr	r1, [pc, #388]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069fa:	4b5c      	ldr	r3, [pc, #368]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a08:	4958      	ldr	r1, [pc, #352]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d015      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a1c:	4b53      	ldr	r3, [pc, #332]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	4950      	ldr	r1, [pc, #320]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d105      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a4a      	ldr	r2, [pc, #296]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a54:	4b45      	ldr	r3, [pc, #276]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	4942      	ldr	r1, [pc, #264]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b3d      	ldr	r3, [pc, #244]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a3c      	ldr	r2, [pc, #240]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d015      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a8c:	4b37      	ldr	r3, [pc, #220]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	4934      	ldr	r1, [pc, #208]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aaa:	d105      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aac:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ab6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ac4:	4b29      	ldr	r3, [pc, #164]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad2:	4926      	ldr	r1, [pc, #152]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae2:	d105      	bne.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae4:	4b21      	ldr	r3, [pc, #132]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a20      	ldr	r2, [pc, #128]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d015      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006afc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	4918      	ldr	r1, [pc, #96]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1a:	d105      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	4a12      	ldr	r2, [pc, #72]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d015      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b34:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b42:	490a      	ldr	r1, [pc, #40]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b52:	d105      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b54:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	4a04      	ldr	r2, [pc, #16]	@ (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b60:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40021000 	.word	0x40021000

08006b70 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d070      	beq.n	8006c64 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d106      	bne.n	8006b9c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7fb fb1c 	bl	80021d4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d04f      	beq.n	8006c52 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	22ca      	movs	r2, #202	@ 0xca
 8006bb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2253      	movs	r2, #83	@ 0x53
 8006bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f878 	bl	8006cb8 <RTC_EnterInitMode>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d126      	bne.n	8006c20 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006be0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6999      	ldr	r1, [r3, #24]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68d9      	ldr	r1, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	041a      	lsls	r2, r3, #16
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	430a      	orrs	r2, r1
 8006c14:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f884 	bl	8006d24 <RTC_ExitInitMode>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d110      	bne.n	8006c48 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	22ff      	movs	r2, #255	@ 0xff
 8006c4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c50:	e001      	b.n	8006c56 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d103      	bne.n	8006c64 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8006cb4 <HAL_RTC_WaitForSynchro+0x44>)
 8006c7e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006c80:	f7fb fcda 	bl	8002638 <HAL_GetTick>
 8006c84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006c86:	e009      	b.n	8006c9c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c88:	f7fb fcd6 	bl	8002638 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c96:	d901      	bls.n	8006c9c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e007      	b.n	8006cac <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0ee      	beq.n	8006c88 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	0001005f 	.word	0x0001005f

08006cb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d123      	bne.n	8006d1a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ce0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ce2:	f7fb fca9 	bl	8002638 <HAL_GetTick>
 8006ce6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ce8:	e00d      	b.n	8006d06 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006cea:	f7fb fca5 	bl	8002638 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cf8:	d905      	bls.n	8006d06 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2203      	movs	r2, #3
 8006d02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <RTC_EnterInitMode+0x62>
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d1e7      	bne.n	8006cea <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d3e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10c      	bne.n	8006d68 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff ff8e 	bl	8006c70 <HAL_RTC_WaitForSynchro>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d022      	beq.n	8006da0 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e01b      	b.n	8006da0 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0220 	bic.w	r2, r2, #32
 8006d76:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff ff79 	bl	8006c70 <HAL_RTC_WaitForSynchro>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2203      	movs	r2, #3
 8006d88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699a      	ldr	r2, [r3, #24]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f042 0220 	orr.w	r2, r2, #32
 8006d9e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e062      	b.n	8006e8a <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	22ca      	movs	r2, #202	@ 0xca
 8006dda:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2253      	movs	r2, #83	@ 0x53
 8006de2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df2:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d120      	bne.n	8006e44 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8006e02:	f7fb fc19 	bl	8002638 <HAL_GetTick>
 8006e06:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006e08:	e015      	b.n	8006e36 <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e0a:	f7fb fc15 	bl	8002638 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e18:	d90d      	bls.n	8006e36 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	22ff      	movs	r2, #255	@ 0xff
 8006e20:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e029      	b.n	8006e8a <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0e2      	beq.n	8006e0a <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	f023 0107 	bic.w	r1, r3, #7
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	22ff      	movs	r2, #255	@ 0xff
 8006e76:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e049      	b.n	8006f38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fb f9c7 	bl	800224c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fba5 	bl	8007620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e049      	b.n	8006fe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f841 	bl	8006fee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f000 fb4e 	bl	8007620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <HAL_TIM_PWM_Start+0x24>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	e03c      	b.n	80070a2 <HAL_TIM_PWM_Start+0x9e>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d109      	bne.n	8007042 <HAL_TIM_PWM_Start+0x3e>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	bf14      	ite	ne
 800703a:	2301      	movne	r3, #1
 800703c:	2300      	moveq	r3, #0
 800703e:	b2db      	uxtb	r3, r3
 8007040:	e02f      	b.n	80070a2 <HAL_TIM_PWM_Start+0x9e>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b08      	cmp	r3, #8
 8007046:	d109      	bne.n	800705c <HAL_TIM_PWM_Start+0x58>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	bf14      	ite	ne
 8007054:	2301      	movne	r3, #1
 8007056:	2300      	moveq	r3, #0
 8007058:	b2db      	uxtb	r3, r3
 800705a:	e022      	b.n	80070a2 <HAL_TIM_PWM_Start+0x9e>
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d109      	bne.n	8007076 <HAL_TIM_PWM_Start+0x72>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	bf14      	ite	ne
 800706e:	2301      	movne	r3, #1
 8007070:	2300      	moveq	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e015      	b.n	80070a2 <HAL_TIM_PWM_Start+0x9e>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b10      	cmp	r3, #16
 800707a:	d109      	bne.n	8007090 <HAL_TIM_PWM_Start+0x8c>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	bf14      	ite	ne
 8007088:	2301      	movne	r3, #1
 800708a:	2300      	moveq	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	e008      	b.n	80070a2 <HAL_TIM_PWM_Start+0x9e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	bf14      	ite	ne
 800709c:	2301      	movne	r3, #1
 800709e:	2300      	moveq	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e097      	b.n	80071da <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Start+0xb6>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070b8:	e023      	b.n	8007102 <HAL_TIM_PWM_Start+0xfe>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d104      	bne.n	80070ca <HAL_TIM_PWM_Start+0xc6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070c8:	e01b      	b.n	8007102 <HAL_TIM_PWM_Start+0xfe>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Start+0xd6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070d8:	e013      	b.n	8007102 <HAL_TIM_PWM_Start+0xfe>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b0c      	cmp	r3, #12
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Start+0xe6>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070e8:	e00b      	b.n	8007102 <HAL_TIM_PWM_Start+0xfe>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Start+0xf6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070f8:	e003      	b.n	8007102 <HAL_TIM_PWM_Start+0xfe>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2201      	movs	r2, #1
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 feb6 	bl	8007e7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a33      	ldr	r2, [pc, #204]	@ (80071e4 <HAL_TIM_PWM_Start+0x1e0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_TIM_PWM_Start+0x13e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a32      	ldr	r2, [pc, #200]	@ (80071e8 <HAL_TIM_PWM_Start+0x1e4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_TIM_PWM_Start+0x13e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a30      	ldr	r2, [pc, #192]	@ (80071ec <HAL_TIM_PWM_Start+0x1e8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_TIM_PWM_Start+0x13e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2f      	ldr	r2, [pc, #188]	@ (80071f0 <HAL_TIM_PWM_Start+0x1ec>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_TIM_PWM_Start+0x13e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2d      	ldr	r2, [pc, #180]	@ (80071f4 <HAL_TIM_PWM_Start+0x1f0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d101      	bne.n	8007146 <HAL_TIM_PWM_Start+0x142>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <HAL_TIM_PWM_Start+0x144>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800715a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a20      	ldr	r2, [pc, #128]	@ (80071e4 <HAL_TIM_PWM_Start+0x1e0>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d018      	beq.n	8007198 <HAL_TIM_PWM_Start+0x194>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716e:	d013      	beq.n	8007198 <HAL_TIM_PWM_Start+0x194>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a20      	ldr	r2, [pc, #128]	@ (80071f8 <HAL_TIM_PWM_Start+0x1f4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d00e      	beq.n	8007198 <HAL_TIM_PWM_Start+0x194>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1f      	ldr	r2, [pc, #124]	@ (80071fc <HAL_TIM_PWM_Start+0x1f8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d009      	beq.n	8007198 <HAL_TIM_PWM_Start+0x194>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a17      	ldr	r2, [pc, #92]	@ (80071e8 <HAL_TIM_PWM_Start+0x1e4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d004      	beq.n	8007198 <HAL_TIM_PWM_Start+0x194>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a16      	ldr	r2, [pc, #88]	@ (80071ec <HAL_TIM_PWM_Start+0x1e8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d115      	bne.n	80071c4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	4b18      	ldr	r3, [pc, #96]	@ (8007200 <HAL_TIM_PWM_Start+0x1fc>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d015      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x1d2>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b0:	d011      	beq.n	80071d6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c2:	e008      	b.n	80071d6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 0201 	orr.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e000      	b.n	80071d8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40012c00 	.word	0x40012c00
 80071e8:	40013400 	.word	0x40013400
 80071ec:	40014000 	.word	0x40014000
 80071f0:	40014400 	.word	0x40014400
 80071f4:	40014800 	.word	0x40014800
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	00010007 	.word	0x00010007

08007204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800721e:	2302      	movs	r3, #2
 8007220:	e0ff      	b.n	8007422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b14      	cmp	r3, #20
 800722e:	f200 80f0 	bhi.w	8007412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007232:	a201      	add	r2, pc, #4	@ (adr r2, 8007238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007238:	0800728d 	.word	0x0800728d
 800723c:	08007413 	.word	0x08007413
 8007240:	08007413 	.word	0x08007413
 8007244:	08007413 	.word	0x08007413
 8007248:	080072cd 	.word	0x080072cd
 800724c:	08007413 	.word	0x08007413
 8007250:	08007413 	.word	0x08007413
 8007254:	08007413 	.word	0x08007413
 8007258:	0800730f 	.word	0x0800730f
 800725c:	08007413 	.word	0x08007413
 8007260:	08007413 	.word	0x08007413
 8007264:	08007413 	.word	0x08007413
 8007268:	0800734f 	.word	0x0800734f
 800726c:	08007413 	.word	0x08007413
 8007270:	08007413 	.word	0x08007413
 8007274:	08007413 	.word	0x08007413
 8007278:	08007391 	.word	0x08007391
 800727c:	08007413 	.word	0x08007413
 8007280:	08007413 	.word	0x08007413
 8007284:	08007413 	.word	0x08007413
 8007288:	080073d1 	.word	0x080073d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fa60 	bl	8007758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0204 	bic.w	r2, r2, #4
 80072b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6999      	ldr	r1, [r3, #24]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	619a      	str	r2, [r3, #24]
      break;
 80072ca:	e0a5      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fad0 	bl	8007878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6999      	ldr	r1, [r3, #24]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	619a      	str	r2, [r3, #24]
      break;
 800730c:	e084      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fb39 	bl	800798c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f042 0208 	orr.w	r2, r2, #8
 8007328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69da      	ldr	r2, [r3, #28]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0204 	bic.w	r2, r2, #4
 8007338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69d9      	ldr	r1, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	61da      	str	r2, [r3, #28]
      break;
 800734c:	e064      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fba1 	bl	8007a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69da      	ldr	r2, [r3, #28]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69da      	ldr	r2, [r3, #28]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69d9      	ldr	r1, [r3, #28]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	021a      	lsls	r2, r3, #8
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	61da      	str	r2, [r3, #28]
      break;
 800738e:	e043      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68b9      	ldr	r1, [r7, #8]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fc0a 	bl	8007bb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 0208 	orr.w	r2, r2, #8
 80073aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	691a      	ldr	r2, [r3, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073ce:	e023      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fc4e 	bl	8007c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	021a      	lsls	r2, r3, #8
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007410:	e002      	b.n	8007418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
      break;
 8007416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007420:	7dfb      	ldrb	r3, [r7, #23]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop

0800742c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_TIM_ConfigClockSource+0x1c>
 8007444:	2302      	movs	r3, #2
 8007446:	e0de      	b.n	8007606 <HAL_TIM_ConfigClockSource+0x1da>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007466:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800746a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a63      	ldr	r2, [pc, #396]	@ (8007610 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	f000 80a9 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007488:	4a61      	ldr	r2, [pc, #388]	@ (8007610 <HAL_TIM_ConfigClockSource+0x1e4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	f200 80ae 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 8007490:	4a60      	ldr	r2, [pc, #384]	@ (8007614 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	f000 80a1 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007498:	4a5e      	ldr	r2, [pc, #376]	@ (8007614 <HAL_TIM_ConfigClockSource+0x1e8>)
 800749a:	4293      	cmp	r3, r2
 800749c:	f200 80a6 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074a0:	4a5d      	ldr	r2, [pc, #372]	@ (8007618 <HAL_TIM_ConfigClockSource+0x1ec>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	f000 8099 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 80074a8:	4a5b      	ldr	r2, [pc, #364]	@ (8007618 <HAL_TIM_ConfigClockSource+0x1ec>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	f200 809e 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074b0:	4a5a      	ldr	r2, [pc, #360]	@ (800761c <HAL_TIM_ConfigClockSource+0x1f0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	f000 8091 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 80074b8:	4a58      	ldr	r2, [pc, #352]	@ (800761c <HAL_TIM_ConfigClockSource+0x1f0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	f200 8096 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074c4:	f000 8089 	beq.w	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 80074c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074cc:	f200 808e 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074d4:	d03e      	beq.n	8007554 <HAL_TIM_ConfigClockSource+0x128>
 80074d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074da:	f200 8087 	bhi.w	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e2:	f000 8086 	beq.w	80075f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ea:	d87f      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074ec:	2b70      	cmp	r3, #112	@ 0x70
 80074ee:	d01a      	beq.n	8007526 <HAL_TIM_ConfigClockSource+0xfa>
 80074f0:	2b70      	cmp	r3, #112	@ 0x70
 80074f2:	d87b      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074f4:	2b60      	cmp	r3, #96	@ 0x60
 80074f6:	d050      	beq.n	800759a <HAL_TIM_ConfigClockSource+0x16e>
 80074f8:	2b60      	cmp	r3, #96	@ 0x60
 80074fa:	d877      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 80074fc:	2b50      	cmp	r3, #80	@ 0x50
 80074fe:	d03c      	beq.n	800757a <HAL_TIM_ConfigClockSource+0x14e>
 8007500:	2b50      	cmp	r3, #80	@ 0x50
 8007502:	d873      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 8007504:	2b40      	cmp	r3, #64	@ 0x40
 8007506:	d058      	beq.n	80075ba <HAL_TIM_ConfigClockSource+0x18e>
 8007508:	2b40      	cmp	r3, #64	@ 0x40
 800750a:	d86f      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 800750c:	2b30      	cmp	r3, #48	@ 0x30
 800750e:	d064      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007510:	2b30      	cmp	r3, #48	@ 0x30
 8007512:	d86b      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 8007514:	2b20      	cmp	r3, #32
 8007516:	d060      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007518:	2b20      	cmp	r3, #32
 800751a:	d867      	bhi.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d05c      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007520:	2b10      	cmp	r3, #16
 8007522:	d05a      	beq.n	80075da <HAL_TIM_ConfigClockSource+0x1ae>
 8007524:	e062      	b.n	80075ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007536:	f000 fc81 	bl	8007e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	609a      	str	r2, [r3, #8]
      break;
 8007552:	e04f      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007564:	f000 fc6a 	bl	8007e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689a      	ldr	r2, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007576:	609a      	str	r2, [r3, #8]
      break;
 8007578:	e03c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	461a      	mov	r2, r3
 8007588:	f000 fbdc 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2150      	movs	r1, #80	@ 0x50
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fc35 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 8007598:	e02c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075a6:	461a      	mov	r2, r3
 80075a8:	f000 fbfb 	bl	8007da2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2160      	movs	r1, #96	@ 0x60
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fc25 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80075b8:	e01c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	461a      	mov	r2, r3
 80075c8:	f000 fbbc 	bl	8007d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2140      	movs	r1, #64	@ 0x40
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fc15 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80075d8:	e00c      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f000 fc0c 	bl	8007e02 <TIM_ITRx_SetConfig>
      break;
 80075ea:	e003      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	73fb      	strb	r3, [r7, #15]
      break;
 80075f0:	e000      	b.n	80075f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80075f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	00100070 	.word	0x00100070
 8007614:	00100040 	.word	0x00100040
 8007618:	00100030 	.word	0x00100030
 800761c:	00100020 	.word	0x00100020

08007620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a42      	ldr	r2, [pc, #264]	@ (800773c <TIM_Base_SetConfig+0x11c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00f      	beq.n	8007658 <TIM_Base_SetConfig+0x38>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763e:	d00b      	beq.n	8007658 <TIM_Base_SetConfig+0x38>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a3f      	ldr	r2, [pc, #252]	@ (8007740 <TIM_Base_SetConfig+0x120>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d007      	beq.n	8007658 <TIM_Base_SetConfig+0x38>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a3e      	ldr	r2, [pc, #248]	@ (8007744 <TIM_Base_SetConfig+0x124>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <TIM_Base_SetConfig+0x38>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a3d      	ldr	r2, [pc, #244]	@ (8007748 <TIM_Base_SetConfig+0x128>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d108      	bne.n	800766a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800765e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a33      	ldr	r2, [pc, #204]	@ (800773c <TIM_Base_SetConfig+0x11c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d01b      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007678:	d017      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a30      	ldr	r2, [pc, #192]	@ (8007740 <TIM_Base_SetConfig+0x120>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d013      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a2f      	ldr	r2, [pc, #188]	@ (8007744 <TIM_Base_SetConfig+0x124>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00f      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a2e      	ldr	r2, [pc, #184]	@ (8007748 <TIM_Base_SetConfig+0x128>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00b      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2d      	ldr	r2, [pc, #180]	@ (800774c <TIM_Base_SetConfig+0x12c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2c      	ldr	r2, [pc, #176]	@ (8007750 <TIM_Base_SetConfig+0x130>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_Base_SetConfig+0x8a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007754 <TIM_Base_SetConfig+0x134>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d108      	bne.n	80076bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	@ (800773c <TIM_Base_SetConfig+0x11c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0xe8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a17      	ldr	r2, [pc, #92]	@ (8007748 <TIM_Base_SetConfig+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0xe8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a16      	ldr	r2, [pc, #88]	@ (800774c <TIM_Base_SetConfig+0x12c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0xe8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a15      	ldr	r2, [pc, #84]	@ (8007750 <TIM_Base_SetConfig+0x130>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0xe8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a14      	ldr	r2, [pc, #80]	@ (8007754 <TIM_Base_SetConfig+0x134>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d103      	bne.n	8007710 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b01      	cmp	r3, #1
 8007720:	d105      	bne.n	800772e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	611a      	str	r2, [r3, #16]
  }
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40013400 	.word	0x40013400
 800774c:	40014000 	.word	0x40014000
 8007750:	40014400 	.word	0x40014400
 8007754:	40014800 	.word	0x40014800

08007758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	f023 0201 	bic.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f023 0302 	bic.w	r3, r3, #2
 80077a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007864 <TIM_OC1_SetConfig+0x10c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00f      	beq.n	80077d8 <TIM_OC1_SetConfig+0x80>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007868 <TIM_OC1_SetConfig+0x110>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00b      	beq.n	80077d8 <TIM_OC1_SetConfig+0x80>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a2a      	ldr	r2, [pc, #168]	@ (800786c <TIM_OC1_SetConfig+0x114>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d007      	beq.n	80077d8 <TIM_OC1_SetConfig+0x80>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a29      	ldr	r2, [pc, #164]	@ (8007870 <TIM_OC1_SetConfig+0x118>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d003      	beq.n	80077d8 <TIM_OC1_SetConfig+0x80>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a28      	ldr	r2, [pc, #160]	@ (8007874 <TIM_OC1_SetConfig+0x11c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d10c      	bne.n	80077f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f023 0308 	bic.w	r3, r3, #8
 80077de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007864 <TIM_OC1_SetConfig+0x10c>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d00f      	beq.n	800781a <TIM_OC1_SetConfig+0xc2>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a1a      	ldr	r2, [pc, #104]	@ (8007868 <TIM_OC1_SetConfig+0x110>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00b      	beq.n	800781a <TIM_OC1_SetConfig+0xc2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a19      	ldr	r2, [pc, #100]	@ (800786c <TIM_OC1_SetConfig+0x114>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d007      	beq.n	800781a <TIM_OC1_SetConfig+0xc2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a18      	ldr	r2, [pc, #96]	@ (8007870 <TIM_OC1_SetConfig+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d003      	beq.n	800781a <TIM_OC1_SetConfig+0xc2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a17      	ldr	r2, [pc, #92]	@ (8007874 <TIM_OC1_SetConfig+0x11c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d111      	bne.n	800783e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	40012c00 	.word	0x40012c00
 8007868:	40013400 	.word	0x40013400
 800786c:	40014000 	.word	0x40014000
 8007870:	40014400 	.word	0x40014400
 8007874:	40014800 	.word	0x40014800

08007878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	f023 0210 	bic.w	r2, r3, #16
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f023 0320 	bic.w	r3, r3, #32
 80078c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a28      	ldr	r2, [pc, #160]	@ (8007978 <TIM_OC2_SetConfig+0x100>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d003      	beq.n	80078e4 <TIM_OC2_SetConfig+0x6c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a27      	ldr	r2, [pc, #156]	@ (800797c <TIM_OC2_SetConfig+0x104>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10d      	bne.n	8007900 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a1d      	ldr	r2, [pc, #116]	@ (8007978 <TIM_OC2_SetConfig+0x100>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00f      	beq.n	8007928 <TIM_OC2_SetConfig+0xb0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a1c      	ldr	r2, [pc, #112]	@ (800797c <TIM_OC2_SetConfig+0x104>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00b      	beq.n	8007928 <TIM_OC2_SetConfig+0xb0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a1b      	ldr	r2, [pc, #108]	@ (8007980 <TIM_OC2_SetConfig+0x108>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d007      	beq.n	8007928 <TIM_OC2_SetConfig+0xb0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a1a      	ldr	r2, [pc, #104]	@ (8007984 <TIM_OC2_SetConfig+0x10c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d003      	beq.n	8007928 <TIM_OC2_SetConfig+0xb0>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a19      	ldr	r2, [pc, #100]	@ (8007988 <TIM_OC2_SetConfig+0x110>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d113      	bne.n	8007950 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800792e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007936:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40012c00 	.word	0x40012c00
 800797c:	40013400 	.word	0x40013400
 8007980:	40014000 	.word	0x40014000
 8007984:	40014400 	.word	0x40014400
 8007988:	40014800 	.word	0x40014800

0800798c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	021b      	lsls	r3, r3, #8
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a27      	ldr	r2, [pc, #156]	@ (8007a88 <TIM_OC3_SetConfig+0xfc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_OC3_SetConfig+0x6a>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a26      	ldr	r2, [pc, #152]	@ (8007a8c <TIM_OC3_SetConfig+0x100>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d10d      	bne.n	8007a12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a1c      	ldr	r2, [pc, #112]	@ (8007a88 <TIM_OC3_SetConfig+0xfc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00f      	beq.n	8007a3a <TIM_OC3_SetConfig+0xae>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a8c <TIM_OC3_SetConfig+0x100>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d00b      	beq.n	8007a3a <TIM_OC3_SetConfig+0xae>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a1a      	ldr	r2, [pc, #104]	@ (8007a90 <TIM_OC3_SetConfig+0x104>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d007      	beq.n	8007a3a <TIM_OC3_SetConfig+0xae>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a19      	ldr	r2, [pc, #100]	@ (8007a94 <TIM_OC3_SetConfig+0x108>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_OC3_SetConfig+0xae>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a18      	ldr	r2, [pc, #96]	@ (8007a98 <TIM_OC3_SetConfig+0x10c>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d113      	bne.n	8007a62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	011b      	lsls	r3, r3, #4
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	621a      	str	r2, [r3, #32]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40012c00 	.word	0x40012c00
 8007a8c:	40013400 	.word	0x40013400
 8007a90:	40014000 	.word	0x40014000
 8007a94:	40014400 	.word	0x40014400
 8007a98:	40014800 	.word	0x40014800

08007a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	031b      	lsls	r3, r3, #12
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a28      	ldr	r2, [pc, #160]	@ (8007b9c <TIM_OC4_SetConfig+0x100>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_OC4_SetConfig+0x6c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a27      	ldr	r2, [pc, #156]	@ (8007ba0 <TIM_OC4_SetConfig+0x104>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10d      	bne.n	8007b24 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	031b      	lsls	r3, r3, #12
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <TIM_OC4_SetConfig+0x100>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00f      	beq.n	8007b4c <TIM_OC4_SetConfig+0xb0>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba0 <TIM_OC4_SetConfig+0x104>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00b      	beq.n	8007b4c <TIM_OC4_SetConfig+0xb0>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba4 <TIM_OC4_SetConfig+0x108>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d007      	beq.n	8007b4c <TIM_OC4_SetConfig+0xb0>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ba8 <TIM_OC4_SetConfig+0x10c>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d003      	beq.n	8007b4c <TIM_OC4_SetConfig+0xb0>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a19      	ldr	r2, [pc, #100]	@ (8007bac <TIM_OC4_SetConfig+0x110>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d113      	bne.n	8007b74 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	019b      	lsls	r3, r3, #6
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	019b      	lsls	r3, r3, #6
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40012c00 	.word	0x40012c00
 8007ba0:	40013400 	.word	0x40013400
 8007ba4:	40014000 	.word	0x40014000
 8007ba8:	40014400 	.word	0x40014400
 8007bac:	40014800 	.word	0x40014800

08007bb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b087      	sub	sp, #28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a1b      	ldr	r3, [r3, #32]
 8007bc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007bf4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a17      	ldr	r2, [pc, #92]	@ (8007c64 <TIM_OC5_SetConfig+0xb4>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d00f      	beq.n	8007c2a <TIM_OC5_SetConfig+0x7a>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a16      	ldr	r2, [pc, #88]	@ (8007c68 <TIM_OC5_SetConfig+0xb8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00b      	beq.n	8007c2a <TIM_OC5_SetConfig+0x7a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a15      	ldr	r2, [pc, #84]	@ (8007c6c <TIM_OC5_SetConfig+0xbc>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d007      	beq.n	8007c2a <TIM_OC5_SetConfig+0x7a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a14      	ldr	r2, [pc, #80]	@ (8007c70 <TIM_OC5_SetConfig+0xc0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d003      	beq.n	8007c2a <TIM_OC5_SetConfig+0x7a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a13      	ldr	r2, [pc, #76]	@ (8007c74 <TIM_OC5_SetConfig+0xc4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d109      	bne.n	8007c3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	621a      	str	r2, [r3, #32]
}
 8007c58:	bf00      	nop
 8007c5a:	371c      	adds	r7, #28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40013400 	.word	0x40013400
 8007c6c:	40014000 	.word	0x40014000
 8007c70:	40014400 	.word	0x40014400
 8007c74:	40014800 	.word	0x40014800

08007c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1b      	ldr	r3, [r3, #32]
 8007c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	051b      	lsls	r3, r3, #20
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a18      	ldr	r2, [pc, #96]	@ (8007d30 <TIM_OC6_SetConfig+0xb8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d00f      	beq.n	8007cf4 <TIM_OC6_SetConfig+0x7c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a17      	ldr	r2, [pc, #92]	@ (8007d34 <TIM_OC6_SetConfig+0xbc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <TIM_OC6_SetConfig+0x7c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a16      	ldr	r2, [pc, #88]	@ (8007d38 <TIM_OC6_SetConfig+0xc0>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d007      	beq.n	8007cf4 <TIM_OC6_SetConfig+0x7c>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a15      	ldr	r2, [pc, #84]	@ (8007d3c <TIM_OC6_SetConfig+0xc4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_OC6_SetConfig+0x7c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a14      	ldr	r2, [pc, #80]	@ (8007d40 <TIM_OC6_SetConfig+0xc8>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d109      	bne.n	8007d08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	695b      	ldr	r3, [r3, #20]
 8007d00:	029b      	lsls	r3, r3, #10
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40013400 	.word	0x40013400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40014400 	.word	0x40014400
 8007d40:	40014800 	.word	0x40014800

08007d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1b      	ldr	r3, [r3, #32]
 8007d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	f023 0201 	bic.w	r2, r3, #1
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f023 030a 	bic.w	r3, r3, #10
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	621a      	str	r2, [r3, #32]
}
 8007d96:	bf00      	nop
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr

08007da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da2:	b480      	push	{r7}
 8007da4:	b087      	sub	sp, #28
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f023 0210 	bic.w	r2, r3, #16
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	031b      	lsls	r3, r3, #12
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	621a      	str	r2, [r3, #32]
}
 8007df6:	bf00      	nop
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f043 0307 	orr.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
}
 8007e30:	bf00      	nop
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	021a      	lsls	r2, r3, #8
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 031f 	and.w	r3, r3, #31
 8007e8e:	2201      	movs	r2, #1
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1a      	ldr	r2, [r3, #32]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	401a      	ands	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a1a      	ldr	r2, [r3, #32]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f003 031f 	and.w	r3, r3, #31
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d101      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e065      	b.n	8007fac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d108      	bne.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007f1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d018      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f56:	d013      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a18      	ldr	r2, [pc, #96]	@ (8007fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00e      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a17      	ldr	r2, [pc, #92]	@ (8007fc4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a12      	ldr	r2, [pc, #72]	@ (8007fbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a13      	ldr	r2, [pc, #76]	@ (8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10c      	bne.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	40012c00 	.word	0x40012c00
 8007fbc:	40013400 	.word	0x40013400
 8007fc0:	40000400 	.word	0x40000400
 8007fc4:	40000800 	.word	0x40000800
 8007fc8:	40014000 	.word	0x40014000

08007fcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007fdc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007fe0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008002:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008006:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	b29b      	uxth	r3, r3
 8008014:	43db      	mvns	r3, r3
 8008016:	b29b      	uxth	r3, r3
 8008018:	4013      	ands	r3, r2
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	1d3b      	adds	r3, r7, #4
 800803a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2201      	movs	r2, #1
 8008042:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800806c:	b480      	push	{r7}
 800806e:	b09d      	sub	sp, #116	@ 0x74
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800808e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008092:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d81f      	bhi.n	80080de <USB_ActivateEndpoint+0x72>
 800809e:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <USB_ActivateEndpoint+0x38>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080e7 	.word	0x080080e7
 80080b0:	080080c3 	.word	0x080080c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80080b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80080c0:	e012      	b.n	80080e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80080c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80080ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80080ce:	e00b      	b.n	80080e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80080d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80080dc:	e004      	b.n	80080e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80080e4:	e000      	b.n	80080e8 <USB_ActivateEndpoint+0x7c>
      break;
 80080e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	441a      	add	r2, r3
 80080f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80080f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008106:	b29b      	uxth	r3, r3
 8008108:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4413      	add	r3, r2
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	b21b      	sxth	r3, r3
 800811a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800811e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008122:	b21a      	sxth	r2, r3
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	b21b      	sxth	r3, r3
 800812a:	4313      	orrs	r3, r2
 800812c:	b21b      	sxth	r3, r3
 800812e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800814c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008150:	b29b      	uxth	r3, r3
 8008152:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	7b1b      	ldrb	r3, [r3, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f040 8178 	bne.w	800844e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 8084 	beq.w	8008270 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	4413      	add	r3, r2
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	4413      	add	r3, r2
 8008186:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	88db      	ldrh	r3, [r3, #6]
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	827b      	strh	r3, [r7, #18]
 80081aa:	8a7b      	ldrh	r3, [r7, #18]
 80081ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01b      	beq.n	80081ec <USB_ActivateEndpoint+0x180>
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	881b      	ldrh	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ca:	823b      	strh	r3, [r7, #16]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	8a3b      	ldrh	r3, [r7, #16]
 80081d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	78db      	ldrb	r3, [r3, #3]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d020      	beq.n	8008236 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800820a:	81bb      	strh	r3, [r7, #12]
 800820c:	89bb      	ldrh	r3, [r7, #12]
 800820e:	f083 0320 	eor.w	r3, r3, #32
 8008212:	81bb      	strh	r3, [r7, #12]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	441a      	add	r2, r3
 800821e:	89bb      	ldrh	r3, [r7, #12]
 8008220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800822c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008230:	b29b      	uxth	r3, r3
 8008232:	8013      	strh	r3, [r2, #0]
 8008234:	e2d5      	b.n	80087e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800824c:	81fb      	strh	r3, [r7, #14]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	441a      	add	r2, r3
 8008258:	89fb      	ldrh	r3, [r7, #14]
 800825a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800825e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800826a:	b29b      	uxth	r3, r3
 800826c:	8013      	strh	r3, [r2, #0]
 800826e:	e2b8      	b.n	80087e2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	633b      	str	r3, [r7, #48]	@ 0x30
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	4413      	add	r3, r2
 8008282:	633b      	str	r3, [r7, #48]	@ 0x30
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	00da      	lsls	r2, r3, #3
 800828a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828c:	4413      	add	r3, r2
 800828e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	b29b      	uxth	r3, r3
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	4413      	add	r3, r2
 80082b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	00da      	lsls	r2, r3, #3
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	4413      	add	r3, r2
 80082c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	801a      	strh	r2, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80082de:	d91d      	bls.n	800831c <USB_ActivateEndpoint+0x2b0>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <USB_ActivateEndpoint+0x28e>
 80082f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082f6:	3b01      	subs	r3, #1
 80082f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29a      	uxth	r2, r3
 8008300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008302:	b29b      	uxth	r3, r3
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b29b      	uxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008314:	b29a      	uxth	r2, r3
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	e026      	b.n	800836a <USB_ActivateEndpoint+0x2fe>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <USB_ActivateEndpoint+0x2ce>
 8008324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008332:	b29a      	uxth	r2, r3
 8008334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	e017      	b.n	800836a <USB_ActivateEndpoint+0x2fe>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <USB_ActivateEndpoint+0x2e8>
 800834e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008350:	3301      	adds	r3, #1
 8008352:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	b29a      	uxth	r2, r3
 800835a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800835c:	b29b      	uxth	r3, r3
 800835e:	029b      	lsls	r3, r3, #10
 8008360:	b29b      	uxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b29a      	uxth	r2, r3
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800837a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d01b      	beq.n	80083ba <USB_ActivateEndpoint+0x34e>
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008398:	843b      	strh	r3, [r7, #32]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	441a      	add	r2, r3
 80083a4:	8c3b      	ldrh	r3, [r7, #32]
 80083a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d124      	bne.n	800840c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083d8:	83bb      	strh	r3, [r7, #28]
 80083da:	8bbb      	ldrh	r3, [r7, #28]
 80083dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083e0:	83bb      	strh	r3, [r7, #28]
 80083e2:	8bbb      	ldrh	r3, [r7, #28]
 80083e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083e8:	83bb      	strh	r3, [r7, #28]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	441a      	add	r2, r3
 80083f4:	8bbb      	ldrh	r3, [r7, #28]
 80083f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]
 800840a:	e1ea      	b.n	80087e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4413      	add	r3, r2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800841e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008422:	83fb      	strh	r3, [r7, #30]
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800842a:	83fb      	strh	r3, [r7, #30]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	441a      	add	r2, r3
 8008436:	8bfb      	ldrh	r3, [r7, #30]
 8008438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800843c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008448:	b29b      	uxth	r3, r3
 800844a:	8013      	strh	r3, [r2, #0]
 800844c:	e1c9      	b.n	80087e2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	78db      	ldrb	r3, [r3, #3]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d11e      	bne.n	8008494 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800846c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	441a      	add	r2, r3
 800847a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800847e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008486:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800848a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800848e:	b29b      	uxth	r3, r3
 8008490:	8013      	strh	r3, [r2, #0]
 8008492:	e01d      	b.n	80084d0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80084a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084aa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	441a      	add	r2, r3
 80084b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80084bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084da:	b29b      	uxth	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e0:	4413      	add	r3, r2
 80084e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	00da      	lsls	r2, r3, #3
 80084ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	891b      	ldrh	r3, [r3, #8]
 80084f8:	085b      	lsrs	r3, r3, #1
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	657b      	str	r3, [r7, #84]	@ 0x54
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008514:	4413      	add	r3, r2
 8008516:	657b      	str	r3, [r7, #84]	@ 0x54
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	00da      	lsls	r2, r3, #3
 800851e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008520:	4413      	add	r3, r2
 8008522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008526:	653b      	str	r3, [r7, #80]	@ 0x50
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	895b      	ldrh	r3, [r3, #10]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	b29b      	uxth	r3, r3
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008536:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f040 8093 	bne.w	8008668 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008552:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01b      	beq.n	8008596 <USB_ActivateEndpoint+0x52a>
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008574:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008582:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008586:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800858a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800858e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008592:	b29b      	uxth	r3, r3
 8008594:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80085a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80085a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01b      	beq.n	80085e6 <USB_ActivateEndpoint+0x57a>
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	441a      	add	r2, r3
 80085d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80085d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fc:	873b      	strh	r3, [r7, #56]	@ 0x38
 80085fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008600:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008604:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008606:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008608:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800860c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	441a      	add	r2, r3
 8008618:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008644:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800865a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800865e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]
 8008666:	e0bc      	b.n	80087e2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800867c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01d      	beq.n	80086c0 <USB_ActivateEndpoint+0x654>
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80086d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80086d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01d      	beq.n	8008718 <USB_ActivateEndpoint+0x6ac>
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	441a      	add	r2, r3
 8008700:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800870c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008710:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008714:	b29b      	uxth	r3, r3
 8008716:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	78db      	ldrb	r3, [r3, #3]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d024      	beq.n	800876a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008736:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800873a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800873e:	f083 0320 	eor.w	r3, r3, #32
 8008742:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	441a      	add	r2, r3
 8008750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800875c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008764:	b29b      	uxth	r3, r3
 8008766:	8013      	strh	r3, [r2, #0]
 8008768:	e01d      	b.n	80087a6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	b29b      	uxth	r3, r3
 8008778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800877c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008780:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	441a      	add	r2, r3
 800878e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800879a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	441a      	add	r2, r3
 80087ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80087ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087de:	b29b      	uxth	r3, r3
 80087e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80087e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3774      	adds	r7, #116	@ 0x74
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop

080087f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b08d      	sub	sp, #52	@ 0x34
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	7b1b      	ldrb	r3, [r3, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f040 808e 	bne.w	8008924 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	785b      	ldrb	r3, [r3, #1]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d044      	beq.n	800889a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	81bb      	strh	r3, [r7, #12]
 800881e:	89bb      	ldrh	r3, [r7, #12]
 8008820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01b      	beq.n	8008860 <USB_DeactivateEndpoint+0x6c>
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	881b      	ldrh	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883e:	817b      	strh	r3, [r7, #10]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	441a      	add	r2, r3
 800884a:	897b      	ldrh	r3, [r7, #10]
 800884c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008858:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800885c:	b29b      	uxth	r3, r3
 800885e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008876:	813b      	strh	r3, [r7, #8]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	441a      	add	r2, r3
 8008882:	893b      	ldrh	r3, [r7, #8]
 8008884:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008888:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800888c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008894:	b29b      	uxth	r3, r3
 8008896:	8013      	strh	r3, [r2, #0]
 8008898:	e192      	b.n	8008bc0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	827b      	strh	r3, [r7, #18]
 80088a8:	8a7b      	ldrh	r3, [r7, #18]
 80088aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01b      	beq.n	80088ea <USB_DeactivateEndpoint+0xf6>
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c8:	823b      	strh	r3, [r7, #16]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	441a      	add	r2, r3
 80088d4:	8a3b      	ldrh	r3, [r7, #16]
 80088d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008900:	81fb      	strh	r3, [r7, #14]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	89fb      	ldrh	r3, [r7, #14]
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]
 8008922:	e14d      	b.n	8008bc0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	2b00      	cmp	r3, #0
 800892a:	f040 80a5 	bne.w	8008a78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	843b      	strh	r3, [r7, #32]
 800893c:	8c3b      	ldrh	r3, [r7, #32]
 800893e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d01b      	beq.n	800897e <USB_DeactivateEndpoint+0x18a>
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29b      	uxth	r3, r3
 8008954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895c:	83fb      	strh	r3, [r7, #30]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	441a      	add	r2, r3
 8008968:	8bfb      	ldrh	r3, [r7, #30]
 800896a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800896e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800897a:	b29b      	uxth	r3, r3
 800897c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	83bb      	strh	r3, [r7, #28]
 800898c:	8bbb      	ldrh	r3, [r7, #28]
 800898e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01b      	beq.n	80089ce <USB_DeactivateEndpoint+0x1da>
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ac:	837b      	strh	r3, [r7, #26]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	441a      	add	r2, r3
 80089b8:	8b7b      	ldrh	r3, [r7, #26]
 80089ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29b      	uxth	r3, r3
 80089dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089e4:	833b      	strh	r3, [r7, #24]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	8b3b      	ldrh	r3, [r7, #24]
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1c:	82fb      	strh	r3, [r7, #22]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	441a      	add	r2, r3
 8008a28:	8afb      	ldrh	r3, [r7, #22]
 8008a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a54:	82bb      	strh	r3, [r7, #20]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	8abb      	ldrh	r3, [r7, #20]
 8008a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	8013      	strh	r3, [r2, #0]
 8008a76:	e0a3      	b.n	8008bc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008a86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01b      	beq.n	8008ac8 <USB_DeactivateEndpoint+0x2d4>
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	441a      	add	r2, r3
 8008ab2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008ad6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01b      	beq.n	8008b18 <USB_DeactivateEndpoint+0x324>
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008af6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	441a      	add	r2, r3
 8008b02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	441a      	add	r2, r3
 8008b3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b66:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	441a      	add	r2, r3
 8008b72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b9e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	441a      	add	r2, r3
 8008baa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3734      	adds	r7, #52	@ 0x34
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b0c2      	sub	sp, #264	@ 0x108
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bdc:	6018      	str	r0, [r3, #0]
 8008bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	f040 86b7 	bne.w	8009968 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d908      	bls.n	8008c28 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008c26:	e007      	b.n	8008c38 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	7b1b      	ldrb	r3, [r3, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d13a      	bne.n	8008cbe <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6959      	ldr	r1, [r3, #20]
 8008c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	88da      	ldrh	r2, [r3, #6]
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008c6a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008c6e:	6800      	ldr	r0, [r0, #0]
 8008c70:	f001 fc98 	bl	800a5a4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	613b      	str	r3, [r7, #16]
 8008c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	00da      	lsls	r2, r3, #3
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	f000 be1f 	b.w	80098fc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	78db      	ldrb	r3, [r3, #3]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	f040 8462 	bne.w	8009594 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a1a      	ldr	r2, [r3, #32]
 8008cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	f240 83df 	bls.w	80094ac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d14:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	441a      	add	r2, r3
 8008d32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d5a:	1ad2      	subs	r2, r2, r3
 8008d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 81c7 	beq.w	800911e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d177      	bne.n	8008e9c <USB_EPStartXfer+0x2ce>
 8008dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dcc:	4413      	add	r3, r2
 8008dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	00da      	lsls	r2, r3, #3
 8008dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de0:	4413      	add	r3, r2
 8008de2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	801a      	strh	r2, [r3, #0]
 8008df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dfe:	d921      	bls.n	8008e44 <USB_EPStartXfer+0x276>
 8008e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e0e:	f003 031f 	and.w	r3, r3, #31
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <USB_EPStartXfer+0x252>
 8008e16:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	029b      	lsls	r3, r3, #10
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4313      	orrs	r3, r2
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	e050      	b.n	8008ee6 <USB_EPStartXfer+0x318>
 8008e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <USB_EPStartXfer+0x294>
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	e041      	b.n	8008ee6 <USB_EPStartXfer+0x318>
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <USB_EPStartXfer+0x2b4>
 8008e78:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	029b      	lsls	r3, r3, #10
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	801a      	strh	r2, [r3, #0]
 8008e9a:	e024      	b.n	8008ee6 <USB_EPStartXfer+0x318>
 8008e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d11c      	bne.n	8008ee6 <USB_EPStartXfer+0x318>
 8008eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec0:	4413      	add	r3, r2
 8008ec2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	00da      	lsls	r2, r3, #3
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	895b      	ldrh	r3, [r3, #10]
 8008ef2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6959      	ldr	r1, [r3, #20]
 8008f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008f0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008f10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008f14:	6800      	ldr	r0, [r0, #0]
 8008f16:	f001 fb45 	bl	800a5a4 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695a      	ldr	r2, [r3, #20]
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f2a:	441a      	add	r2, r3
 8008f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6a1a      	ldr	r2, [r3, #32]
 8008f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d90f      	bls.n	8008f74 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6a1a      	ldr	r2, [r3, #32]
 8008f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f64:	1ad2      	subs	r2, r2, r3
 8008f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	621a      	str	r2, [r3, #32]
 8008f72:	e00e      	b.n	8008f92 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	785b      	ldrb	r3, [r3, #1]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d177      	bne.n	8009092 <USB_EPStartXfer+0x4c4>
 8008fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	61bb      	str	r3, [r7, #24]
 8008fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	00da      	lsls	r2, r3, #3
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ff2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ff4:	d921      	bls.n	800903a <USB_EPStartXfer+0x46c>
 8008ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffa:	095b      	lsrs	r3, r3, #5
 8008ffc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <USB_EPStartXfer+0x448>
 800900c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009010:	3b01      	subs	r3, #1
 8009012:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29a      	uxth	r2, r3
 800901c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009020:	b29b      	uxth	r3, r3
 8009022:	029b      	lsls	r3, r3, #10
 8009024:	b29b      	uxth	r3, r3
 8009026:	4313      	orrs	r3, r2
 8009028:	b29b      	uxth	r3, r3
 800902a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009032:	b29a      	uxth	r2, r3
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	801a      	strh	r2, [r3, #0]
 8009038:	e056      	b.n	80090e8 <USB_EPStartXfer+0x51a>
 800903a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <USB_EPStartXfer+0x48a>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009050:	b29a      	uxth	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	e047      	b.n	80090e8 <USB_EPStartXfer+0x51a>
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905c:	085b      	lsrs	r3, r3, #1
 800905e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <USB_EPStartXfer+0x4aa>
 800906e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009072:	3301      	adds	r3, #1
 8009074:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	881b      	ldrh	r3, [r3, #0]
 800907c:	b29a      	uxth	r2, r3
 800907e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009082:	b29b      	uxth	r3, r3
 8009084:	029b      	lsls	r3, r3, #10
 8009086:	b29b      	uxth	r3, r3
 8009088:	4313      	orrs	r3, r2
 800908a:	b29a      	uxth	r2, r3
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	801a      	strh	r2, [r3, #0]
 8009090:	e02a      	b.n	80090e8 <USB_EPStartXfer+0x51a>
 8009092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	785b      	ldrb	r3, [r3, #1]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d122      	bne.n	80090e8 <USB_EPStartXfer+0x51a>
 80090a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090bc:	b29b      	uxth	r3, r3
 80090be:	461a      	mov	r2, r3
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	4413      	add	r3, r2
 80090c4:	623b      	str	r3, [r7, #32]
 80090c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	00da      	lsls	r2, r3, #3
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	4413      	add	r3, r2
 80090d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80090e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	891b      	ldrh	r3, [r3, #8]
 80090f4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	6959      	ldr	r1, [r3, #20]
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009108:	b29b      	uxth	r3, r3
 800910a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800910e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009112:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009116:	6800      	ldr	r0, [r0, #0]
 8009118:	f001 fa44 	bl	800a5a4 <USB_WritePMA>
 800911c:	e3ee      	b.n	80098fc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800911e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d177      	bne.n	800921e <USB_EPStartXfer+0x650>
 800912e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	64bb      	str	r3, [r7, #72]	@ 0x48
 800913a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800913e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009148:	b29b      	uxth	r3, r3
 800914a:	461a      	mov	r2, r3
 800914c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800914e:	4413      	add	r3, r2
 8009150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	00da      	lsls	r2, r3, #3
 8009160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009162:	4413      	add	r3, r2
 8009164:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009168:	647b      	str	r3, [r7, #68]	@ 0x44
 800916a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	b29b      	uxth	r3, r3
 8009170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009174:	b29a      	uxth	r2, r3
 8009176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009178:	801a      	strh	r2, [r3, #0]
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009180:	d921      	bls.n	80091c6 <USB_EPStartXfer+0x5f8>
 8009182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800918c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <USB_EPStartXfer+0x5d4>
 8009198:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800919c:	3b01      	subs	r3, #1
 800919e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091a4:	881b      	ldrh	r3, [r3, #0]
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	029b      	lsls	r3, r3, #10
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	4313      	orrs	r3, r2
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091be:	b29a      	uxth	r2, r3
 80091c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091c2:	801a      	strh	r2, [r3, #0]
 80091c4:	e056      	b.n	8009274 <USB_EPStartXfer+0x6a6>
 80091c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <USB_EPStartXfer+0x616>
 80091ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091dc:	b29a      	uxth	r2, r3
 80091de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091e0:	801a      	strh	r2, [r3, #0]
 80091e2:	e047      	b.n	8009274 <USB_EPStartXfer+0x6a6>
 80091e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e8:	085b      	lsrs	r3, r3, #1
 80091ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d004      	beq.n	8009204 <USB_EPStartXfer+0x636>
 80091fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80091fe:	3301      	adds	r3, #1
 8009200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	b29a      	uxth	r2, r3
 800920a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800920e:	b29b      	uxth	r3, r3
 8009210:	029b      	lsls	r3, r3, #10
 8009212:	b29b      	uxth	r3, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	b29a      	uxth	r2, r3
 8009218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e02a      	b.n	8009274 <USB_EPStartXfer+0x6a6>
 800921e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	785b      	ldrb	r3, [r3, #1]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d122      	bne.n	8009274 <USB_EPStartXfer+0x6a6>
 800922e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	653b      	str	r3, [r7, #80]	@ 0x50
 800923a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800923e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009248:	b29b      	uxth	r3, r3
 800924a:	461a      	mov	r2, r3
 800924c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800924e:	4413      	add	r3, r2
 8009250:	653b      	str	r3, [r7, #80]	@ 0x50
 8009252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	00da      	lsls	r2, r3, #3
 8009260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009262:	4413      	add	r3, r2
 8009264:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009268:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	b29a      	uxth	r2, r3
 8009270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009272:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	891b      	ldrh	r3, [r3, #8]
 8009280:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6959      	ldr	r1, [r3, #20]
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009294:	b29b      	uxth	r3, r3
 8009296:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800929a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800929e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80092a2:	6800      	ldr	r0, [r0, #0]
 80092a4:	f001 f97e 	bl	800a5a4 <USB_WritePMA>
            ep->xfer_buff += len;
 80092a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	695a      	ldr	r2, [r3, #20]
 80092b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b8:	441a      	add	r2, r3
 80092ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80092c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6a1a      	ldr	r2, [r3, #32]
 80092d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d90f      	bls.n	8009302 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80092e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6a1a      	ldr	r2, [r3, #32]
 80092ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f2:	1ad2      	subs	r2, r2, r3
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	621a      	str	r2, [r3, #32]
 8009300:	e00e      	b.n	8009320 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2200      	movs	r2, #0
 800931e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	643b      	str	r3, [r7, #64]	@ 0x40
 800932c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d177      	bne.n	800942c <USB_EPStartXfer+0x85e>
 800933c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009356:	b29b      	uxth	r3, r3
 8009358:	461a      	mov	r2, r3
 800935a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935c:	4413      	add	r3, r2
 800935e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	00da      	lsls	r2, r3, #3
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	4413      	add	r3, r2
 8009372:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009376:	637b      	str	r3, [r7, #52]	@ 0x34
 8009378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009382:	b29a      	uxth	r2, r3
 8009384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009386:	801a      	strh	r2, [r3, #0]
 8009388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800938c:	2b3e      	cmp	r3, #62	@ 0x3e
 800938e:	d921      	bls.n	80093d4 <USB_EPStartXfer+0x806>
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009394:	095b      	lsrs	r3, r3, #5
 8009396:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800939a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939e:	f003 031f 	and.w	r3, r3, #31
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d104      	bne.n	80093b0 <USB_EPStartXfer+0x7e2>
 80093a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093aa:	3b01      	subs	r3, #1
 80093ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80093b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	029b      	lsls	r3, r3, #10
 80093be:	b29b      	uxth	r3, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d0:	801a      	strh	r2, [r3, #0]
 80093d2:	e050      	b.n	8009476 <USB_EPStartXfer+0x8a8>
 80093d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <USB_EPStartXfer+0x824>
 80093dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093ee:	801a      	strh	r2, [r3, #0]
 80093f0:	e041      	b.n	8009476 <USB_EPStartXfer+0x8a8>
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80093fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <USB_EPStartXfer+0x844>
 8009408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800940c:	3301      	adds	r3, #1
 800940e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29a      	uxth	r2, r3
 8009418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800941c:	b29b      	uxth	r3, r3
 800941e:	029b      	lsls	r3, r3, #10
 8009420:	b29b      	uxth	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009428:	801a      	strh	r2, [r3, #0]
 800942a:	e024      	b.n	8009476 <USB_EPStartXfer+0x8a8>
 800942c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d11c      	bne.n	8009476 <USB_EPStartXfer+0x8a8>
 800943c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800944a:	b29b      	uxth	r3, r3
 800944c:	461a      	mov	r2, r3
 800944e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009450:	4413      	add	r3, r2
 8009452:	643b      	str	r3, [r7, #64]	@ 0x40
 8009454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	00da      	lsls	r2, r3, #3
 8009462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009464:	4413      	add	r3, r2
 8009466:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009470:	b29a      	uxth	r2, r3
 8009472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009474:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800947a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	895b      	ldrh	r3, [r3, #10]
 8009482:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6959      	ldr	r1, [r3, #20]
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009496:	b29b      	uxth	r3, r3
 8009498:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800949c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80094a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80094a4:	6800      	ldr	r0, [r0, #0]
 80094a6:	f001 f87d 	bl	800a5a4 <USB_WritePMA>
 80094aa:	e227      	b.n	80098fc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80094ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	6a1b      	ldr	r3, [r3, #32]
 80094b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80094bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80094de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80094e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	441a      	add	r2, r3
 8009500:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009532:	b29b      	uxth	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009538:	4413      	add	r3, r2
 800953a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800953c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	00da      	lsls	r2, r3, #3
 800954a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800954c:	4413      	add	r3, r2
 800954e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009558:	b29a      	uxth	r2, r3
 800955a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800955c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800955e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	891b      	ldrh	r3, [r3, #8]
 800956a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800956e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6959      	ldr	r1, [r3, #20]
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957e:	b29b      	uxth	r3, r3
 8009580:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009584:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009588:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800958c:	6800      	ldr	r0, [r0, #0]
 800958e:	f001 f809 	bl	800a5a4 <USB_WritePMA>
 8009592:	e1b3      	b.n	80098fc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6a1a      	ldr	r2, [r3, #32]
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80c6 	beq.w	8009766 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80095e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	785b      	ldrb	r3, [r3, #1]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d177      	bne.n	80096e6 <USB_EPStartXfer+0xb18>
 80095f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009606:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009610:	b29b      	uxth	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009616:	4413      	add	r3, r2
 8009618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	00da      	lsls	r2, r3, #3
 8009628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800962a:	4413      	add	r3, r2
 800962c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009630:	667b      	str	r3, [r7, #100]	@ 0x64
 8009632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29b      	uxth	r3, r3
 8009638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800963c:	b29a      	uxth	r2, r3
 800963e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009640:	801a      	strh	r2, [r3, #0]
 8009642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009646:	2b3e      	cmp	r3, #62	@ 0x3e
 8009648:	d921      	bls.n	800968e <USB_EPStartXfer+0xac0>
 800964a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <USB_EPStartXfer+0xa9c>
 8009660:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009664:	3b01      	subs	r3, #1
 8009666:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800966a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29a      	uxth	r2, r3
 8009670:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009674:	b29b      	uxth	r3, r3
 8009676:	029b      	lsls	r3, r3, #10
 8009678:	b29b      	uxth	r3, r3
 800967a:	4313      	orrs	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009686:	b29a      	uxth	r2, r3
 8009688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800968a:	801a      	strh	r2, [r3, #0]
 800968c:	e050      	b.n	8009730 <USB_EPStartXfer+0xb62>
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10a      	bne.n	80096ac <USB_EPStartXfer+0xade>
 8009696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096a8:	801a      	strh	r2, [r3, #0]
 80096aa:	e041      	b.n	8009730 <USB_EPStartXfer+0xb62>
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b0:	085b      	lsrs	r3, r3, #1
 80096b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <USB_EPStartXfer+0xafe>
 80096c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80096c6:	3301      	adds	r3, #1
 80096c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	029b      	lsls	r3, r3, #10
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4313      	orrs	r3, r2
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e024      	b.n	8009730 <USB_EPStartXfer+0xb62>
 80096e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d11c      	bne.n	8009730 <USB_EPStartXfer+0xb62>
 80096f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009704:	b29b      	uxth	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800970a:	4413      	add	r3, r2
 800970c:	673b      	str	r3, [r7, #112]	@ 0x70
 800970e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	00da      	lsls	r2, r3, #3
 800971c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800971e:	4413      	add	r3, r2
 8009720:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009724:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972a:	b29a      	uxth	r2, r3
 800972c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800972e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	895b      	ldrh	r3, [r3, #10]
 800973c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6959      	ldr	r1, [r3, #20]
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009750:	b29b      	uxth	r3, r3
 8009752:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009756:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800975a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800975e:	6800      	ldr	r0, [r0, #0]
 8009760:	f000 ff20 	bl	800a5a4 <USB_WritePMA>
 8009764:	e0ca      	b.n	80098fc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d177      	bne.n	8009866 <USB_EPStartXfer+0xc98>
 8009776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009790:	b29b      	uxth	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009796:	4413      	add	r3, r2
 8009798:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800979a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	00da      	lsls	r2, r3, #3
 80097a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80097aa:	4413      	add	r3, r2
 80097ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097bc:	b29a      	uxth	r2, r3
 80097be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097c0:	801a      	strh	r2, [r3, #0]
 80097c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80097c8:	d921      	bls.n	800980e <USB_EPStartXfer+0xc40>
 80097ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ce:	095b      	lsrs	r3, r3, #5
 80097d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <USB_EPStartXfer+0xc1c>
 80097e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80097e4:	3b01      	subs	r3, #1
 80097e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80097ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ec:	881b      	ldrh	r3, [r3, #0]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	029b      	lsls	r3, r3, #10
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4313      	orrs	r3, r2
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009806:	b29a      	uxth	r2, r3
 8009808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800980a:	801a      	strh	r2, [r3, #0]
 800980c:	e05c      	b.n	80098c8 <USB_EPStartXfer+0xcfa>
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10a      	bne.n	800982c <USB_EPStartXfer+0xc5e>
 8009816:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009824:	b29a      	uxth	r2, r3
 8009826:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009828:	801a      	strh	r2, [r3, #0]
 800982a:	e04d      	b.n	80098c8 <USB_EPStartXfer+0xcfa>
 800982c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <USB_EPStartXfer+0xc7e>
 8009842:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009846:	3301      	adds	r3, #1
 8009848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800984c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29a      	uxth	r2, r3
 8009852:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009856:	b29b      	uxth	r3, r3
 8009858:	029b      	lsls	r3, r3, #10
 800985a:	b29b      	uxth	r3, r3
 800985c:	4313      	orrs	r3, r2
 800985e:	b29a      	uxth	r2, r3
 8009860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	e030      	b.n	80098c8 <USB_EPStartXfer+0xcfa>
 8009866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d128      	bne.n	80098c8 <USB_EPStartXfer+0xcfa>
 8009876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009892:	b29b      	uxth	r3, r3
 8009894:	461a      	mov	r2, r3
 8009896:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800989a:	4413      	add	r3, r2
 800989c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	00da      	lsls	r2, r3, #3
 80098ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098b2:	4413      	add	r3, r2
 80098b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80098c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80098c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	891b      	ldrh	r3, [r3, #8]
 80098d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6959      	ldr	r1, [r3, #20]
 80098e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80098f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80098f6:	6800      	ldr	r0, [r0, #0]
 80098f8:	f000 fe54 	bl	800a5a4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80098fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800991e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009922:	817b      	strh	r3, [r7, #10]
 8009924:	897b      	ldrh	r3, [r7, #10]
 8009926:	f083 0310 	eor.w	r3, r3, #16
 800992a:	817b      	strh	r3, [r7, #10]
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	f083 0320 	eor.w	r3, r3, #32
 8009932:	817b      	strh	r3, [r7, #10]
 8009934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	441a      	add	r2, r3
 800994e:	897b      	ldrh	r3, [r7, #10]
 8009950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800995c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009960:	b29b      	uxth	r3, r3
 8009962:	8013      	strh	r3, [r2, #0]
 8009964:	f000 bcde 	b.w	800a324 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	7b1b      	ldrb	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f040 80bb 	bne.w	8009af0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800997a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	699a      	ldr	r2, [r3, #24]
 8009986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	429a      	cmp	r2, r3
 8009994:	d917      	bls.n	80099c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80099a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	619a      	str	r2, [r3, #24]
 80099c4:	e00e      	b.n	80099e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80099c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80099d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2200      	movs	r2, #0
 80099e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80099e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80099f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a08:	4413      	add	r3, r2
 8009a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	00da      	lsls	r2, r3, #3
 8009a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a20:	4413      	add	r3, r2
 8009a22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a3c:	801a      	strh	r2, [r3, #0]
 8009a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a42:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a44:	d924      	bls.n	8009a90 <USB_EPStartXfer+0xec2>
 8009a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a4a:	095b      	lsrs	r3, r3, #5
 8009a4c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a54:	f003 031f 	and.w	r3, r3, #31
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <USB_EPStartXfer+0xe98>
 8009a5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a60:	3b01      	subs	r3, #1
 8009a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	029b      	lsls	r3, r3, #10
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	f000 bc10 	b.w	800a2b0 <USB_EPStartXfer+0x16e2>
 8009a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10c      	bne.n	8009ab2 <USB_EPStartXfer+0xee4>
 8009a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	e3fe      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <USB_EPStartXfer+0xf04>
 8009ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009acc:	3301      	adds	r3, #1
 8009ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	029b      	lsls	r3, r3, #10
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	e3df      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	78db      	ldrb	r3, [r3, #3]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	f040 8218 	bne.w	8009f32 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f040 809d 	bne.w	8009c4e <USB_EPStartXfer+0x1080>
 8009b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	461a      	mov	r2, r3
 8009b34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b38:	4413      	add	r3, r2
 8009b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	00da      	lsls	r2, r3, #3
 8009b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b50:	4413      	add	r3, r2
 8009b52:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b7c:	d92b      	bls.n	8009bd6 <USB_EPStartXfer+0x1008>
 8009b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	095b      	lsrs	r3, r3, #5
 8009b8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 031f 	and.w	r3, r3, #31
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d104      	bne.n	8009bae <USB_EPStartXfer+0xfe0>
 8009ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009bae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	029b      	lsls	r3, r3, #10
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	e070      	b.n	8009cb8 <USB_EPStartXfer+0x10ea>
 8009bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10c      	bne.n	8009c00 <USB_EPStartXfer+0x1032>
 8009be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bfc:	801a      	strh	r2, [r3, #0]
 8009bfe:	e05b      	b.n	8009cb8 <USB_EPStartXfer+0x10ea>
 8009c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	085b      	lsrs	r3, r3, #1
 8009c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <USB_EPStartXfer+0x1062>
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	029b      	lsls	r3, r3, #10
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	4313      	orrs	r3, r2
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c4a:	801a      	strh	r2, [r3, #0]
 8009c4c:	e034      	b.n	8009cb8 <USB_EPStartXfer+0x10ea>
 8009c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	785b      	ldrb	r3, [r3, #1]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d12c      	bne.n	8009cb8 <USB_EPStartXfer+0x10ea>
 8009c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c82:	4413      	add	r3, r2
 8009c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	00da      	lsls	r2, r3, #3
 8009c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f040 809d 	bne.w	8009e12 <USB_EPStartXfer+0x1244>
 8009cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	00da      	lsls	r2, r3, #3
 8009d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d14:	4413      	add	r3, r2
 8009d16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d30:	801a      	strh	r2, [r3, #0]
 8009d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d40:	d92b      	bls.n	8009d9a <USB_EPStartXfer+0x11cc>
 8009d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <USB_EPStartXfer+0x11a4>
 8009d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	029b      	lsls	r3, r3, #10
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	4313      	orrs	r3, r2
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	e069      	b.n	8009e6e <USB_EPStartXfer+0x12a0>
 8009d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10c      	bne.n	8009dc4 <USB_EPStartXfer+0x11f6>
 8009daa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	e054      	b.n	8009e6e <USB_EPStartXfer+0x12a0>
 8009dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	085b      	lsrs	r3, r3, #1
 8009dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <USB_EPStartXfer+0x1226>
 8009dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dee:	3301      	adds	r3, #1
 8009df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	029b      	lsls	r3, r3, #10
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	4313      	orrs	r3, r2
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e0e:	801a      	strh	r2, [r3, #0]
 8009e10:	e02d      	b.n	8009e6e <USB_EPStartXfer+0x12a0>
 8009e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d125      	bne.n	8009e6e <USB_EPStartXfer+0x12a0>
 8009e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e38:	4413      	add	r3, r2
 8009e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	00da      	lsls	r2, r3, #3
 8009e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009e50:	4413      	add	r3, r2
 8009e52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009e6c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 8218 	beq.w	800a2b0 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ea0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d005      	beq.n	8009eb8 <USB_EPStartXfer+0x12ea>
 8009eac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10d      	bne.n	8009ed4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009eb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f040 81f5 	bne.w	800a2b0 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009ec6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f040 81ee 	bne.w	800a2b0 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009efa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	441a      	add	r2, r3
 8009f18:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	8013      	strh	r3, [r2, #0]
 8009f30:	e1be      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	78db      	ldrb	r3, [r3, #3]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	f040 81b4 	bne.w	800a2ac <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	699a      	ldr	r2, [r3, #24]
 8009f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d917      	bls.n	8009f90 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f80:	1ad2      	subs	r2, r2, r3
 8009f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	619a      	str	r2, [r3, #24]
 8009f8e:	e00e      	b.n	8009fae <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2200      	movs	r2, #0
 8009fac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 8085 	bne.w	800a0ca <USB_EPStartXfer+0x14fc>
 8009fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	00da      	lsls	r2, r3, #3
 8009ff8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a012:	b29a      	uxth	r2, r3
 800a014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a018:	801a      	strh	r2, [r3, #0]
 800a01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a020:	d923      	bls.n	800a06a <USB_EPStartXfer+0x149c>
 800a022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a026:	095b      	lsrs	r3, r3, #5
 800a028:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	f003 031f 	and.w	r3, r3, #31
 800a034:	2b00      	cmp	r3, #0
 800a036:	d104      	bne.n	800a042 <USB_EPStartXfer+0x1474>
 800a038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a03c:	3b01      	subs	r3, #1
 800a03e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29a      	uxth	r2, r3
 800a04a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a04e:	b29b      	uxth	r3, r3
 800a050:	029b      	lsls	r3, r3, #10
 800a052:	b29b      	uxth	r3, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a05c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a060:	b29a      	uxth	r2, r3
 800a062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a066:	801a      	strh	r2, [r3, #0]
 800a068:	e060      	b.n	800a12c <USB_EPStartXfer+0x155e>
 800a06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10c      	bne.n	800a08c <USB_EPStartXfer+0x14be>
 800a072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a082:	b29a      	uxth	r2, r3
 800a084:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a088:	801a      	strh	r2, [r3, #0]
 800a08a:	e04f      	b.n	800a12c <USB_EPStartXfer+0x155e>
 800a08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a090:	085b      	lsrs	r3, r3, #1
 800a092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09a:	f003 0301 	and.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d004      	beq.n	800a0ac <USB_EPStartXfer+0x14de>
 800a0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a0ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	029b      	lsls	r3, r3, #10
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a0c6:	801a      	strh	r2, [r3, #0]
 800a0c8:	e030      	b.n	800a12c <USB_EPStartXfer+0x155e>
 800a0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	785b      	ldrb	r3, [r3, #1]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d128      	bne.n	800a12c <USB_EPStartXfer+0x155e>
 800a0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a0fe:	4413      	add	r3, r2
 800a100:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	00da      	lsls	r2, r3, #3
 800a112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a116:	4413      	add	r3, r2
 800a118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a11c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	b29a      	uxth	r2, r3
 800a126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a12a:	801a      	strh	r2, [r3, #0]
 800a12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 8085 	bne.w	800a256 <USB_EPStartXfer+0x1688>
 800a14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a15a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a15e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a168:	b29b      	uxth	r3, r3
 800a16a:	461a      	mov	r2, r3
 800a16c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a170:	4413      	add	r3, r2
 800a172:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	00da      	lsls	r2, r3, #3
 800a184:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a188:	4413      	add	r3, r2
 800a18a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a18e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1ac:	d923      	bls.n	800a1f6 <USB_EPStartXfer+0x1628>
 800a1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b2:	095b      	lsrs	r3, r3, #5
 800a1b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1bc:	f003 031f 	and.w	r3, r3, #31
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <USB_EPStartXfer+0x1600>
 800a1c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e05c      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10c      	bne.n	800a218 <USB_EPStartXfer+0x164a>
 800a1fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a20a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a20e:	b29a      	uxth	r2, r3
 800a210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a214:	801a      	strh	r2, [r3, #0]
 800a216:	e04b      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
 800a218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21c:	085b      	lsrs	r3, r3, #1
 800a21e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <USB_EPStartXfer+0x166a>
 800a22e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a232:	3301      	adds	r3, #1
 800a234:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a238:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a244:	b29b      	uxth	r3, r3
 800a246:	029b      	lsls	r3, r3, #10
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a252:	801a      	strh	r2, [r3, #0]
 800a254:	e02c      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
 800a256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d124      	bne.n	800a2b0 <USB_EPStartXfer+0x16e2>
 800a266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a274:	b29b      	uxth	r3, r3
 800a276:	461a      	mov	r2, r3
 800a278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a27c:	4413      	add	r3, r2
 800a27e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a286:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	00da      	lsls	r2, r3, #3
 800a290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a294:	4413      	add	r3, r2
 800a296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a29a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	e001      	b.n	800a2b0 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e03a      	b.n	800a326 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	4413      	add	r3, r2
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a2e2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a2ee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	441a      	add	r2, r3
 800a30c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a320:	b29b      	uxth	r3, r3
 800a322:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	785b      	ldrb	r3, [r3, #1]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d020      	beq.n	800a384 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a358:	81bb      	strh	r3, [r7, #12]
 800a35a:	89bb      	ldrh	r3, [r7, #12]
 800a35c:	f083 0310 	eor.w	r3, r3, #16
 800a360:	81bb      	strh	r3, [r7, #12]
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	441a      	add	r2, r3
 800a36c:	89bb      	ldrh	r3, [r7, #12]
 800a36e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a372:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a37e:	b29b      	uxth	r3, r3
 800a380:	8013      	strh	r3, [r2, #0]
 800a382:	e01f      	b.n	800a3c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a39a:	81fb      	strh	r3, [r7, #14]
 800a39c:	89fb      	ldrh	r3, [r7, #14]
 800a39e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3a2:	81fb      	strh	r3, [r7, #14]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	441a      	add	r2, r3
 800a3ae:	89fb      	ldrh	r3, [r7, #14]
 800a3b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b087      	sub	sp, #28
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	7b1b      	ldrb	r3, [r3, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f040 809d 	bne.w	800a520 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d04c      	beq.n	800a488 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	4413      	add	r3, r2
 800a3f8:	881b      	ldrh	r3, [r3, #0]
 800a3fa:	823b      	strh	r3, [r7, #16]
 800a3fc:	8a3b      	ldrh	r3, [r7, #16]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01b      	beq.n	800a43e <USB_EPClearStall+0x6c>
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41c:	81fb      	strh	r3, [r7, #14]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	441a      	add	r2, r3
 800a428:	89fb      	ldrh	r3, [r7, #14]
 800a42a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a42e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a432:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a436:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	78db      	ldrb	r3, [r3, #3]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d06c      	beq.n	800a520 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	4413      	add	r3, r2
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a45c:	81bb      	strh	r3, [r7, #12]
 800a45e:	89bb      	ldrh	r3, [r7, #12]
 800a460:	f083 0320 	eor.w	r3, r3, #32
 800a464:	81bb      	strh	r3, [r7, #12]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	441a      	add	r2, r3
 800a470:	89bb      	ldrh	r3, [r7, #12]
 800a472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a47a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a482:	b29b      	uxth	r3, r3
 800a484:	8013      	strh	r3, [r2, #0]
 800a486:	e04b      	b.n	800a520 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	82fb      	strh	r3, [r7, #22]
 800a496:	8afb      	ldrh	r3, [r7, #22]
 800a498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d01b      	beq.n	800a4d8 <USB_EPClearStall+0x106>
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b6:	82bb      	strh	r3, [r7, #20]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	441a      	add	r2, r3
 800a4c2:	8abb      	ldrh	r3, [r7, #20]
 800a4c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	4413      	add	r3, r2
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ee:	827b      	strh	r3, [r7, #18]
 800a4f0:	8a7b      	ldrh	r3, [r7, #18]
 800a4f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a4f6:	827b      	strh	r3, [r7, #18]
 800a4f8:	8a7b      	ldrh	r3, [r7, #18]
 800a4fa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a4fe:	827b      	strh	r3, [r7, #18]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	441a      	add	r2, r3
 800a50a:	8a7b      	ldrh	r3, [r7, #18]
 800a50c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	371c      	adds	r7, #28
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a52e:	b480      	push	{r7}
 800a530:	b083      	sub	sp, #12
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a53a:	78fb      	ldrb	r3, [r7, #3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2280      	movs	r2, #128	@ 0x80
 800a544:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a564:	b29b      	uxth	r3, r3
 800a566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a56a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a584:	b480      	push	{r7}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a592:	b29b      	uxth	r3, r3
 800a594:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a596:	68fb      	ldr	r3, [r7, #12]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3714      	adds	r7, #20
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b08b      	sub	sp, #44	@ 0x2c
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	80fb      	strh	r3, [r7, #6]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a5ba:	88bb      	ldrh	r3, [r7, #4]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5da:	e01b      	b.n	800a614 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	b21a      	sxth	r2, r3
 800a5ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	b21b      	sxth	r3, r3
 800a5f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	8a7a      	ldrh	r2, [r7, #18]
 800a5fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	3302      	adds	r3, #2
 800a600:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	3301      	adds	r3, #1
 800a606:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	3301      	adds	r3, #1
 800a60c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	3b01      	subs	r3, #1
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1e0      	bne.n	800a5dc <USB_WritePMA+0x38>
  }
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	372c      	adds	r7, #44	@ 0x2c
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a628:	b480      	push	{r7}
 800a62a:	b08b      	sub	sp, #44	@ 0x2c
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4611      	mov	r1, r2
 800a634:	461a      	mov	r2, r3
 800a636:	460b      	mov	r3, r1
 800a638:	80fb      	strh	r3, [r7, #6]
 800a63a:	4613      	mov	r3, r2
 800a63c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a63e:	88bb      	ldrh	r3, [r7, #4]
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	b29b      	uxth	r3, r3
 800a644:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a64e:	88fa      	ldrh	r2, [r7, #6]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4413      	add	r3, r2
 800a654:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a658:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a65e:	e018      	b.n	800a692 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	b29b      	uxth	r3, r3
 800a666:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	3302      	adds	r3, #2
 800a66c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	b2da      	uxtb	r2, r3
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	3301      	adds	r3, #1
 800a67a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	b2da      	uxtb	r2, r3
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	3301      	adds	r3, #1
 800a68a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	3b01      	subs	r3, #1
 800a690:	627b      	str	r3, [r7, #36]	@ 0x24
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	d1e3      	bne.n	800a660 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a698:	88bb      	ldrh	r3, [r7, #4]
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	701a      	strb	r2, [r3, #0]
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	372c      	adds	r7, #44	@ 0x2c
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a6cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a6d0:	f002 f964 	bl	800c99c <USBD_static_malloc>
 800a6d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d105      	bne.n	800a6e8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e066      	b.n	800a7b6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7c1b      	ldrb	r3, [r3, #16]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d119      	bne.n	800a72c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a6f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	2181      	movs	r1, #129	@ 0x81
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 fff2 	bl	800c6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a70c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a710:	2202      	movs	r2, #2
 800a712:	2101      	movs	r1, #1
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f001 ffe8 	bl	800c6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2210      	movs	r2, #16
 800a726:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800a72a:	e016      	b.n	800a75a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a72c:	2340      	movs	r3, #64	@ 0x40
 800a72e:	2202      	movs	r2, #2
 800a730:	2181      	movs	r1, #129	@ 0x81
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 ffd9 	bl	800c6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a73e:	2340      	movs	r3, #64	@ 0x40
 800a740:	2202      	movs	r2, #2
 800a742:	2101      	movs	r1, #1
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f001 ffd0 	bl	800c6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2210      	movs	r2, #16
 800a756:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a75a:	2308      	movs	r3, #8
 800a75c:	2203      	movs	r2, #3
 800a75e:	2182      	movs	r1, #130	@ 0x82
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 ffc2 	bl	800c6ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	7c1b      	ldrb	r3, [r3, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d109      	bne.n	800a7a4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a79a:	2101      	movs	r1, #1
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f002 f893 	bl	800c8c8 <USBD_LL_PrepareReceive>
 800a7a2:	e007      	b.n	800a7b4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7aa:	2340      	movs	r3, #64	@ 0x40
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f002 f88a 	bl	800c8c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a7ca:	2181      	movs	r1, #129	@ 0x81
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f001 ffb2 	bl	800c736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a7d8:	2101      	movs	r1, #1
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f001 ffab 	bl	800c736 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a7e8:	2182      	movs	r1, #130	@ 0x82
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 ffa3 	bl	800c736 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00e      	beq.n	800a828 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 f8cc 	bl	800c9b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a844:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a846:	2300      	movs	r3, #0
 800a848:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a84e:	2300      	movs	r3, #0
 800a850:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a858:	2303      	movs	r3, #3
 800a85a:	e0af      	b.n	800a9bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a864:	2b00      	cmp	r3, #0
 800a866:	d03f      	beq.n	800a8e8 <USBD_CDC_Setup+0xb4>
 800a868:	2b20      	cmp	r3, #32
 800a86a:	f040 809f 	bne.w	800a9ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	88db      	ldrh	r3, [r3, #6]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d02e      	beq.n	800a8d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	b25b      	sxtb	r3, r3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	da16      	bge.n	800a8ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a88c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	88d2      	ldrh	r2, [r2, #6]
 800a892:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	88db      	ldrh	r3, [r3, #6]
 800a898:	2b07      	cmp	r3, #7
 800a89a:	bf28      	it	cs
 800a89c:	2307      	movcs	r3, #7
 800a89e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	89fa      	ldrh	r2, [r7, #14]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f001 facd 	bl	800be46 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a8ac:	e085      	b.n	800a9ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	785a      	ldrb	r2, [r3, #1]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	88db      	ldrh	r3, [r3, #6]
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a8c4:	6939      	ldr	r1, [r7, #16]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	88db      	ldrh	r3, [r3, #6]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 fae6 	bl	800be9e <USBD_CtlPrepareRx>
      break;
 800a8d2:	e072      	b.n	800a9ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	7850      	ldrb	r0, [r2, #1]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	4798      	blx	r3
      break;
 800a8e6:	e068      	b.n	800a9ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d852      	bhi.n	800a996 <USBD_CDC_Setup+0x162>
 800a8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f8 <USBD_CDC_Setup+0xc4>)
 800a8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f6:	bf00      	nop
 800a8f8:	0800a929 	.word	0x0800a929
 800a8fc:	0800a9a5 	.word	0x0800a9a5
 800a900:	0800a997 	.word	0x0800a997
 800a904:	0800a997 	.word	0x0800a997
 800a908:	0800a997 	.word	0x0800a997
 800a90c:	0800a997 	.word	0x0800a997
 800a910:	0800a997 	.word	0x0800a997
 800a914:	0800a997 	.word	0x0800a997
 800a918:	0800a997 	.word	0x0800a997
 800a91c:	0800a997 	.word	0x0800a997
 800a920:	0800a953 	.word	0x0800a953
 800a924:	0800a97d 	.word	0x0800a97d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b03      	cmp	r3, #3
 800a932:	d107      	bne.n	800a944 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a934:	f107 030a 	add.w	r3, r7, #10
 800a938:	2202      	movs	r2, #2
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f001 fa82 	bl	800be46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a942:	e032      	b.n	800a9aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a944:	6839      	ldr	r1, [r7, #0]
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f001 fa0c 	bl	800bd64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a94c:	2303      	movs	r3, #3
 800a94e:	75fb      	strb	r3, [r7, #23]
          break;
 800a950:	e02b      	b.n	800a9aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d107      	bne.n	800a96e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a95e:	f107 030d 	add.w	r3, r7, #13
 800a962:	2201      	movs	r2, #1
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 fa6d 	bl	800be46 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a96c:	e01d      	b.n	800a9aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 f9f7 	bl	800bd64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a976:	2303      	movs	r3, #3
 800a978:	75fb      	strb	r3, [r7, #23]
          break;
 800a97a:	e016      	b.n	800a9aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b03      	cmp	r3, #3
 800a986:	d00f      	beq.n	800a9a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a988:	6839      	ldr	r1, [r7, #0]
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 f9ea 	bl	800bd64 <USBD_CtlError>
            ret = USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a994:	e008      	b.n	800a9a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f9e3 	bl	800bd64 <USBD_CtlError>
          ret = USBD_FAIL;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9a2:	e002      	b.n	800a9aa <USBD_CDC_Setup+0x176>
          break;
 800a9a4:	bf00      	nop
 800a9a6:	e008      	b.n	800a9ba <USBD_CDC_Setup+0x186>
          break;
 800a9a8:	bf00      	nop
      }
      break;
 800a9aa:	e006      	b.n	800a9ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f9d8 	bl	800bd64 <USBD_CtlError>
      ret = USBD_FAIL;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800a9d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	e04f      	b.n	800aa86 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a9ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a9ee:	78fa      	ldrb	r2, [r7, #3]
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	440b      	add	r3, r1
 800a9fc:	3318      	adds	r3, #24
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d029      	beq.n	800aa58 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800aa04:	78fa      	ldrb	r2, [r7, #3]
 800aa06:	6879      	ldr	r1, [r7, #4]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
 800aa12:	3318      	adds	r3, #24
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	78f9      	ldrb	r1, [r7, #3]
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	4403      	add	r3, r0
 800aa24:	3320      	adds	r3, #32
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa2c:	fb01 f303 	mul.w	r3, r1, r3
 800aa30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d110      	bne.n	800aa58 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	440b      	add	r3, r1
 800aa44:	3318      	adds	r3, #24
 800aa46:	2200      	movs	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aa4a:	78f9      	ldrb	r1, [r7, #3]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2200      	movs	r2, #0
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 ff18 	bl	800c886 <USBD_LL_Transmit>
 800aa56:	e015      	b.n	800aa84 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b084      	sub	sp, #16
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	460b      	mov	r3, r1
 800aa98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e015      	b.n	800aadc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	4619      	mov	r1, r3
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 ff28 	bl	800c90a <USBD_LL_GetRxDataSize>
 800aaba:	4602      	mov	r2, r0
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aad6:	4611      	mov	r1, r2
 800aad8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aaf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d101      	bne.n	800aafe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e01a      	b.n	800ab34 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d014      	beq.n	800ab32 <USBD_CDC_EP0_RxReady+0x4e>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ab0e:	2bff      	cmp	r3, #255	@ 0xff
 800ab10:	d00f      	beq.n	800ab32 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800ab20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ab28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	22ff      	movs	r2, #255	@ 0xff
 800ab2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2243      	movs	r2, #67	@ 0x43
 800ab48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ab4a:	4b03      	ldr	r3, [pc, #12]	@ (800ab58 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	20000098 	.word	0x20000098

0800ab5c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2243      	movs	r2, #67	@ 0x43
 800ab68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	@ (800ab78 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr
 800ab78:	20000054 	.word	0x20000054

0800ab7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2243      	movs	r2, #67	@ 0x43
 800ab88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ab8a:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	200000dc 	.word	0x200000dc

0800ab9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	220a      	movs	r2, #10
 800aba8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800abaa:	4b03      	ldr	r3, [pc, #12]	@ (800abb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000010 	.word	0x20000010

0800abbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800abcc:	2303      	movs	r3, #3
 800abce:	e004      	b.n	800abda <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b087      	sub	sp, #28
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800abf8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e008      	b.n	800ac16 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac32:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e004      	b.n	800ac48 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ac64:	2301      	movs	r3, #1
 800ac66:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e01a      	b.n	800acac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d114      	bne.n	800acaa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ac9e:	2181      	movs	r1, #129	@ 0x81
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 fdf0 	bl	800c886 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800acce:	2303      	movs	r3, #3
 800acd0:	e016      	b.n	800ad00 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7c1b      	ldrb	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ace0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ace4:	2101      	movs	r1, #1
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f001 fdee 	bl	800c8c8 <USBD_LL_PrepareReceive>
 800acec:	e007      	b.n	800acfe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acf4:	2340      	movs	r3, #64	@ 0x40
 800acf6:	2101      	movs	r1, #1
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f001 fde5 	bl	800c8c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	4613      	mov	r3, r2
 800ad14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e01f      	b.n	800ad60 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	79fa      	ldrb	r2, [r7, #7]
 800ad52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f001 fc4d 	bl	800c5f4 <USBD_LL_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad72:	2300      	movs	r3, #0
 800ad74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e016      	b.n	800adae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	f107 020e 	add.w	r2, r7, #14
 800ada0:	4610      	mov	r0, r2
 800ada2:	4798      	blx	r3
 800ada4:	4602      	mov	r2, r0
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f001 fc78 	bl	800c6b4 <USBD_LL_Start>
 800adc4:	4603      	mov	r3, r0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}

0800adce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	370c      	adds	r7, #12
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	460b      	mov	r3, r1
 800adee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	4611      	mov	r1, r2
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d007      	beq.n	800ae42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	78fa      	ldrb	r2, [r7, #3]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	4798      	blx	r3
  }

  return USBD_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 ff46 	bl	800bcf0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ae72:	461a      	mov	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ae80:	f003 031f 	and.w	r3, r3, #31
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d01a      	beq.n	800aebe <USBD_LL_SetupStage+0x72>
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d822      	bhi.n	800aed2 <USBD_LL_SetupStage+0x86>
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <USBD_LL_SetupStage+0x4a>
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d00a      	beq.n	800aeaa <USBD_LL_SetupStage+0x5e>
 800ae94:	e01d      	b.n	800aed2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9ee 	bl	800b280 <USBD_StdDevReq>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
      break;
 800aea8:	e020      	b.n	800aeec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa52 	bl	800b35c <USBD_StdItfReq>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	e016      	b.n	800aeec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800aec4:	4619      	mov	r1, r3
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa91 	bl	800b3ee <USBD_StdEPReq>
 800aecc:	4603      	mov	r3, r0
 800aece:	73fb      	strb	r3, [r7, #15]
      break;
 800aed0:	e00c      	b.n	800aeec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800aed8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 fc47 	bl	800c774 <USBD_LL_StallEP>
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeea:	bf00      	nop
  }

  return ret;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	460b      	mov	r3, r1
 800af00:	607a      	str	r2, [r7, #4]
 800af02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800af04:	7afb      	ldrb	r3, [r7, #11]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d138      	bne.n	800af7c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800af10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800af18:	2b03      	cmp	r3, #3
 800af1a:	d14a      	bne.n	800afb2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d913      	bls.n	800af50 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	1ad2      	subs	r2, r2, r3
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	4293      	cmp	r3, r2
 800af40:	bf28      	it	cs
 800af42:	4613      	movcs	r3, r2
 800af44:	461a      	mov	r2, r3
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	68f8      	ldr	r0, [r7, #12]
 800af4a:	f000 ffc5 	bl	800bed8 <USBD_CtlContinueRx>
 800af4e:	e030      	b.n	800afb2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af56:	b2db      	uxtb	r3, r3
 800af58:	2b03      	cmp	r3, #3
 800af5a:	d10b      	bne.n	800af74 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d005      	beq.n	800af74 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 ffc0 	bl	800befa <USBD_CtlSendStatus>
 800af7a:	e01a      	b.n	800afb2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b03      	cmp	r3, #3
 800af86:	d114      	bne.n	800afb2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00e      	beq.n	800afb2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	7afa      	ldrb	r2, [r7, #11]
 800af9e:	4611      	mov	r1, r2
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	4798      	blx	r3
 800afa4:	4603      	mov	r3, r0
 800afa6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800afa8:	7dfb      	ldrb	r3, [r7, #23]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	e000      	b.n	800afb4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	460b      	mov	r3, r1
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800afca:	7afb      	ldrb	r3, [r7, #11]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d16b      	bne.n	800b0a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3314      	adds	r3, #20
 800afd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d156      	bne.n	800b08e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d914      	bls.n	800b016 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	689a      	ldr	r2, [r3, #8]
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	1ad2      	subs	r2, r2, r3
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	461a      	mov	r2, r3
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 ff3a 	bl	800be7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b008:	2300      	movs	r3, #0
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f001 fc5a 	bl	800c8c8 <USBD_LL_PrepareReceive>
 800b014:	e03b      	b.n	800b08e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d11c      	bne.n	800b05c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	685a      	ldr	r2, [r3, #4]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d316      	bcc.n	800b05c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b038:	429a      	cmp	r2, r3
 800b03a:	d20f      	bcs.n	800b05c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b03c:	2200      	movs	r2, #0
 800b03e:	2100      	movs	r1, #0
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 ff1b 	bl	800be7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b04e:	2300      	movs	r3, #0
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f001 fc37 	bl	800c8c8 <USBD_LL_PrepareReceive>
 800b05a:	e018      	b.n	800b08e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b03      	cmp	r3, #3
 800b066:	d10b      	bne.n	800b080 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b080:	2180      	movs	r1, #128	@ 0x80
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f001 fb76 	bl	800c774 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 ff49 	bl	800bf20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b094:	2b01      	cmp	r3, #1
 800b096:	d122      	bne.n	800b0de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fe98 	bl	800adce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b0a6:	e01a      	b.n	800b0de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b03      	cmp	r3, #3
 800b0b2:	d114      	bne.n	800b0de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ba:	695b      	ldr	r3, [r3, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00e      	beq.n	800b0de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	7afa      	ldrb	r2, [r7, #11]
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	4798      	blx	r3
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	e000      	b.n	800b0e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b118:	2303      	movs	r3, #3
 800b11a:	e02f      	b.n	800b17c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00f      	beq.n	800b146 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d009      	beq.n	800b146 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	6852      	ldr	r2, [r2, #4]
 800b13e:	b2d2      	uxtb	r2, r2
 800b140:	4611      	mov	r1, r2
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b146:	2340      	movs	r3, #64	@ 0x40
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 facc 	bl	800c6ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2240      	movs	r2, #64	@ 0x40
 800b15e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b162:	2340      	movs	r3, #64	@ 0x40
 800b164:	2200      	movs	r2, #0
 800b166:	2180      	movs	r1, #128	@ 0x80
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 fabe 	bl	800c6ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2201      	movs	r2, #1
 800b172:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2240      	movs	r2, #64	@ 0x40
 800b178:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2204      	movs	r2, #4
 800b1be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d106      	bne.n	800b1f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b212:	2303      	movs	r3, #3
 800b214:	e012      	b.n	800b23c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d10b      	bne.n	800b23a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d005      	beq.n	800b23a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b244:	b480      	push	{r7}
 800b246:	b087      	sub	sp, #28
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	781b      	ldrb	r3, [r3, #0]
 800b254:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	3301      	adds	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b262:	8a3b      	ldrh	r3, [r7, #16]
 800b264:	021b      	lsls	r3, r3, #8
 800b266:	b21a      	sxth	r2, r3
 800b268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	b21b      	sxth	r3, r3
 800b270:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b272:	89fb      	ldrh	r3, [r7, #14]
}
 800b274:	4618      	mov	r0, r3
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b296:	2b40      	cmp	r3, #64	@ 0x40
 800b298:	d005      	beq.n	800b2a6 <USBD_StdDevReq+0x26>
 800b29a:	2b40      	cmp	r3, #64	@ 0x40
 800b29c:	d853      	bhi.n	800b346 <USBD_StdDevReq+0xc6>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <USBD_StdDevReq+0x3a>
 800b2a2:	2b20      	cmp	r3, #32
 800b2a4:	d14f      	bne.n	800b346 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	4798      	blx	r3
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b8:	e04a      	b.n	800b350 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	785b      	ldrb	r3, [r3, #1]
 800b2be:	2b09      	cmp	r3, #9
 800b2c0:	d83b      	bhi.n	800b33a <USBD_StdDevReq+0xba>
 800b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <USBD_StdDevReq+0x48>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b31d 	.word	0x0800b31d
 800b2cc:	0800b331 	.word	0x0800b331
 800b2d0:	0800b33b 	.word	0x0800b33b
 800b2d4:	0800b327 	.word	0x0800b327
 800b2d8:	0800b33b 	.word	0x0800b33b
 800b2dc:	0800b2fb 	.word	0x0800b2fb
 800b2e0:	0800b2f1 	.word	0x0800b2f1
 800b2e4:	0800b33b 	.word	0x0800b33b
 800b2e8:	0800b313 	.word	0x0800b313
 800b2ec:	0800b305 	.word	0x0800b305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b2f0:	6839      	ldr	r1, [r7, #0]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f9de 	bl	800b6b4 <USBD_GetDescriptor>
          break;
 800b2f8:	e024      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fb6d 	bl	800b9dc <USBD_SetAddress>
          break;
 800b302:	e01f      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fbac 	bl	800ba64 <USBD_SetConfig>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73fb      	strb	r3, [r7, #15]
          break;
 800b310:	e018      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fc4b 	bl	800bbb0 <USBD_GetConfig>
          break;
 800b31a:	e013      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fc7c 	bl	800bc1c <USBD_GetStatus>
          break;
 800b324:	e00e      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b326:	6839      	ldr	r1, [r7, #0]
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fcab 	bl	800bc84 <USBD_SetFeature>
          break;
 800b32e:	e009      	b.n	800b344 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fcba 	bl	800bcac <USBD_ClrFeature>
          break;
 800b338:	e004      	b.n	800b344 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fd11 	bl	800bd64 <USBD_CtlError>
          break;
 800b342:	bf00      	nop
      }
      break;
 800b344:	e004      	b.n	800b350 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b346:	6839      	ldr	r1, [r7, #0]
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fd0b 	bl	800bd64 <USBD_CtlError>
      break;
 800b34e:	bf00      	nop
  }

  return ret;
 800b350:	7bfb      	ldrb	r3, [r7, #15]
}
 800b352:	4618      	mov	r0, r3
 800b354:	3710      	adds	r7, #16
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop

0800b35c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b372:	2b40      	cmp	r3, #64	@ 0x40
 800b374:	d005      	beq.n	800b382 <USBD_StdItfReq+0x26>
 800b376:	2b40      	cmp	r3, #64	@ 0x40
 800b378:	d82f      	bhi.n	800b3da <USBD_StdItfReq+0x7e>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <USBD_StdItfReq+0x26>
 800b37e:	2b20      	cmp	r3, #32
 800b380:	d12b      	bne.n	800b3da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d81d      	bhi.n	800b3cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	889b      	ldrh	r3, [r3, #4]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b01      	cmp	r3, #1
 800b398:	d813      	bhi.n	800b3c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	88db      	ldrh	r3, [r3, #6]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d110      	bne.n	800b3d6 <USBD_StdItfReq+0x7a>
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d10d      	bne.n	800b3d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fd9d 	bl	800befa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b3c0:	e009      	b.n	800b3d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fccd 	bl	800bd64 <USBD_CtlError>
          break;
 800b3ca:	e004      	b.n	800b3d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fcc8 	bl	800bd64 <USBD_CtlError>
          break;
 800b3d4:	e000      	b.n	800b3d8 <USBD_StdItfReq+0x7c>
          break;
 800b3d6:	bf00      	nop
      }
      break;
 800b3d8:	e004      	b.n	800b3e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b3da:	6839      	ldr	r1, [r7, #0]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fcc1 	bl	800bd64 <USBD_CtlError>
      break;
 800b3e2:	bf00      	nop
  }

  return ret;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b084      	sub	sp, #16
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	889b      	ldrh	r3, [r3, #4]
 800b400:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b40a:	2b40      	cmp	r3, #64	@ 0x40
 800b40c:	d007      	beq.n	800b41e <USBD_StdEPReq+0x30>
 800b40e:	2b40      	cmp	r3, #64	@ 0x40
 800b410:	f200 8145 	bhi.w	800b69e <USBD_StdEPReq+0x2b0>
 800b414:	2b00      	cmp	r3, #0
 800b416:	d00c      	beq.n	800b432 <USBD_StdEPReq+0x44>
 800b418:	2b20      	cmp	r3, #32
 800b41a:	f040 8140 	bne.w	800b69e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	4798      	blx	r3
 800b42c:	4603      	mov	r3, r0
 800b42e:	73fb      	strb	r3, [r7, #15]
      break;
 800b430:	e13a      	b.n	800b6a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	785b      	ldrb	r3, [r3, #1]
 800b436:	2b03      	cmp	r3, #3
 800b438:	d007      	beq.n	800b44a <USBD_StdEPReq+0x5c>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	f300 8129 	bgt.w	800b692 <USBD_StdEPReq+0x2a4>
 800b440:	2b00      	cmp	r3, #0
 800b442:	d07f      	beq.n	800b544 <USBD_StdEPReq+0x156>
 800b444:	2b01      	cmp	r3, #1
 800b446:	d03c      	beq.n	800b4c2 <USBD_StdEPReq+0xd4>
 800b448:	e123      	b.n	800b692 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b02      	cmp	r3, #2
 800b454:	d002      	beq.n	800b45c <USBD_StdEPReq+0x6e>
 800b456:	2b03      	cmp	r3, #3
 800b458:	d016      	beq.n	800b488 <USBD_StdEPReq+0x9a>
 800b45a:	e02c      	b.n	800b4b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00d      	beq.n	800b47e <USBD_StdEPReq+0x90>
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	2b80      	cmp	r3, #128	@ 0x80
 800b466:	d00a      	beq.n	800b47e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b468:	7bbb      	ldrb	r3, [r7, #14]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 f981 	bl	800c774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b472:	2180      	movs	r1, #128	@ 0x80
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 f97d 	bl	800c774 <USBD_LL_StallEP>
 800b47a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b47c:	e020      	b.n	800b4c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fc6f 	bl	800bd64 <USBD_CtlError>
              break;
 800b486:	e01b      	b.n	800b4c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	885b      	ldrh	r3, [r3, #2]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10e      	bne.n	800b4ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b490:	7bbb      	ldrb	r3, [r7, #14]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00b      	beq.n	800b4ae <USBD_StdEPReq+0xc0>
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b80      	cmp	r3, #128	@ 0x80
 800b49a:	d008      	beq.n	800b4ae <USBD_StdEPReq+0xc0>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	88db      	ldrh	r3, [r3, #6]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4a4:	7bbb      	ldrb	r3, [r7, #14]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 f963 	bl	800c774 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fd23 	bl	800befa <USBD_CtlSendStatus>

              break;
 800b4b4:	e004      	b.n	800b4c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fc53 	bl	800bd64 <USBD_CtlError>
              break;
 800b4be:	bf00      	nop
          }
          break;
 800b4c0:	e0ec      	b.n	800b69c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d002      	beq.n	800b4d4 <USBD_StdEPReq+0xe6>
 800b4ce:	2b03      	cmp	r3, #3
 800b4d0:	d016      	beq.n	800b500 <USBD_StdEPReq+0x112>
 800b4d2:	e030      	b.n	800b536 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b4d4:	7bbb      	ldrb	r3, [r7, #14]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00d      	beq.n	800b4f6 <USBD_StdEPReq+0x108>
 800b4da:	7bbb      	ldrb	r3, [r7, #14]
 800b4dc:	2b80      	cmp	r3, #128	@ 0x80
 800b4de:	d00a      	beq.n	800b4f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b4e0:	7bbb      	ldrb	r3, [r7, #14]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 f945 	bl	800c774 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ea:	2180      	movs	r1, #128	@ 0x80
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 f941 	bl	800c774 <USBD_LL_StallEP>
 800b4f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b4f4:	e025      	b.n	800b542 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fc33 	bl	800bd64 <USBD_CtlError>
              break;
 800b4fe:	e020      	b.n	800b542 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	885b      	ldrh	r3, [r3, #2]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11b      	bne.n	800b540 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b508:	7bbb      	ldrb	r3, [r7, #14]
 800b50a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b512:	7bbb      	ldrb	r3, [r7, #14]
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 f94b 	bl	800c7b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fcec 	bl	800befa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	4798      	blx	r3
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b534:	e004      	b.n	800b540 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f000 fc13 	bl	800bd64 <USBD_CtlError>
              break;
 800b53e:	e000      	b.n	800b542 <USBD_StdEPReq+0x154>
              break;
 800b540:	bf00      	nop
          }
          break;
 800b542:	e0ab      	b.n	800b69c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d002      	beq.n	800b556 <USBD_StdEPReq+0x168>
 800b550:	2b03      	cmp	r3, #3
 800b552:	d032      	beq.n	800b5ba <USBD_StdEPReq+0x1cc>
 800b554:	e097      	b.n	800b686 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b556:	7bbb      	ldrb	r3, [r7, #14]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d007      	beq.n	800b56c <USBD_StdEPReq+0x17e>
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	2b80      	cmp	r3, #128	@ 0x80
 800b560:	d004      	beq.n	800b56c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b562:	6839      	ldr	r1, [r7, #0]
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fbfd 	bl	800bd64 <USBD_CtlError>
                break;
 800b56a:	e091      	b.n	800b690 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b56c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b570:	2b00      	cmp	r3, #0
 800b572:	da0b      	bge.n	800b58c <USBD_StdEPReq+0x19e>
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	3310      	adds	r3, #16
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	4413      	add	r3, r2
 800b588:	3304      	adds	r3, #4
 800b58a:	e00b      	b.n	800b5a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b592:	4613      	mov	r3, r2
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	4413      	add	r3, r2
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	3304      	adds	r3, #4
 800b5a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fc47 	bl	800be46 <USBD_CtlSendData>
              break;
 800b5b8:	e06a      	b.n	800b690 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b5ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	da11      	bge.n	800b5e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
 800b5c4:	f003 020f 	and.w	r2, r3, #15
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4413      	add	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3324      	adds	r3, #36	@ 0x24
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d117      	bne.n	800b60c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fbc0 	bl	800bd64 <USBD_CtlError>
                  break;
 800b5e4:	e054      	b.n	800b690 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	f003 020f 	and.w	r2, r3, #15
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fbad 	bl	800bd64 <USBD_CtlError>
                  break;
 800b60a:	e041      	b.n	800b690 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b60c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b610:	2b00      	cmp	r3, #0
 800b612:	da0b      	bge.n	800b62c <USBD_StdEPReq+0x23e>
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	3310      	adds	r3, #16
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	4413      	add	r3, r2
 800b628:	3304      	adds	r3, #4
 800b62a:	e00b      	b.n	800b644 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b632:	4613      	mov	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	4413      	add	r3, r2
 800b642:	3304      	adds	r3, #4
 800b644:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <USBD_StdEPReq+0x264>
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	2b80      	cmp	r3, #128	@ 0x80
 800b650:	d103      	bne.n	800b65a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2200      	movs	r2, #0
 800b656:	601a      	str	r2, [r3, #0]
 800b658:	e00e      	b.n	800b678 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b65a:	7bbb      	ldrb	r3, [r7, #14]
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f001 f8c6 	bl	800c7f0 <USBD_LL_IsStallEP>
 800b664:	4603      	mov	r3, r0
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	e002      	b.n	800b678 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	2200      	movs	r2, #0
 800b676:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2202      	movs	r2, #2
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fbe1 	bl	800be46 <USBD_CtlSendData>
              break;
 800b684:	e004      	b.n	800b690 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 fb6b 	bl	800bd64 <USBD_CtlError>
              break;
 800b68e:	bf00      	nop
          }
          break;
 800b690:	e004      	b.n	800b69c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fb65 	bl	800bd64 <USBD_CtlError>
          break;
 800b69a:	bf00      	nop
      }
      break;
 800b69c:	e004      	b.n	800b6a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fb5f 	bl	800bd64 <USBD_CtlError>
      break;
 800b6a6:	bf00      	nop
  }

  return ret;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	885b      	ldrh	r3, [r3, #2]
 800b6ce:	0a1b      	lsrs	r3, r3, #8
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	2b0e      	cmp	r3, #14
 800b6d6:	f200 8152 	bhi.w	800b97e <USBD_GetDescriptor+0x2ca>
 800b6da:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e0 <USBD_GetDescriptor+0x2c>)
 800b6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e0:	0800b751 	.word	0x0800b751
 800b6e4:	0800b769 	.word	0x0800b769
 800b6e8:	0800b7a9 	.word	0x0800b7a9
 800b6ec:	0800b97f 	.word	0x0800b97f
 800b6f0:	0800b97f 	.word	0x0800b97f
 800b6f4:	0800b91f 	.word	0x0800b91f
 800b6f8:	0800b94b 	.word	0x0800b94b
 800b6fc:	0800b97f 	.word	0x0800b97f
 800b700:	0800b97f 	.word	0x0800b97f
 800b704:	0800b97f 	.word	0x0800b97f
 800b708:	0800b97f 	.word	0x0800b97f
 800b70c:	0800b97f 	.word	0x0800b97f
 800b710:	0800b97f 	.word	0x0800b97f
 800b714:	0800b97f 	.word	0x0800b97f
 800b718:	0800b71d 	.word	0x0800b71d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b722:	69db      	ldr	r3, [r3, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00b      	beq.n	800b740 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b72e:	69db      	ldr	r3, [r3, #28]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	7c12      	ldrb	r2, [r2, #16]
 800b734:	f107 0108 	add.w	r1, r7, #8
 800b738:	4610      	mov	r0, r2
 800b73a:	4798      	blx	r3
 800b73c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b73e:	e126      	b.n	800b98e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fb0e 	bl	800bd64 <USBD_CtlError>
        err++;
 800b748:	7afb      	ldrb	r3, [r7, #11]
 800b74a:	3301      	adds	r3, #1
 800b74c:	72fb      	strb	r3, [r7, #11]
      break;
 800b74e:	e11e      	b.n	800b98e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	7c12      	ldrb	r2, [r2, #16]
 800b75c:	f107 0108 	add.w	r1, r7, #8
 800b760:	4610      	mov	r0, r2
 800b762:	4798      	blx	r3
 800b764:	60f8      	str	r0, [r7, #12]
      break;
 800b766:	e112      	b.n	800b98e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	7c1b      	ldrb	r3, [r3, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10d      	bne.n	800b78c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b778:	f107 0208 	add.w	r2, r7, #8
 800b77c:	4610      	mov	r0, r2
 800b77e:	4798      	blx	r3
 800b780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3301      	adds	r3, #1
 800b786:	2202      	movs	r2, #2
 800b788:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b78a:	e100      	b.n	800b98e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b794:	f107 0208 	add.w	r2, r7, #8
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
 800b79c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	701a      	strb	r2, [r3, #0]
      break;
 800b7a6:	e0f2      	b.n	800b98e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	885b      	ldrh	r3, [r3, #2]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	f200 80ac 	bhi.w	800b90c <USBD_GetDescriptor+0x258>
 800b7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7bc <USBD_GetDescriptor+0x108>)
 800b7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ba:	bf00      	nop
 800b7bc:	0800b7d5 	.word	0x0800b7d5
 800b7c0:	0800b809 	.word	0x0800b809
 800b7c4:	0800b83d 	.word	0x0800b83d
 800b7c8:	0800b871 	.word	0x0800b871
 800b7cc:	0800b8a5 	.word	0x0800b8a5
 800b7d0:	0800b8d9 	.word	0x0800b8d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00b      	beq.n	800b7f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	7c12      	ldrb	r2, [r2, #16]
 800b7ec:	f107 0108 	add.w	r1, r7, #8
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
 800b7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b7f6:	e091      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b7f8:	6839      	ldr	r1, [r7, #0]
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 fab2 	bl	800bd64 <USBD_CtlError>
            err++;
 800b800:	7afb      	ldrb	r3, [r7, #11]
 800b802:	3301      	adds	r3, #1
 800b804:	72fb      	strb	r3, [r7, #11]
          break;
 800b806:	e089      	b.n	800b91c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00b      	beq.n	800b82c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	7c12      	ldrb	r2, [r2, #16]
 800b820:	f107 0108 	add.w	r1, r7, #8
 800b824:	4610      	mov	r0, r2
 800b826:	4798      	blx	r3
 800b828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b82a:	e077      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa98 	bl	800bd64 <USBD_CtlError>
            err++;
 800b834:	7afb      	ldrb	r3, [r7, #11]
 800b836:	3301      	adds	r3, #1
 800b838:	72fb      	strb	r3, [r7, #11]
          break;
 800b83a:	e06f      	b.n	800b91c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00b      	beq.n	800b860 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	7c12      	ldrb	r2, [r2, #16]
 800b854:	f107 0108 	add.w	r1, r7, #8
 800b858:	4610      	mov	r0, r2
 800b85a:	4798      	blx	r3
 800b85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b85e:	e05d      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b860:	6839      	ldr	r1, [r7, #0]
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa7e 	bl	800bd64 <USBD_CtlError>
            err++;
 800b868:	7afb      	ldrb	r3, [r7, #11]
 800b86a:	3301      	adds	r3, #1
 800b86c:	72fb      	strb	r3, [r7, #11]
          break;
 800b86e:	e055      	b.n	800b91c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00b      	beq.n	800b894 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	7c12      	ldrb	r2, [r2, #16]
 800b888:	f107 0108 	add.w	r1, r7, #8
 800b88c:	4610      	mov	r0, r2
 800b88e:	4798      	blx	r3
 800b890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b892:	e043      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fa64 	bl	800bd64 <USBD_CtlError>
            err++;
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8a2:	e03b      	b.n	800b91c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8b6:	695b      	ldr	r3, [r3, #20]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	7c12      	ldrb	r2, [r2, #16]
 800b8bc:	f107 0108 	add.w	r1, r7, #8
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4798      	blx	r3
 800b8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8c6:	e029      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8c8:	6839      	ldr	r1, [r7, #0]
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fa4a 	bl	800bd64 <USBD_CtlError>
            err++;
 800b8d0:	7afb      	ldrb	r3, [r7, #11]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b8d6:	e021      	b.n	800b91c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00b      	beq.n	800b8fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	7c12      	ldrb	r2, [r2, #16]
 800b8f0:	f107 0108 	add.w	r1, r7, #8
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4798      	blx	r3
 800b8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8fa:	e00f      	b.n	800b91c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa30 	bl	800bd64 <USBD_CtlError>
            err++;
 800b904:	7afb      	ldrb	r3, [r7, #11]
 800b906:	3301      	adds	r3, #1
 800b908:	72fb      	strb	r3, [r7, #11]
          break;
 800b90a:	e007      	b.n	800b91c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fa28 	bl	800bd64 <USBD_CtlError>
          err++;
 800b914:	7afb      	ldrb	r3, [r7, #11]
 800b916:	3301      	adds	r3, #1
 800b918:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b91a:	bf00      	nop
      }
      break;
 800b91c:	e037      	b.n	800b98e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	7c1b      	ldrb	r3, [r3, #16]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b92e:	f107 0208 	add.w	r2, r7, #8
 800b932:	4610      	mov	r0, r2
 800b934:	4798      	blx	r3
 800b936:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b938:	e029      	b.n	800b98e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fa11 	bl	800bd64 <USBD_CtlError>
        err++;
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	3301      	adds	r3, #1
 800b946:	72fb      	strb	r3, [r7, #11]
      break;
 800b948:	e021      	b.n	800b98e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	7c1b      	ldrb	r3, [r3, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d10d      	bne.n	800b96e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b95a:	f107 0208 	add.w	r2, r7, #8
 800b95e:	4610      	mov	r0, r2
 800b960:	4798      	blx	r3
 800b962:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	3301      	adds	r3, #1
 800b968:	2207      	movs	r2, #7
 800b96a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b96c:	e00f      	b.n	800b98e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b96e:	6839      	ldr	r1, [r7, #0]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f9f7 	bl	800bd64 <USBD_CtlError>
        err++;
 800b976:	7afb      	ldrb	r3, [r7, #11]
 800b978:	3301      	adds	r3, #1
 800b97a:	72fb      	strb	r3, [r7, #11]
      break;
 800b97c:	e007      	b.n	800b98e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f9ef 	bl	800bd64 <USBD_CtlError>
      err++;
 800b986:	7afb      	ldrb	r3, [r7, #11]
 800b988:	3301      	adds	r3, #1
 800b98a:	72fb      	strb	r3, [r7, #11]
      break;
 800b98c:	bf00      	nop
  }

  if (err != 0U)
 800b98e:	7afb      	ldrb	r3, [r7, #11]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11e      	bne.n	800b9d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	88db      	ldrh	r3, [r3, #6]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d016      	beq.n	800b9ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b99c:	893b      	ldrh	r3, [r7, #8]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00e      	beq.n	800b9c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	88da      	ldrh	r2, [r3, #6]
 800b9a6:	893b      	ldrh	r3, [r7, #8]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	bf28      	it	cs
 800b9ac:	4613      	movcs	r3, r2
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b9b2:	893b      	ldrh	r3, [r7, #8]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	68f9      	ldr	r1, [r7, #12]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fa44 	bl	800be46 <USBD_CtlSendData>
 800b9be:	e009      	b.n	800b9d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f9ce 	bl	800bd64 <USBD_CtlError>
 800b9c8:	e004      	b.n	800b9d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa95 	bl	800befa <USBD_CtlSendStatus>
 800b9d0:	e000      	b.n	800b9d4 <USBD_GetDescriptor+0x320>
    return;
 800b9d2:	bf00      	nop
  }
}
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop

0800b9dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	889b      	ldrh	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d131      	bne.n	800ba52 <USBD_SetAddress+0x76>
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	88db      	ldrh	r3, [r3, #6]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d12d      	bne.n	800ba52 <USBD_SetAddress+0x76>
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9fc:	d829      	bhi.n	800ba52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	885b      	ldrh	r3, [r3, #2]
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d104      	bne.n	800ba20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f9a3 	bl	800bd64 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba1e:	e01d      	b.n	800ba5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	7bfa      	ldrb	r2, [r7, #15]
 800ba24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 ff0b 	bl	800c848 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa61 	bl	800befa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d004      	beq.n	800ba48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2202      	movs	r2, #2
 800ba42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba46:	e009      	b.n	800ba5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba50:	e004      	b.n	800ba5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f985 	bl	800bd64 <USBD_CtlError>
  }
}
 800ba5a:	bf00      	nop
 800ba5c:	bf00      	nop
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	885b      	ldrh	r3, [r3, #2]
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	4b4c      	ldr	r3, [pc, #304]	@ (800bbac <USBD_SetConfig+0x148>)
 800ba7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ba7c:	4b4b      	ldr	r3, [pc, #300]	@ (800bbac <USBD_SetConfig+0x148>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d905      	bls.n	800ba90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f96c 	bl	800bd64 <USBD_CtlError>
    return USBD_FAIL;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e088      	b.n	800bba2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d002      	beq.n	800baa2 <USBD_SetConfig+0x3e>
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d025      	beq.n	800baec <USBD_SetConfig+0x88>
 800baa0:	e071      	b.n	800bb86 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800baa2:	4b42      	ldr	r3, [pc, #264]	@ (800bbac <USBD_SetConfig+0x148>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d01c      	beq.n	800bae4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800baaa:	4b40      	ldr	r3, [pc, #256]	@ (800bbac <USBD_SetConfig+0x148>)
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	461a      	mov	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bab4:	4b3d      	ldr	r3, [pc, #244]	@ (800bbac <USBD_SetConfig+0x148>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	4619      	mov	r1, r3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f7ff f992 	bl	800ade4 <USBD_SetClassConfig>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d004      	beq.n	800bad4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f949 	bl	800bd64 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bad2:	e065      	b.n	800bba0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fa10 	bl	800befa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2203      	movs	r2, #3
 800bade:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bae2:	e05d      	b.n	800bba0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fa08 	bl	800befa <USBD_CtlSendStatus>
      break;
 800baea:	e059      	b.n	800bba0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800baec:	4b2f      	ldr	r3, [pc, #188]	@ (800bbac <USBD_SetConfig+0x148>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d112      	bne.n	800bb1a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2202      	movs	r2, #2
 800baf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bafc:	4b2b      	ldr	r3, [pc, #172]	@ (800bbac <USBD_SetConfig+0x148>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	461a      	mov	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb06:	4b29      	ldr	r3, [pc, #164]	@ (800bbac <USBD_SetConfig+0x148>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f7ff f985 	bl	800ae1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 f9f1 	bl	800befa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bb18:	e042      	b.n	800bba0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bb1a:	4b24      	ldr	r3, [pc, #144]	@ (800bbac <USBD_SetConfig+0x148>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d02a      	beq.n	800bb7e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	4619      	mov	r1, r3
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff f973 	bl	800ae1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bb36:	4b1d      	ldr	r3, [pc, #116]	@ (800bbac <USBD_SetConfig+0x148>)
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bb40:	4b1a      	ldr	r3, [pc, #104]	@ (800bbac <USBD_SetConfig+0x148>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	4619      	mov	r1, r3
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff f94c 	bl	800ade4 <USBD_SetClassConfig>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f903 	bl	800bd64 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff f958 	bl	800ae1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bb74:	e014      	b.n	800bba0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9bf 	bl	800befa <USBD_CtlSendStatus>
      break;
 800bb7c:	e010      	b.n	800bba0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f9bb 	bl	800befa <USBD_CtlSendStatus>
      break;
 800bb84:	e00c      	b.n	800bba0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 f8eb 	bl	800bd64 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <USBD_SetConfig+0x148>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7ff f941 	bl	800ae1c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9e:	bf00      	nop
  }

  return ret;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	200011d0 	.word	0x200011d0

0800bbb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d004      	beq.n	800bbcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f8cd 	bl	800bd64 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bbca:	e023      	b.n	800bc14 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	dc02      	bgt.n	800bbde <USBD_GetConfig+0x2e>
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc03      	bgt.n	800bbe4 <USBD_GetConfig+0x34>
 800bbdc:	e015      	b.n	800bc0a <USBD_GetConfig+0x5a>
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d00b      	beq.n	800bbfa <USBD_GetConfig+0x4a>
 800bbe2:	e012      	b.n	800bc0a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3308      	adds	r3, #8
 800bbee:	2201      	movs	r2, #1
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f927 	bl	800be46 <USBD_CtlSendData>
        break;
 800bbf8:	e00c      	b.n	800bc14 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	2201      	movs	r2, #1
 800bc00:	4619      	mov	r1, r3
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f91f 	bl	800be46 <USBD_CtlSendData>
        break;
 800bc08:	e004      	b.n	800bc14 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f8a9 	bl	800bd64 <USBD_CtlError>
        break;
 800bc12:	bf00      	nop
}
 800bc14:	bf00      	nop
 800bc16:	3708      	adds	r7, #8
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d81e      	bhi.n	800bc72 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	88db      	ldrh	r3, [r3, #6]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d004      	beq.n	800bc46 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f890 	bl	800bd64 <USBD_CtlError>
        break;
 800bc44:	e01a      	b.n	800bc7c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	f043 0202 	orr.w	r2, r3, #2
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	330c      	adds	r3, #12
 800bc66:	2202      	movs	r2, #2
 800bc68:	4619      	mov	r1, r3
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f8eb 	bl	800be46 <USBD_CtlSendData>
      break;
 800bc70:	e004      	b.n	800bc7c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f875 	bl	800bd64 <USBD_CtlError>
      break;
 800bc7a:	bf00      	nop
  }
}
 800bc7c:	bf00      	nop
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	885b      	ldrh	r3, [r3, #2]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d106      	bne.n	800bca4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 f92b 	bl	800befa <USBD_CtlSendStatus>
  }
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d80b      	bhi.n	800bcdc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	885b      	ldrh	r3, [r3, #2]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d10c      	bne.n	800bce6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f910 	bl	800befa <USBD_CtlSendStatus>
      }
      break;
 800bcda:	e004      	b.n	800bce6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bcdc:	6839      	ldr	r1, [r7, #0]
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f840 	bl	800bd64 <USBD_CtlError>
      break;
 800bce4:	e000      	b.n	800bce8 <USBD_ClrFeature+0x3c>
      break;
 800bce6:	bf00      	nop
  }
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	781a      	ldrb	r2, [r3, #0]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	781a      	ldrb	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3301      	adds	r3, #1
 800bd18:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fa92 	bl	800b244 <SWAPBYTE>
 800bd20:	4603      	mov	r3, r0
 800bd22:	461a      	mov	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3301      	adds	r3, #1
 800bd32:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f7ff fa85 	bl	800b244 <SWAPBYTE>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3301      	adds	r3, #1
 800bd46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7ff fa78 	bl	800b244 <SWAPBYTE>
 800bd54:	4603      	mov	r3, r0
 800bd56:	461a      	mov	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	80da      	strh	r2, [r3, #6]
}
 800bd5c:	bf00      	nop
 800bd5e:	3710      	adds	r7, #16
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6e:	2180      	movs	r1, #128	@ 0x80
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fcff 	bl	800c774 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fcfb 	bl	800c774 <USBD_LL_StallEP>
}
 800bd7e:	bf00      	nop
 800bd80:	3708      	adds	r7, #8
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b086      	sub	sp, #24
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	60f8      	str	r0, [r7, #12]
 800bd8e:	60b9      	str	r1, [r7, #8]
 800bd90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d036      	beq.n	800be0a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bda0:	6938      	ldr	r0, [r7, #16]
 800bda2:	f000 f836 	bl	800be12 <USBD_GetLen>
 800bda6:	4603      	mov	r3, r0
 800bda8:	3301      	adds	r3, #1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	7812      	ldrb	r2, [r2, #0]
 800bdbe:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdc0:	7dfb      	ldrb	r3, [r7, #23]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	4413      	add	r3, r2
 800bdcc:	2203      	movs	r2, #3
 800bdce:	701a      	strb	r2, [r3, #0]
  idx++;
 800bdd0:	7dfb      	ldrb	r3, [r7, #23]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bdd6:	e013      	b.n	800be00 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bdd8:	7dfb      	ldrb	r3, [r7, #23]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4413      	add	r3, r2
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	7812      	ldrb	r2, [r2, #0]
 800bde2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	3301      	adds	r3, #1
 800bde8:	613b      	str	r3, [r7, #16]
    idx++;
 800bdea:	7dfb      	ldrb	r3, [r7, #23]
 800bdec:	3301      	adds	r3, #1
 800bdee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bdf0:	7dfb      	ldrb	r3, [r7, #23]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
    idx++;
 800bdfa:	7dfb      	ldrb	r3, [r7, #23]
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1e7      	bne.n	800bdd8 <USBD_GetString+0x52>
 800be08:	e000      	b.n	800be0c <USBD_GetString+0x86>
    return;
 800be0a:	bf00      	nop
  }
}
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800be12:	b480      	push	{r7}
 800be14:	b085      	sub	sp, #20
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800be22:	e005      	b.n	800be30 <USBD_GetLen+0x1e>
  {
    len++;
 800be24:	7bfb      	ldrb	r3, [r7, #15]
 800be26:	3301      	adds	r3, #1
 800be28:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	3301      	adds	r3, #1
 800be2e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d1f5      	bne.n	800be24 <USBD_GetLen+0x12>
  }

  return len;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	60f8      	str	r0, [r7, #12]
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2202      	movs	r2, #2
 800be56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	2100      	movs	r1, #0
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f000 fd0a 	bl	800c886 <USBD_LL_Transmit>

  return USBD_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3710      	adds	r7, #16
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	2100      	movs	r1, #0
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f000 fcf9 	bl	800c886 <USBD_LL_Transmit>

  return USBD_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b084      	sub	sp, #16
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2203      	movs	r2, #3
 800beae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68ba      	ldr	r2, [r7, #8]
 800bec6:	2100      	movs	r1, #0
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 fcfd 	bl	800c8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3710      	adds	r7, #16
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}

0800bed8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	2100      	movs	r1, #0
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f000 fcec 	bl	800c8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2204      	movs	r2, #4
 800bf06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2100      	movs	r1, #0
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fcb8 	bl	800c886 <USBD_LL_Transmit>

  return USBD_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2205      	movs	r2, #5
 800bf2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf30:	2300      	movs	r3, #0
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fcc6 	bl	800c8c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4912      	ldr	r1, [pc, #72]	@ (800bf98 <MX_USB_Device_Init+0x50>)
 800bf50:	4812      	ldr	r0, [pc, #72]	@ (800bf9c <MX_USB_Device_Init+0x54>)
 800bf52:	f7fe fed9 	bl	800ad08 <USBD_Init>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bf5c:	f7f6 f82e 	bl	8001fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bf60:	490f      	ldr	r1, [pc, #60]	@ (800bfa0 <MX_USB_Device_Init+0x58>)
 800bf62:	480e      	ldr	r0, [pc, #56]	@ (800bf9c <MX_USB_Device_Init+0x54>)
 800bf64:	f7fe ff00 	bl	800ad68 <USBD_RegisterClass>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d001      	beq.n	800bf72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bf6e:	f7f6 f825 	bl	8001fbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bf72:	490c      	ldr	r1, [pc, #48]	@ (800bfa4 <MX_USB_Device_Init+0x5c>)
 800bf74:	4809      	ldr	r0, [pc, #36]	@ (800bf9c <MX_USB_Device_Init+0x54>)
 800bf76:	f7fe fe21 	bl	800abbc <USBD_CDC_RegisterInterface>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d001      	beq.n	800bf84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bf80:	f7f6 f81c 	bl	8001fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bf84:	4805      	ldr	r0, [pc, #20]	@ (800bf9c <MX_USB_Device_Init+0x54>)
 800bf86:	f7fe ff16 	bl	800adb6 <USBD_Start>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bf90:	f7f6 f814 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bf94:	bf00      	nop
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	20000134 	.word	0x20000134
 800bf9c:	200011d4 	.word	0x200011d4
 800bfa0:	2000001c 	.word	0x2000001c
 800bfa4:	20000120 	.word	0x20000120

0800bfa8 <VCP_retrieveInputData>:
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */
int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
if
(s_RxBuffers.IsCommandDataReceived==0)
 800bfb2:	4b1f      	ldr	r3, [pc, #124]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800bfb4:	7a1b      	ldrb	r3, [r3, #8]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <VCP_retrieveInputData+0x16>
return
0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	e034      	b.n	800c028 <VCP_retrieveInputData+0x80>
//no data received
int
index=s_RxBuffers.pos_process;
 800bfbe:	4b1c      	ldr	r3, [pc, #112]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	60fb      	str	r3, [r7, #12]
*Len=s_RxBuffers.CommandsLens[index];
 800bfc4:	4a1a      	ldr	r2, [pc, #104]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	4413      	add	r3, r2
 800bfca:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800bfce:	3309      	adds	r3, #9
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	601a      	str	r2, [r3, #0]
//return the length
memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	029b      	lsls	r3, r3, #10
 800bfdc:	3308      	adds	r3, #8
 800bfde:	4a14      	ldr	r2, [pc, #80]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800bfe0:	4413      	add	r3, r2
 800bfe2:	1c59      	adds	r1, r3, #1
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f002 fa45 	bl	800e47a <memcpy>
Buf[*Len]=
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	4413      	add	r3, r2
 800bff8:	2200      	movs	r2, #0
 800bffa:	701a      	strb	r2, [r3, #0]
'\0'
;
//testing only. make sure there is ending char in the returned command string
//check if all data were processed.
s_RxBuffers.pos_process++;
 800bffc:	4b0c      	ldr	r3, [pc, #48]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	3301      	adds	r3, #1
 800c002:	4a0b      	ldr	r2, [pc, #44]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c004:	6053      	str	r3, [r2, #4]
if
(s_RxBuffers.pos_process>=MaxCommandsInBuffer)
 800c006:	4b0a      	ldr	r3, [pc, #40]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	2b09      	cmp	r3, #9
 800c00c:	dd02      	ble.n	800c014 <VCP_retrieveInputData+0x6c>
//reach the last buffer, need to rewind to 0
{
s_RxBuffers.pos_process=0;
 800c00e:	4b08      	ldr	r3, [pc, #32]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c010:	2200      	movs	r2, #0
 800c012:	605a      	str	r2, [r3, #4]
}
if
(s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0;
 800c014:	4b06      	ldr	r3, [pc, #24]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d102      	bne.n	800c026 <VCP_retrieveInputData+0x7e>
 800c020:	4b03      	ldr	r3, [pc, #12]	@ (800c030 <VCP_retrieveInputData+0x88>)
 800c022:	2200      	movs	r2, #0
 800c024:	721a      	strb	r2, [r3, #8]
//check if all data were processed
return
1;
 800c026:	2301      	movs	r3, #1
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	20001ca4 	.word	0x20001ca4

0800c034 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Txbuffer, 0);
 800c038:	2200      	movs	r2, #0
 800c03a:	4905      	ldr	r1, [pc, #20]	@ (800c050 <CDC_Init_FS+0x1c>)
 800c03c:	4805      	ldr	r0, [pc, #20]	@ (800c054 <CDC_Init_FS+0x20>)
 800c03e:	f7fe fdd2 	bl	800abe6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Rxbuffer);
 800c042:	4905      	ldr	r1, [pc, #20]	@ (800c058 <CDC_Init_FS+0x24>)
 800c044:	4803      	ldr	r0, [pc, #12]	@ (800c054 <CDC_Init_FS+0x20>)
 800c046:	f7fe fdec 	bl	800ac22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c04a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	200018a4 	.word	0x200018a4
 800c054:	200011d4 	.word	0x200011d4
 800c058:	200014a4 	.word	0x200014a4

0800c05c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c060:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c062:	4618      	mov	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	6039      	str	r1, [r7, #0]
 800c076:	71fb      	strb	r3, [r7, #7]
 800c078:	4613      	mov	r3, r2
 800c07a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	2b23      	cmp	r3, #35	@ 0x23
 800c080:	d84a      	bhi.n	800c118 <CDC_Control_FS+0xac>
 800c082:	a201      	add	r2, pc, #4	@ (adr r2, 800c088 <CDC_Control_FS+0x1c>)
 800c084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c088:	0800c119 	.word	0x0800c119
 800c08c:	0800c119 	.word	0x0800c119
 800c090:	0800c119 	.word	0x0800c119
 800c094:	0800c119 	.word	0x0800c119
 800c098:	0800c119 	.word	0x0800c119
 800c09c:	0800c119 	.word	0x0800c119
 800c0a0:	0800c119 	.word	0x0800c119
 800c0a4:	0800c119 	.word	0x0800c119
 800c0a8:	0800c119 	.word	0x0800c119
 800c0ac:	0800c119 	.word	0x0800c119
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c119 	.word	0x0800c119
 800c0b8:	0800c119 	.word	0x0800c119
 800c0bc:	0800c119 	.word	0x0800c119
 800c0c0:	0800c119 	.word	0x0800c119
 800c0c4:	0800c119 	.word	0x0800c119
 800c0c8:	0800c119 	.word	0x0800c119
 800c0cc:	0800c119 	.word	0x0800c119
 800c0d0:	0800c119 	.word	0x0800c119
 800c0d4:	0800c119 	.word	0x0800c119
 800c0d8:	0800c119 	.word	0x0800c119
 800c0dc:	0800c119 	.word	0x0800c119
 800c0e0:	0800c119 	.word	0x0800c119
 800c0e4:	0800c119 	.word	0x0800c119
 800c0e8:	0800c119 	.word	0x0800c119
 800c0ec:	0800c119 	.word	0x0800c119
 800c0f0:	0800c119 	.word	0x0800c119
 800c0f4:	0800c119 	.word	0x0800c119
 800c0f8:	0800c119 	.word	0x0800c119
 800c0fc:	0800c119 	.word	0x0800c119
 800c100:	0800c119 	.word	0x0800c119
 800c104:	0800c119 	.word	0x0800c119
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c119 	.word	0x0800c119
 800c110:	0800c119 	.word	0x0800c119
 800c114:	0800c119 	.word	0x0800c119
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c118:	bf00      	nop
  }

  return (USBD_OK);
 800c11a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]

/* USER CODE BEGIN 6 */ // CDC_Receive_FS is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
s_RxBuffers.IsCommandDataReceived=1;
 800c132:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c134:	2201      	movs	r2, #1
 800c136:	721a      	strb	r2, [r3, #8]
//indicates data were received
s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	4b14      	ldr	r3, [pc, #80]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	b2d1      	uxtb	r1, r2
 800c142:	4a13      	ldr	r2, [pc, #76]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c144:	4413      	add	r3, r2
 800c146:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800c14a:	3309      	adds	r3, #9
 800c14c:	460a      	mov	r2, r1
 800c14e:	701a      	strb	r2, [r3, #0]
//only set the length, data was directly saved to buffer
s_RxBuffers.pos_receive++;
 800c150:	4b0f      	ldr	r3, [pc, #60]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	4a0e      	ldr	r2, [pc, #56]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c158:	6013      	str	r3, [r2, #0]
//move to next position to receive data
if
(s_RxBuffers.pos_receive>=MaxCommandsInBuffer)
 800c15a:	4b0d      	ldr	r3, [pc, #52]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b09      	cmp	r3, #9
 800c160:	dd02      	ble.n	800c168 <CDC_Receive_FS+0x40>
//reach the last buffer, need to rewind to 0
{
s_RxBuffers.pos_receive=0;
 800c162:	4b0b      	ldr	r3, [pc, #44]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
}
//prepare to receive the next data
USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 800c168:	4b09      	ldr	r3, [pc, #36]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	029b      	lsls	r3, r3, #10
 800c16e:	3308      	adds	r3, #8
 800c170:	4a07      	ldr	r2, [pc, #28]	@ (800c190 <CDC_Receive_FS+0x68>)
 800c172:	4413      	add	r3, r2
 800c174:	3301      	adds	r3, #1
 800c176:	4619      	mov	r1, r3
 800c178:	4806      	ldr	r0, [pc, #24]	@ (800c194 <CDC_Receive_FS+0x6c>)
 800c17a:	f7fe fd52 	bl	800ac22 <USBD_CDC_SetRxBuffer>
//Set the buffer to receive incoming data
USBD_CDC_ReceivePacket(&hUsbDeviceFS);// Tell that you are ready to receive the next packet, otherwise you wouldn't be able to receive next data
 800c17e:	4805      	ldr	r0, [pc, #20]	@ (800c194 <CDC_Receive_FS+0x6c>)
 800c180:	f7fe fd98 	bl	800acb4 <USBD_CDC_ReceivePacket>
return
USBD_OK;
 800c184:	2300      	movs	r3, #0
/* USER CODE END 6 */
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20001ca4 	.word	0x20001ca4
 800c194:	200011d4 	.word	0x200011d4

0800c198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <CDC_Transmit_FS+0x48>)
 800c1aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c1ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d001      	beq.n	800c1be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e00b      	b.n	800c1d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c1be:	887b      	ldrh	r3, [r7, #2]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4806      	ldr	r0, [pc, #24]	@ (800c1e0 <CDC_Transmit_FS+0x48>)
 800c1c6:	f7fe fd0e 	bl	800abe6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c1ca:	4805      	ldr	r0, [pc, #20]	@ (800c1e0 <CDC_Transmit_FS+0x48>)
 800c1cc:	f7fe fd42 	bl	800ac54 <USBD_CDC_TransmitPacket>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	200011d4 	.word	0x200011d4

0800c1e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	371c      	adds	r7, #28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
	...

0800c208 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	2212      	movs	r2, #18
 800c218:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c21a:	4b03      	ldr	r3, [pc, #12]	@ (800c228 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr
 800c228:	20000154 	.word	0x20000154

0800c22c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	2204      	movs	r2, #4
 800c23c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c23e:	4b03      	ldr	r3, [pc, #12]	@ (800c24c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	20000168 	.word	0x20000168

0800c250 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	6039      	str	r1, [r7, #0]
 800c25a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d105      	bne.n	800c26e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	4907      	ldr	r1, [pc, #28]	@ (800c284 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c266:	4808      	ldr	r0, [pc, #32]	@ (800c288 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c268:	f7ff fd8d 	bl	800bd86 <USBD_GetString>
 800c26c:	e004      	b.n	800c278 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	4904      	ldr	r1, [pc, #16]	@ (800c284 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c272:	4805      	ldr	r0, [pc, #20]	@ (800c288 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c274:	f7ff fd87 	bl	800bd86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c278:	4b02      	ldr	r3, [pc, #8]	@ (800c284 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	200044b8 	.word	0x200044b8
 800c288:	08010e70 	.word	0x08010e70

0800c28c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	4904      	ldr	r1, [pc, #16]	@ (800c2ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c29c:	4804      	ldr	r0, [pc, #16]	@ (800c2b0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c29e:	f7ff fd72 	bl	800bd86 <USBD_GetString>
  return USBD_StrDesc;
 800c2a2:	4b02      	ldr	r3, [pc, #8]	@ (800c2ac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	200044b8 	.word	0x200044b8
 800c2b0:	08010e88 	.word	0x08010e88

0800c2b4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	6039      	str	r1, [r7, #0]
 800c2be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	221a      	movs	r2, #26
 800c2c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2c6:	f000 f843 	bl	800c350 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c2ca:	4b02      	ldr	r3, [pc, #8]	@ (800c2d4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	2000016c 	.word	0x2000016c

0800c2d8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	6039      	str	r1, [r7, #0]
 800c2e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2e4:	79fb      	ldrb	r3, [r7, #7]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	4907      	ldr	r1, [pc, #28]	@ (800c30c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c2ee:	4808      	ldr	r0, [pc, #32]	@ (800c310 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c2f0:	f7ff fd49 	bl	800bd86 <USBD_GetString>
 800c2f4:	e004      	b.n	800c300 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	4904      	ldr	r1, [pc, #16]	@ (800c30c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c2fa:	4805      	ldr	r0, [pc, #20]	@ (800c310 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c2fc:	f7ff fd43 	bl	800bd86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c300:	4b02      	ldr	r3, [pc, #8]	@ (800c30c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c302:	4618      	mov	r0, r3
 800c304:	3708      	adds	r7, #8
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	200044b8 	.word	0x200044b8
 800c310:	08010e9c 	.word	0x08010e9c

0800c314 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	6039      	str	r1, [r7, #0]
 800c31e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d105      	bne.n	800c332 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	4907      	ldr	r1, [pc, #28]	@ (800c348 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c32a:	4808      	ldr	r0, [pc, #32]	@ (800c34c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c32c:	f7ff fd2b 	bl	800bd86 <USBD_GetString>
 800c330:	e004      	b.n	800c33c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c332:	683a      	ldr	r2, [r7, #0]
 800c334:	4904      	ldr	r1, [pc, #16]	@ (800c348 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c336:	4805      	ldr	r0, [pc, #20]	@ (800c34c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c338:	f7ff fd25 	bl	800bd86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c33c:	4b02      	ldr	r3, [pc, #8]	@ (800c348 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3708      	adds	r7, #8
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	200044b8 	.word	0x200044b8
 800c34c:	08010ea8 	.word	0x08010ea8

0800c350 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c356:	4b0f      	ldr	r3, [pc, #60]	@ (800c394 <Get_SerialNum+0x44>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c35c:	4b0e      	ldr	r3, [pc, #56]	@ (800c398 <Get_SerialNum+0x48>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c362:	4b0e      	ldr	r3, [pc, #56]	@ (800c39c <Get_SerialNum+0x4c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4413      	add	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d009      	beq.n	800c38a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c376:	2208      	movs	r2, #8
 800c378:	4909      	ldr	r1, [pc, #36]	@ (800c3a0 <Get_SerialNum+0x50>)
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f814 	bl	800c3a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c380:	2204      	movs	r2, #4
 800c382:	4908      	ldr	r1, [pc, #32]	@ (800c3a4 <Get_SerialNum+0x54>)
 800c384:	68b8      	ldr	r0, [r7, #8]
 800c386:	f000 f80f 	bl	800c3a8 <IntToUnicode>
  }
}
 800c38a:	bf00      	nop
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	1fff7590 	.word	0x1fff7590
 800c398:	1fff7594 	.word	0x1fff7594
 800c39c:	1fff7598 	.word	0x1fff7598
 800c3a0:	2000016e 	.word	0x2000016e
 800c3a4:	2000017e 	.word	0x2000017e

0800c3a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b087      	sub	sp, #28
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	75fb      	strb	r3, [r7, #23]
 800c3be:	e027      	b.n	800c410 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	0f1b      	lsrs	r3, r3, #28
 800c3c4:	2b09      	cmp	r3, #9
 800c3c6:	d80b      	bhi.n	800c3e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	0f1b      	lsrs	r3, r3, #28
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	7dfb      	ldrb	r3, [r7, #23]
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	440b      	add	r3, r1
 800c3d8:	3230      	adds	r2, #48	@ 0x30
 800c3da:	b2d2      	uxtb	r2, r2
 800c3dc:	701a      	strb	r2, [r3, #0]
 800c3de:	e00a      	b.n	800c3f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	0f1b      	lsrs	r3, r3, #28
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	440b      	add	r3, r1
 800c3f0:	3237      	adds	r2, #55	@ 0x37
 800c3f2:	b2d2      	uxtb	r2, r2
 800c3f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	011b      	lsls	r3, r3, #4
 800c3fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	005b      	lsls	r3, r3, #1
 800c400:	3301      	adds	r3, #1
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	4413      	add	r3, r2
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	3301      	adds	r3, #1
 800c40e:	75fb      	strb	r3, [r7, #23]
 800c410:	7dfa      	ldrb	r2, [r7, #23]
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	429a      	cmp	r2, r3
 800c416:	d3d3      	bcc.n	800c3c0 <IntToUnicode+0x18>
  }
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	371c      	adds	r7, #28
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
	...

0800c428 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b094      	sub	sp, #80	@ 0x50
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c430:	f107 030c 	add.w	r3, r7, #12
 800c434:	2244      	movs	r2, #68	@ 0x44
 800c436:	2100      	movs	r1, #0
 800c438:	4618      	mov	r0, r3
 800c43a:	f001 ff52 	bl	800e2e2 <memset>
  if(pcdHandle->Instance==USB)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a15      	ldr	r2, [pc, #84]	@ (800c498 <HAL_PCD_MspInit+0x70>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d122      	bne.n	800c48e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c44c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c44e:	2300      	movs	r3, #0
 800c450:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c452:	f107 030c 	add.w	r3, r7, #12
 800c456:	4618      	mov	r0, r3
 800c458:	f7fa f99a 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c462:	f7f5 fdab 	bl	8001fbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c466:	4b0d      	ldr	r3, [pc, #52]	@ (800c49c <HAL_PCD_MspInit+0x74>)
 800c468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c46a:	4a0c      	ldr	r2, [pc, #48]	@ (800c49c <HAL_PCD_MspInit+0x74>)
 800c46c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c470:	6593      	str	r3, [r2, #88]	@ 0x58
 800c472:	4b0a      	ldr	r3, [pc, #40]	@ (800c49c <HAL_PCD_MspInit+0x74>)
 800c474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c47a:	60bb      	str	r3, [r7, #8]
 800c47c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c47e:	2200      	movs	r2, #0
 800c480:	2100      	movs	r1, #0
 800c482:	2014      	movs	r0, #20
 800c484:	f7f7 fcbf 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c488:	2014      	movs	r0, #20
 800c48a:	f7f7 fcd6 	bl	8003e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c48e:	bf00      	nop
 800c490:	3750      	adds	r7, #80	@ 0x50
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	40005c00 	.word	0x40005c00
 800c49c:	40021000 	.word	0x40021000

0800c4a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	f7fe fcc8 	bl	800ae4c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c4d6:	78fa      	ldrb	r2, [r7, #3]
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	00db      	lsls	r3, r3, #3
 800c4e2:	440b      	add	r3, r1
 800c4e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	f7fe fd02 	bl	800aef6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c4f2:	bf00      	nop
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	460b      	mov	r3, r1
 800c504:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c50c:	78fa      	ldrb	r2, [r7, #3]
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	4613      	mov	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4413      	add	r3, r2
 800c516:	00db      	lsls	r3, r3, #3
 800c518:	440b      	add	r3, r1
 800c51a:	3324      	adds	r3, #36	@ 0x24
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	78fb      	ldrb	r3, [r7, #3]
 800c520:	4619      	mov	r1, r3
 800c522:	f7fe fd4b 	bl	800afbc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe fe5f 	bl	800b200 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	795b      	ldrb	r3, [r3, #5]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d001      	beq.n	800c562 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c55e:	f7f5 fd2d 	bl	8001fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c568:	7bfa      	ldrb	r2, [r7, #15]
 800c56a:	4611      	mov	r1, r2
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fe fe09 	bl	800b184 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe fdb5 	bl	800b0e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c57e:	bf00      	nop
 800c580:	3710      	adds	r7, #16
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
	...

0800c588 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fe04 	bl	800b1a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	7a5b      	ldrb	r3, [r3, #9]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5a4:	4b04      	ldr	r3, [pc, #16]	@ (800c5b8 <HAL_PCD_SuspendCallback+0x30>)
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	4a03      	ldr	r2, [pc, #12]	@ (800c5b8 <HAL_PCD_SuspendCallback+0x30>)
 800c5aa:	f043 0306 	orr.w	r3, r3, #6
 800c5ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c5b0:	bf00      	nop
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	e000ed00 	.word	0xe000ed00

0800c5bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7a5b      	ldrb	r3, [r3, #9]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d007      	beq.n	800c5dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5cc:	4b08      	ldr	r3, [pc, #32]	@ (800c5f0 <HAL_PCD_ResumeCallback+0x34>)
 800c5ce:	691b      	ldr	r3, [r3, #16]
 800c5d0:	4a07      	ldr	r2, [pc, #28]	@ (800c5f0 <HAL_PCD_ResumeCallback+0x34>)
 800c5d2:	f023 0306 	bic.w	r3, r3, #6
 800c5d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c5d8:	f000 f9f8 	bl	800c9cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fe fdf4 	bl	800b1d0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c5e8:	bf00      	nop
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	e000ed00 	.word	0xe000ed00

0800c5f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c5fc:	4a2b      	ldr	r2, [pc, #172]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	4a29      	ldr	r2, [pc, #164]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c608:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c60c:	4b27      	ldr	r3, [pc, #156]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c60e:	4a28      	ldr	r2, [pc, #160]	@ (800c6b0 <USBD_LL_Init+0xbc>)
 800c610:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c612:	4b26      	ldr	r3, [pc, #152]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c614:	2208      	movs	r2, #8
 800c616:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c618:	4b24      	ldr	r3, [pc, #144]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c61a:	2202      	movs	r2, #2
 800c61c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c61e:	4b23      	ldr	r3, [pc, #140]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c620:	2202      	movs	r2, #2
 800c622:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c624:	4b21      	ldr	r3, [pc, #132]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c626:	2200      	movs	r2, #0
 800c628:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c62a:	4b20      	ldr	r3, [pc, #128]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c630:	4b1e      	ldr	r3, [pc, #120]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c632:	2200      	movs	r2, #0
 800c634:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c636:	4b1d      	ldr	r3, [pc, #116]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c638:	2200      	movs	r2, #0
 800c63a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c63c:	481b      	ldr	r0, [pc, #108]	@ (800c6ac <USBD_LL_Init+0xb8>)
 800c63e:	f7f7 fdc9 	bl	80041d4 <HAL_PCD_Init>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d001      	beq.n	800c64c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c648:	f7f5 fcb8 	bl	8001fbc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c652:	2318      	movs	r3, #24
 800c654:	2200      	movs	r2, #0
 800c656:	2100      	movs	r1, #0
 800c658:	f7f9 fa82 	bl	8005b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c662:	2358      	movs	r3, #88	@ 0x58
 800c664:	2200      	movs	r2, #0
 800c666:	2180      	movs	r1, #128	@ 0x80
 800c668:	f7f9 fa7a 	bl	8005b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c672:	23c0      	movs	r3, #192	@ 0xc0
 800c674:	2200      	movs	r2, #0
 800c676:	2181      	movs	r1, #129	@ 0x81
 800c678:	f7f9 fa72 	bl	8005b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c682:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c686:	2200      	movs	r2, #0
 800c688:	2101      	movs	r1, #1
 800c68a:	f7f9 fa69 	bl	8005b60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c694:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c698:	2200      	movs	r2, #0
 800c69a:	2182      	movs	r1, #130	@ 0x82
 800c69c:	f7f9 fa60 	bl	8005b60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	200046b8 	.word	0x200046b8
 800c6b0:	40005c00 	.word	0x40005c00

0800c6b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7f7 fe50 	bl	8004370 <HAL_PCD_Start>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 f97e 	bl	800c9d8 <USBD_Get_USB_Status>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	4608      	mov	r0, r1
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	70fb      	strb	r3, [r7, #3]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70bb      	strb	r3, [r7, #2]
 800c700:	4613      	mov	r3, r2
 800c702:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c712:	78bb      	ldrb	r3, [r7, #2]
 800c714:	883a      	ldrh	r2, [r7, #0]
 800c716:	78f9      	ldrb	r1, [r7, #3]
 800c718:	f7f7 ff97 	bl	800464a <HAL_PCD_EP_Open>
 800c71c:	4603      	mov	r3, r0
 800c71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c720:	7bfb      	ldrb	r3, [r7, #15]
 800c722:	4618      	mov	r0, r3
 800c724:	f000 f958 	bl	800c9d8 <USBD_Get_USB_Status>
 800c728:	4603      	mov	r3, r0
 800c72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	460b      	mov	r3, r1
 800c740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c746:	2300      	movs	r3, #0
 800c748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c750:	78fa      	ldrb	r2, [r7, #3]
 800c752:	4611      	mov	r1, r2
 800c754:	4618      	mov	r0, r3
 800c756:	f7f7 ffd5 	bl	8004704 <HAL_PCD_EP_Close>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c75e:	7bfb      	ldrb	r3, [r7, #15]
 800c760:	4618      	mov	r0, r3
 800c762:	f000 f939 	bl	800c9d8 <USBD_Get_USB_Status>
 800c766:	4603      	mov	r3, r0
 800c768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	460b      	mov	r3, r1
 800c77e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c780:	2300      	movs	r3, #0
 800c782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c78e:	78fa      	ldrb	r2, [r7, #3]
 800c790:	4611      	mov	r1, r2
 800c792:	4618      	mov	r0, r3
 800c794:	f7f8 f87e 	bl	8004894 <HAL_PCD_EP_SetStall>
 800c798:	4603      	mov	r3, r0
 800c79a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f000 f91a 	bl	800c9d8 <USBD_Get_USB_Status>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3710      	adds	r7, #16
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b084      	sub	sp, #16
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c7cc:	78fa      	ldrb	r2, [r7, #3]
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7f8 f8b1 	bl	8004938 <HAL_PCD_EP_ClrStall>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 f8fb 	bl	800c9d8 <USBD_Get_USB_Status>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c802:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	da0b      	bge.n	800c824 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c80c:	78fb      	ldrb	r3, [r7, #3]
 800c80e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c812:	68f9      	ldr	r1, [r7, #12]
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	440b      	add	r3, r1
 800c81e:	3312      	adds	r3, #18
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	e00b      	b.n	800c83c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c824:	78fb      	ldrb	r3, [r7, #3]
 800c826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c82a:	68f9      	ldr	r1, [r7, #12]
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	440b      	add	r3, r1
 800c836:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c83a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	460b      	mov	r3, r1
 800c852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c854:	2300      	movs	r3, #0
 800c856:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c862:	78fa      	ldrb	r2, [r7, #3]
 800c864:	4611      	mov	r1, r2
 800c866:	4618      	mov	r0, r3
 800c868:	f7f7 fecb 	bl	8004602 <HAL_PCD_SetAddress>
 800c86c:	4603      	mov	r3, r0
 800c86e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 f8b0 	bl	800c9d8 <USBD_Get_USB_Status>
 800c878:	4603      	mov	r3, r0
 800c87a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	607a      	str	r2, [r7, #4]
 800c890:	603b      	str	r3, [r7, #0]
 800c892:	460b      	mov	r3, r1
 800c894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c89a:	2300      	movs	r3, #0
 800c89c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c8a4:	7af9      	ldrb	r1, [r7, #11]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	f7f7 ffbc 	bl	8004826 <HAL_PCD_EP_Transmit>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f000 f88f 	bl	800c9d8 <USBD_Get_USB_Status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8be:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3718      	adds	r7, #24
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b086      	sub	sp, #24
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	607a      	str	r2, [r7, #4]
 800c8d2:	603b      	str	r3, [r7, #0]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800c8e6:	7af9      	ldrb	r1, [r7, #11]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	f7f7 ff52 	bl	8004794 <HAL_PCD_EP_Receive>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 f86e 	bl	800c9d8 <USBD_Get_USB_Status>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c900:	7dbb      	ldrb	r3, [r7, #22]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b082      	sub	sp, #8
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800c91c:	78fa      	ldrb	r2, [r7, #3]
 800c91e:	4611      	mov	r1, r2
 800c920:	4618      	mov	r0, r3
 800c922:	f7f7 ff68 	bl	80047f6 <HAL_PCD_EP_GetRxCount>
 800c926:	4603      	mov	r3, r0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3708      	adds	r7, #8
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c93c:	78fb      	ldrb	r3, [r7, #3]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d002      	beq.n	800c948 <HAL_PCDEx_LPM_Callback+0x18>
 800c942:	2b01      	cmp	r3, #1
 800c944:	d013      	beq.n	800c96e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c946:	e023      	b.n	800c990 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7a5b      	ldrb	r3, [r3, #9]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d007      	beq.n	800c960 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c950:	f000 f83c 	bl	800c9cc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c954:	4b10      	ldr	r3, [pc, #64]	@ (800c998 <HAL_PCDEx_LPM_Callback+0x68>)
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	4a0f      	ldr	r2, [pc, #60]	@ (800c998 <HAL_PCDEx_LPM_Callback+0x68>)
 800c95a:	f023 0306 	bic.w	r3, r3, #6
 800c95e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c966:	4618      	mov	r0, r3
 800c968:	f7fe fc32 	bl	800b1d0 <USBD_LL_Resume>
    break;
 800c96c:	e010      	b.n	800c990 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe fc15 	bl	800b1a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	7a5b      	ldrb	r3, [r3, #9]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c982:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <HAL_PCDEx_LPM_Callback+0x68>)
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	4a04      	ldr	r2, [pc, #16]	@ (800c998 <HAL_PCDEx_LPM_Callback+0x68>)
 800c988:	f043 0306 	orr.w	r3, r3, #6
 800c98c:	6113      	str	r3, [r2, #16]
    break;
 800c98e:	bf00      	nop
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	e000ed00 	.word	0xe000ed00

0800c99c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9a4:	4b03      	ldr	r3, [pc, #12]	@ (800c9b4 <USBD_static_malloc+0x18>)
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	20004994 	.word	0x20004994

0800c9b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]

}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c9d0:	f7f5 f878 	bl	8001ac4 <SystemClock_Config>
}
 800c9d4:	bf00      	nop
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	2b03      	cmp	r3, #3
 800c9ea:	d817      	bhi.n	800ca1c <USBD_Get_USB_Status+0x44>
 800c9ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c9f4 <USBD_Get_USB_Status+0x1c>)
 800c9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f2:	bf00      	nop
 800c9f4:	0800ca05 	.word	0x0800ca05
 800c9f8:	0800ca0b 	.word	0x0800ca0b
 800c9fc:	0800ca11 	.word	0x0800ca11
 800ca00:	0800ca17 	.word	0x0800ca17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
    break;
 800ca08:	e00b      	b.n	800ca22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca0a:	2303      	movs	r3, #3
 800ca0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca0e:	e008      	b.n	800ca22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca10:	2301      	movs	r3, #1
 800ca12:	73fb      	strb	r3, [r7, #15]
    break;
 800ca14:	e005      	b.n	800ca22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca16:	2303      	movs	r3, #3
 800ca18:	73fb      	strb	r3, [r7, #15]
    break;
 800ca1a:	e002      	b.n	800ca22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca20:	bf00      	nop
  }
  return usb_status;
 800ca22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <atof>:
 800ca30:	2100      	movs	r1, #0
 800ca32:	f000 becd 	b.w	800d7d0 <strtod>
	...

0800ca38 <calloc>:
 800ca38:	4b02      	ldr	r3, [pc, #8]	@ (800ca44 <calloc+0xc>)
 800ca3a:	460a      	mov	r2, r1
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	6818      	ldr	r0, [r3, #0]
 800ca40:	f000 b802 	b.w	800ca48 <_calloc_r>
 800ca44:	20000300 	.word	0x20000300

0800ca48 <_calloc_r>:
 800ca48:	b570      	push	{r4, r5, r6, lr}
 800ca4a:	fba1 5402 	umull	r5, r4, r1, r2
 800ca4e:	b93c      	cbnz	r4, 800ca60 <_calloc_r+0x18>
 800ca50:	4629      	mov	r1, r5
 800ca52:	f000 f82f 	bl	800cab4 <_malloc_r>
 800ca56:	4606      	mov	r6, r0
 800ca58:	b928      	cbnz	r0, 800ca66 <_calloc_r+0x1e>
 800ca5a:	2600      	movs	r6, #0
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	220c      	movs	r2, #12
 800ca62:	6002      	str	r2, [r0, #0]
 800ca64:	e7f9      	b.n	800ca5a <_calloc_r+0x12>
 800ca66:	462a      	mov	r2, r5
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f001 fc3a 	bl	800e2e2 <memset>
 800ca6e:	e7f5      	b.n	800ca5c <_calloc_r+0x14>

0800ca70 <sbrk_aligned>:
 800ca70:	b570      	push	{r4, r5, r6, lr}
 800ca72:	4e0f      	ldr	r6, [pc, #60]	@ (800cab0 <sbrk_aligned+0x40>)
 800ca74:	460c      	mov	r4, r1
 800ca76:	6831      	ldr	r1, [r6, #0]
 800ca78:	4605      	mov	r5, r0
 800ca7a:	b911      	cbnz	r1, 800ca82 <sbrk_aligned+0x12>
 800ca7c:	f001 fca6 	bl	800e3cc <_sbrk_r>
 800ca80:	6030      	str	r0, [r6, #0]
 800ca82:	4621      	mov	r1, r4
 800ca84:	4628      	mov	r0, r5
 800ca86:	f001 fca1 	bl	800e3cc <_sbrk_r>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	d103      	bne.n	800ca96 <sbrk_aligned+0x26>
 800ca8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ca92:	4620      	mov	r0, r4
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
 800ca96:	1cc4      	adds	r4, r0, #3
 800ca98:	f024 0403 	bic.w	r4, r4, #3
 800ca9c:	42a0      	cmp	r0, r4
 800ca9e:	d0f8      	beq.n	800ca92 <sbrk_aligned+0x22>
 800caa0:	1a21      	subs	r1, r4, r0
 800caa2:	4628      	mov	r0, r5
 800caa4:	f001 fc92 	bl	800e3cc <_sbrk_r>
 800caa8:	3001      	adds	r0, #1
 800caaa:	d1f2      	bne.n	800ca92 <sbrk_aligned+0x22>
 800caac:	e7ef      	b.n	800ca8e <sbrk_aligned+0x1e>
 800caae:	bf00      	nop
 800cab0:	20004bb4 	.word	0x20004bb4

0800cab4 <_malloc_r>:
 800cab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cab8:	1ccd      	adds	r5, r1, #3
 800caba:	f025 0503 	bic.w	r5, r5, #3
 800cabe:	3508      	adds	r5, #8
 800cac0:	2d0c      	cmp	r5, #12
 800cac2:	bf38      	it	cc
 800cac4:	250c      	movcc	r5, #12
 800cac6:	2d00      	cmp	r5, #0
 800cac8:	4606      	mov	r6, r0
 800caca:	db01      	blt.n	800cad0 <_malloc_r+0x1c>
 800cacc:	42a9      	cmp	r1, r5
 800cace:	d904      	bls.n	800cada <_malloc_r+0x26>
 800cad0:	230c      	movs	r3, #12
 800cad2:	6033      	str	r3, [r6, #0]
 800cad4:	2000      	movs	r0, #0
 800cad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cbb0 <_malloc_r+0xfc>
 800cade:	f000 f869 	bl	800cbb4 <__malloc_lock>
 800cae2:	f8d8 3000 	ldr.w	r3, [r8]
 800cae6:	461c      	mov	r4, r3
 800cae8:	bb44      	cbnz	r4, 800cb3c <_malloc_r+0x88>
 800caea:	4629      	mov	r1, r5
 800caec:	4630      	mov	r0, r6
 800caee:	f7ff ffbf 	bl	800ca70 <sbrk_aligned>
 800caf2:	1c43      	adds	r3, r0, #1
 800caf4:	4604      	mov	r4, r0
 800caf6:	d158      	bne.n	800cbaa <_malloc_r+0xf6>
 800caf8:	f8d8 4000 	ldr.w	r4, [r8]
 800cafc:	4627      	mov	r7, r4
 800cafe:	2f00      	cmp	r7, #0
 800cb00:	d143      	bne.n	800cb8a <_malloc_r+0xd6>
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	d04b      	beq.n	800cb9e <_malloc_r+0xea>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	4639      	mov	r1, r7
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	eb04 0903 	add.w	r9, r4, r3
 800cb10:	f001 fc5c 	bl	800e3cc <_sbrk_r>
 800cb14:	4581      	cmp	r9, r0
 800cb16:	d142      	bne.n	800cb9e <_malloc_r+0xea>
 800cb18:	6821      	ldr	r1, [r4, #0]
 800cb1a:	1a6d      	subs	r5, r5, r1
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7ff ffa6 	bl	800ca70 <sbrk_aligned>
 800cb24:	3001      	adds	r0, #1
 800cb26:	d03a      	beq.n	800cb9e <_malloc_r+0xea>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	442b      	add	r3, r5
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	f8d8 3000 	ldr.w	r3, [r8]
 800cb32:	685a      	ldr	r2, [r3, #4]
 800cb34:	bb62      	cbnz	r2, 800cb90 <_malloc_r+0xdc>
 800cb36:	f8c8 7000 	str.w	r7, [r8]
 800cb3a:	e00f      	b.n	800cb5c <_malloc_r+0xa8>
 800cb3c:	6822      	ldr	r2, [r4, #0]
 800cb3e:	1b52      	subs	r2, r2, r5
 800cb40:	d420      	bmi.n	800cb84 <_malloc_r+0xd0>
 800cb42:	2a0b      	cmp	r2, #11
 800cb44:	d917      	bls.n	800cb76 <_malloc_r+0xc2>
 800cb46:	1961      	adds	r1, r4, r5
 800cb48:	42a3      	cmp	r3, r4
 800cb4a:	6025      	str	r5, [r4, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	6059      	strne	r1, [r3, #4]
 800cb50:	6863      	ldr	r3, [r4, #4]
 800cb52:	bf08      	it	eq
 800cb54:	f8c8 1000 	streq.w	r1, [r8]
 800cb58:	5162      	str	r2, [r4, r5]
 800cb5a:	604b      	str	r3, [r1, #4]
 800cb5c:	4630      	mov	r0, r6
 800cb5e:	f000 f82f 	bl	800cbc0 <__malloc_unlock>
 800cb62:	f104 000b 	add.w	r0, r4, #11
 800cb66:	1d23      	adds	r3, r4, #4
 800cb68:	f020 0007 	bic.w	r0, r0, #7
 800cb6c:	1ac2      	subs	r2, r0, r3
 800cb6e:	bf1c      	itt	ne
 800cb70:	1a1b      	subne	r3, r3, r0
 800cb72:	50a3      	strne	r3, [r4, r2]
 800cb74:	e7af      	b.n	800cad6 <_malloc_r+0x22>
 800cb76:	6862      	ldr	r2, [r4, #4]
 800cb78:	42a3      	cmp	r3, r4
 800cb7a:	bf0c      	ite	eq
 800cb7c:	f8c8 2000 	streq.w	r2, [r8]
 800cb80:	605a      	strne	r2, [r3, #4]
 800cb82:	e7eb      	b.n	800cb5c <_malloc_r+0xa8>
 800cb84:	4623      	mov	r3, r4
 800cb86:	6864      	ldr	r4, [r4, #4]
 800cb88:	e7ae      	b.n	800cae8 <_malloc_r+0x34>
 800cb8a:	463c      	mov	r4, r7
 800cb8c:	687f      	ldr	r7, [r7, #4]
 800cb8e:	e7b6      	b.n	800cafe <_malloc_r+0x4a>
 800cb90:	461a      	mov	r2, r3
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	d1fb      	bne.n	800cb90 <_malloc_r+0xdc>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	6053      	str	r3, [r2, #4]
 800cb9c:	e7de      	b.n	800cb5c <_malloc_r+0xa8>
 800cb9e:	230c      	movs	r3, #12
 800cba0:	6033      	str	r3, [r6, #0]
 800cba2:	4630      	mov	r0, r6
 800cba4:	f000 f80c 	bl	800cbc0 <__malloc_unlock>
 800cba8:	e794      	b.n	800cad4 <_malloc_r+0x20>
 800cbaa:	6005      	str	r5, [r0, #0]
 800cbac:	e7d6      	b.n	800cb5c <_malloc_r+0xa8>
 800cbae:	bf00      	nop
 800cbb0:	20004bb8 	.word	0x20004bb8

0800cbb4 <__malloc_lock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	@ (800cbbc <__malloc_lock+0x8>)
 800cbb6:	f001 bc56 	b.w	800e466 <__retarget_lock_acquire_recursive>
 800cbba:	bf00      	nop
 800cbbc:	20004cfc 	.word	0x20004cfc

0800cbc0 <__malloc_unlock>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	@ (800cbc8 <__malloc_unlock+0x8>)
 800cbc2:	f001 bc51 	b.w	800e468 <__retarget_lock_release_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	20004cfc 	.word	0x20004cfc

0800cbcc <sulp>:
 800cbcc:	b570      	push	{r4, r5, r6, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	460d      	mov	r5, r1
 800cbd2:	ec45 4b10 	vmov	d0, r4, r5
 800cbd6:	4616      	mov	r6, r2
 800cbd8:	f003 f9c4 	bl	800ff64 <__ulp>
 800cbdc:	ec51 0b10 	vmov	r0, r1, d0
 800cbe0:	b17e      	cbz	r6, 800cc02 <sulp+0x36>
 800cbe2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cbe6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	dd09      	ble.n	800cc02 <sulp+0x36>
 800cbee:	051b      	lsls	r3, r3, #20
 800cbf0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cbf4:	2400      	movs	r4, #0
 800cbf6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	462b      	mov	r3, r5
 800cbfe:	f7f3 fd23 	bl	8000648 <__aeabi_dmul>
 800cc02:	ec41 0b10 	vmov	d0, r0, r1
 800cc06:	bd70      	pop	{r4, r5, r6, pc}

0800cc08 <_strtod_l>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	b09f      	sub	sp, #124	@ 0x7c
 800cc0e:	460c      	mov	r4, r1
 800cc10:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cc12:	2200      	movs	r2, #0
 800cc14:	921a      	str	r2, [sp, #104]	@ 0x68
 800cc16:	9005      	str	r0, [sp, #20]
 800cc18:	f04f 0a00 	mov.w	sl, #0
 800cc1c:	f04f 0b00 	mov.w	fp, #0
 800cc20:	460a      	mov	r2, r1
 800cc22:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc24:	7811      	ldrb	r1, [r2, #0]
 800cc26:	292b      	cmp	r1, #43	@ 0x2b
 800cc28:	d04a      	beq.n	800ccc0 <_strtod_l+0xb8>
 800cc2a:	d838      	bhi.n	800cc9e <_strtod_l+0x96>
 800cc2c:	290d      	cmp	r1, #13
 800cc2e:	d832      	bhi.n	800cc96 <_strtod_l+0x8e>
 800cc30:	2908      	cmp	r1, #8
 800cc32:	d832      	bhi.n	800cc9a <_strtod_l+0x92>
 800cc34:	2900      	cmp	r1, #0
 800cc36:	d03b      	beq.n	800ccb0 <_strtod_l+0xa8>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cc3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cc3e:	782a      	ldrb	r2, [r5, #0]
 800cc40:	2a30      	cmp	r2, #48	@ 0x30
 800cc42:	f040 80b3 	bne.w	800cdac <_strtod_l+0x1a4>
 800cc46:	786a      	ldrb	r2, [r5, #1]
 800cc48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cc4c:	2a58      	cmp	r2, #88	@ 0x58
 800cc4e:	d16e      	bne.n	800cd2e <_strtod_l+0x126>
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc54:	9301      	str	r3, [sp, #4]
 800cc56:	ab1a      	add	r3, sp, #104	@ 0x68
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	4a8e      	ldr	r2, [pc, #568]	@ (800ce94 <_strtod_l+0x28c>)
 800cc5c:	9805      	ldr	r0, [sp, #20]
 800cc5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cc60:	a919      	add	r1, sp, #100	@ 0x64
 800cc62:	f002 fb1f 	bl	800f2a4 <__gethex>
 800cc66:	f010 060f 	ands.w	r6, r0, #15
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	d005      	beq.n	800cc7a <_strtod_l+0x72>
 800cc6e:	2e06      	cmp	r6, #6
 800cc70:	d128      	bne.n	800ccc4 <_strtod_l+0xbc>
 800cc72:	3501      	adds	r5, #1
 800cc74:	2300      	movs	r3, #0
 800cc76:	9519      	str	r5, [sp, #100]	@ 0x64
 800cc78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f040 858e 	bne.w	800d79e <_strtod_l+0xb96>
 800cc82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc84:	b1cb      	cbz	r3, 800ccba <_strtod_l+0xb2>
 800cc86:	4652      	mov	r2, sl
 800cc88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cc8c:	ec43 2b10 	vmov	d0, r2, r3
 800cc90:	b01f      	add	sp, #124	@ 0x7c
 800cc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc96:	2920      	cmp	r1, #32
 800cc98:	d1ce      	bne.n	800cc38 <_strtod_l+0x30>
 800cc9a:	3201      	adds	r2, #1
 800cc9c:	e7c1      	b.n	800cc22 <_strtod_l+0x1a>
 800cc9e:	292d      	cmp	r1, #45	@ 0x2d
 800cca0:	d1ca      	bne.n	800cc38 <_strtod_l+0x30>
 800cca2:	2101      	movs	r1, #1
 800cca4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cca6:	1c51      	adds	r1, r2, #1
 800cca8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccaa:	7852      	ldrb	r2, [r2, #1]
 800ccac:	2a00      	cmp	r2, #0
 800ccae:	d1c5      	bne.n	800cc3c <_strtod_l+0x34>
 800ccb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ccb2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f040 8570 	bne.w	800d79a <_strtod_l+0xb92>
 800ccba:	4652      	mov	r2, sl
 800ccbc:	465b      	mov	r3, fp
 800ccbe:	e7e5      	b.n	800cc8c <_strtod_l+0x84>
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	e7ef      	b.n	800cca4 <_strtod_l+0x9c>
 800ccc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ccc6:	b13a      	cbz	r2, 800ccd8 <_strtod_l+0xd0>
 800ccc8:	2135      	movs	r1, #53	@ 0x35
 800ccca:	a81c      	add	r0, sp, #112	@ 0x70
 800cccc:	f003 fa44 	bl	8010158 <__copybits>
 800ccd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccd2:	9805      	ldr	r0, [sp, #20]
 800ccd4:	f002 fe12 	bl	800f8fc <_Bfree>
 800ccd8:	3e01      	subs	r6, #1
 800ccda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ccdc:	2e04      	cmp	r6, #4
 800ccde:	d806      	bhi.n	800ccee <_strtod_l+0xe6>
 800cce0:	e8df f006 	tbb	[pc, r6]
 800cce4:	201d0314 	.word	0x201d0314
 800cce8:	14          	.byte	0x14
 800cce9:	00          	.byte	0x00
 800ccea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ccee:	05e1      	lsls	r1, r4, #23
 800ccf0:	bf48      	it	mi
 800ccf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ccf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ccfa:	0d1b      	lsrs	r3, r3, #20
 800ccfc:	051b      	lsls	r3, r3, #20
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1bb      	bne.n	800cc7a <_strtod_l+0x72>
 800cd02:	f001 fb85 	bl	800e410 <__errno>
 800cd06:	2322      	movs	r3, #34	@ 0x22
 800cd08:	6003      	str	r3, [r0, #0]
 800cd0a:	e7b6      	b.n	800cc7a <_strtod_l+0x72>
 800cd0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cd10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cd18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cd1c:	e7e7      	b.n	800ccee <_strtod_l+0xe6>
 800cd1e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ce9c <_strtod_l+0x294>
 800cd22:	e7e4      	b.n	800ccee <_strtod_l+0xe6>
 800cd24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cd28:	f04f 3aff 	mov.w	sl, #4294967295
 800cd2c:	e7df      	b.n	800ccee <_strtod_l+0xe6>
 800cd2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd34:	785b      	ldrb	r3, [r3, #1]
 800cd36:	2b30      	cmp	r3, #48	@ 0x30
 800cd38:	d0f9      	beq.n	800cd2e <_strtod_l+0x126>
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d09d      	beq.n	800cc7a <_strtod_l+0x72>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd44:	930c      	str	r3, [sp, #48]	@ 0x30
 800cd46:	2300      	movs	r3, #0
 800cd48:	9308      	str	r3, [sp, #32]
 800cd4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd4c:	461f      	mov	r7, r3
 800cd4e:	220a      	movs	r2, #10
 800cd50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cd52:	7805      	ldrb	r5, [r0, #0]
 800cd54:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cd58:	b2d9      	uxtb	r1, r3
 800cd5a:	2909      	cmp	r1, #9
 800cd5c:	d928      	bls.n	800cdb0 <_strtod_l+0x1a8>
 800cd5e:	494e      	ldr	r1, [pc, #312]	@ (800ce98 <_strtod_l+0x290>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	f001 fad3 	bl	800e30c <strncmp>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d032      	beq.n	800cdd0 <_strtod_l+0x1c8>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	462a      	mov	r2, r5
 800cd6e:	4681      	mov	r9, r0
 800cd70:	463d      	mov	r5, r7
 800cd72:	4603      	mov	r3, r0
 800cd74:	2a65      	cmp	r2, #101	@ 0x65
 800cd76:	d001      	beq.n	800cd7c <_strtod_l+0x174>
 800cd78:	2a45      	cmp	r2, #69	@ 0x45
 800cd7a:	d114      	bne.n	800cda6 <_strtod_l+0x19e>
 800cd7c:	b91d      	cbnz	r5, 800cd86 <_strtod_l+0x17e>
 800cd7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd80:	4302      	orrs	r2, r0
 800cd82:	d095      	beq.n	800ccb0 <_strtod_l+0xa8>
 800cd84:	2500      	movs	r5, #0
 800cd86:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cd88:	1c62      	adds	r2, r4, #1
 800cd8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd8c:	7862      	ldrb	r2, [r4, #1]
 800cd8e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cd90:	d077      	beq.n	800ce82 <_strtod_l+0x27a>
 800cd92:	2a2d      	cmp	r2, #45	@ 0x2d
 800cd94:	d07b      	beq.n	800ce8e <_strtod_l+0x286>
 800cd96:	f04f 0c00 	mov.w	ip, #0
 800cd9a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cd9e:	2909      	cmp	r1, #9
 800cda0:	f240 8082 	bls.w	800cea8 <_strtod_l+0x2a0>
 800cda4:	9419      	str	r4, [sp, #100]	@ 0x64
 800cda6:	f04f 0800 	mov.w	r8, #0
 800cdaa:	e0a2      	b.n	800cef2 <_strtod_l+0x2ea>
 800cdac:	2300      	movs	r3, #0
 800cdae:	e7c7      	b.n	800cd40 <_strtod_l+0x138>
 800cdb0:	2f08      	cmp	r7, #8
 800cdb2:	bfd5      	itete	le
 800cdb4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cdb6:	9908      	ldrgt	r1, [sp, #32]
 800cdb8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cdbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cdc0:	f100 0001 	add.w	r0, r0, #1
 800cdc4:	bfd4      	ite	le
 800cdc6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cdc8:	9308      	strgt	r3, [sp, #32]
 800cdca:	3701      	adds	r7, #1
 800cdcc:	9019      	str	r0, [sp, #100]	@ 0x64
 800cdce:	e7bf      	b.n	800cd50 <_strtod_l+0x148>
 800cdd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdd6:	785a      	ldrb	r2, [r3, #1]
 800cdd8:	b37f      	cbz	r7, 800ce3a <_strtod_l+0x232>
 800cdda:	4681      	mov	r9, r0
 800cddc:	463d      	mov	r5, r7
 800cdde:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cde2:	2b09      	cmp	r3, #9
 800cde4:	d912      	bls.n	800ce0c <_strtod_l+0x204>
 800cde6:	2301      	movs	r3, #1
 800cde8:	e7c4      	b.n	800cd74 <_strtod_l+0x16c>
 800cdea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdec:	1c5a      	adds	r2, r3, #1
 800cdee:	9219      	str	r2, [sp, #100]	@ 0x64
 800cdf0:	785a      	ldrb	r2, [r3, #1]
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	2a30      	cmp	r2, #48	@ 0x30
 800cdf6:	d0f8      	beq.n	800cdea <_strtod_l+0x1e2>
 800cdf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cdfc:	2b08      	cmp	r3, #8
 800cdfe:	f200 84d3 	bhi.w	800d7a8 <_strtod_l+0xba0>
 800ce02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce04:	930c      	str	r3, [sp, #48]	@ 0x30
 800ce06:	4681      	mov	r9, r0
 800ce08:	2000      	movs	r0, #0
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	3a30      	subs	r2, #48	@ 0x30
 800ce0e:	f100 0301 	add.w	r3, r0, #1
 800ce12:	d02a      	beq.n	800ce6a <_strtod_l+0x262>
 800ce14:	4499      	add	r9, r3
 800ce16:	eb00 0c05 	add.w	ip, r0, r5
 800ce1a:	462b      	mov	r3, r5
 800ce1c:	210a      	movs	r1, #10
 800ce1e:	4563      	cmp	r3, ip
 800ce20:	d10d      	bne.n	800ce3e <_strtod_l+0x236>
 800ce22:	1c69      	adds	r1, r5, #1
 800ce24:	4401      	add	r1, r0
 800ce26:	4428      	add	r0, r5
 800ce28:	2808      	cmp	r0, #8
 800ce2a:	dc16      	bgt.n	800ce5a <_strtod_l+0x252>
 800ce2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ce2e:	230a      	movs	r3, #10
 800ce30:	fb03 2300 	mla	r3, r3, r0, r2
 800ce34:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce36:	2300      	movs	r3, #0
 800ce38:	e018      	b.n	800ce6c <_strtod_l+0x264>
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	e7da      	b.n	800cdf4 <_strtod_l+0x1ec>
 800ce3e:	2b08      	cmp	r3, #8
 800ce40:	f103 0301 	add.w	r3, r3, #1
 800ce44:	dc03      	bgt.n	800ce4e <_strtod_l+0x246>
 800ce46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ce48:	434e      	muls	r6, r1
 800ce4a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ce4c:	e7e7      	b.n	800ce1e <_strtod_l+0x216>
 800ce4e:	2b10      	cmp	r3, #16
 800ce50:	bfde      	ittt	le
 800ce52:	9e08      	ldrle	r6, [sp, #32]
 800ce54:	434e      	mulle	r6, r1
 800ce56:	9608      	strle	r6, [sp, #32]
 800ce58:	e7e1      	b.n	800ce1e <_strtod_l+0x216>
 800ce5a:	280f      	cmp	r0, #15
 800ce5c:	dceb      	bgt.n	800ce36 <_strtod_l+0x22e>
 800ce5e:	9808      	ldr	r0, [sp, #32]
 800ce60:	230a      	movs	r3, #10
 800ce62:	fb03 2300 	mla	r3, r3, r0, r2
 800ce66:	9308      	str	r3, [sp, #32]
 800ce68:	e7e5      	b.n	800ce36 <_strtod_l+0x22e>
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ce6e:	1c50      	adds	r0, r2, #1
 800ce70:	9019      	str	r0, [sp, #100]	@ 0x64
 800ce72:	7852      	ldrb	r2, [r2, #1]
 800ce74:	4618      	mov	r0, r3
 800ce76:	460d      	mov	r5, r1
 800ce78:	e7b1      	b.n	800cdde <_strtod_l+0x1d6>
 800ce7a:	f04f 0900 	mov.w	r9, #0
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e77d      	b.n	800cd7e <_strtod_l+0x176>
 800ce82:	f04f 0c00 	mov.w	ip, #0
 800ce86:	1ca2      	adds	r2, r4, #2
 800ce88:	9219      	str	r2, [sp, #100]	@ 0x64
 800ce8a:	78a2      	ldrb	r2, [r4, #2]
 800ce8c:	e785      	b.n	800cd9a <_strtod_l+0x192>
 800ce8e:	f04f 0c01 	mov.w	ip, #1
 800ce92:	e7f8      	b.n	800ce86 <_strtod_l+0x27e>
 800ce94:	08010ee0 	.word	0x08010ee0
 800ce98:	08010ec8 	.word	0x08010ec8
 800ce9c:	7ff00000 	.word	0x7ff00000
 800cea0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cea2:	1c51      	adds	r1, r2, #1
 800cea4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cea6:	7852      	ldrb	r2, [r2, #1]
 800cea8:	2a30      	cmp	r2, #48	@ 0x30
 800ceaa:	d0f9      	beq.n	800cea0 <_strtod_l+0x298>
 800ceac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ceb0:	2908      	cmp	r1, #8
 800ceb2:	f63f af78 	bhi.w	800cda6 <_strtod_l+0x19e>
 800ceb6:	3a30      	subs	r2, #48	@ 0x30
 800ceb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ceba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cebc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cebe:	f04f 080a 	mov.w	r8, #10
 800cec2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cec4:	1c56      	adds	r6, r2, #1
 800cec6:	9619      	str	r6, [sp, #100]	@ 0x64
 800cec8:	7852      	ldrb	r2, [r2, #1]
 800ceca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cece:	f1be 0f09 	cmp.w	lr, #9
 800ced2:	d939      	bls.n	800cf48 <_strtod_l+0x340>
 800ced4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ced6:	1a76      	subs	r6, r6, r1
 800ced8:	2e08      	cmp	r6, #8
 800ceda:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cede:	dc03      	bgt.n	800cee8 <_strtod_l+0x2e0>
 800cee0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cee2:	4588      	cmp	r8, r1
 800cee4:	bfa8      	it	ge
 800cee6:	4688      	movge	r8, r1
 800cee8:	f1bc 0f00 	cmp.w	ip, #0
 800ceec:	d001      	beq.n	800cef2 <_strtod_l+0x2ea>
 800ceee:	f1c8 0800 	rsb	r8, r8, #0
 800cef2:	2d00      	cmp	r5, #0
 800cef4:	d14e      	bne.n	800cf94 <_strtod_l+0x38c>
 800cef6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cef8:	4308      	orrs	r0, r1
 800cefa:	f47f aebe 	bne.w	800cc7a <_strtod_l+0x72>
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f47f aed6 	bne.w	800ccb0 <_strtod_l+0xa8>
 800cf04:	2a69      	cmp	r2, #105	@ 0x69
 800cf06:	d028      	beq.n	800cf5a <_strtod_l+0x352>
 800cf08:	dc25      	bgt.n	800cf56 <_strtod_l+0x34e>
 800cf0a:	2a49      	cmp	r2, #73	@ 0x49
 800cf0c:	d025      	beq.n	800cf5a <_strtod_l+0x352>
 800cf0e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cf10:	f47f aece 	bne.w	800ccb0 <_strtod_l+0xa8>
 800cf14:	499b      	ldr	r1, [pc, #620]	@ (800d184 <_strtod_l+0x57c>)
 800cf16:	a819      	add	r0, sp, #100	@ 0x64
 800cf18:	f002 fbe6 	bl	800f6e8 <__match>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	f43f aec7 	beq.w	800ccb0 <_strtod_l+0xa8>
 800cf22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b28      	cmp	r3, #40	@ 0x28
 800cf28:	d12e      	bne.n	800cf88 <_strtod_l+0x380>
 800cf2a:	4997      	ldr	r1, [pc, #604]	@ (800d188 <_strtod_l+0x580>)
 800cf2c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf2e:	a819      	add	r0, sp, #100	@ 0x64
 800cf30:	f002 fbee 	bl	800f710 <__hexnan>
 800cf34:	2805      	cmp	r0, #5
 800cf36:	d127      	bne.n	800cf88 <_strtod_l+0x380>
 800cf38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cf3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cf3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cf42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cf46:	e698      	b.n	800cc7a <_strtod_l+0x72>
 800cf48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cf4a:	fb08 2101 	mla	r1, r8, r1, r2
 800cf4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cf52:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf54:	e7b5      	b.n	800cec2 <_strtod_l+0x2ba>
 800cf56:	2a6e      	cmp	r2, #110	@ 0x6e
 800cf58:	e7da      	b.n	800cf10 <_strtod_l+0x308>
 800cf5a:	498c      	ldr	r1, [pc, #560]	@ (800d18c <_strtod_l+0x584>)
 800cf5c:	a819      	add	r0, sp, #100	@ 0x64
 800cf5e:	f002 fbc3 	bl	800f6e8 <__match>
 800cf62:	2800      	cmp	r0, #0
 800cf64:	f43f aea4 	beq.w	800ccb0 <_strtod_l+0xa8>
 800cf68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf6a:	4989      	ldr	r1, [pc, #548]	@ (800d190 <_strtod_l+0x588>)
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	a819      	add	r0, sp, #100	@ 0x64
 800cf70:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf72:	f002 fbb9 	bl	800f6e8 <__match>
 800cf76:	b910      	cbnz	r0, 800cf7e <_strtod_l+0x376>
 800cf78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d1a0 <_strtod_l+0x598>
 800cf82:	f04f 0a00 	mov.w	sl, #0
 800cf86:	e678      	b.n	800cc7a <_strtod_l+0x72>
 800cf88:	4882      	ldr	r0, [pc, #520]	@ (800d194 <_strtod_l+0x58c>)
 800cf8a:	f001 fa85 	bl	800e498 <nan>
 800cf8e:	ec5b ab10 	vmov	sl, fp, d0
 800cf92:	e672      	b.n	800cc7a <_strtod_l+0x72>
 800cf94:	eba8 0309 	sub.w	r3, r8, r9
 800cf98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cf9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf9c:	2f00      	cmp	r7, #0
 800cf9e:	bf08      	it	eq
 800cfa0:	462f      	moveq	r7, r5
 800cfa2:	2d10      	cmp	r5, #16
 800cfa4:	462c      	mov	r4, r5
 800cfa6:	bfa8      	it	ge
 800cfa8:	2410      	movge	r4, #16
 800cfaa:	f7f3 fad3 	bl	8000554 <__aeabi_ui2d>
 800cfae:	2d09      	cmp	r5, #9
 800cfb0:	4682      	mov	sl, r0
 800cfb2:	468b      	mov	fp, r1
 800cfb4:	dc13      	bgt.n	800cfde <_strtod_l+0x3d6>
 800cfb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f43f ae5e 	beq.w	800cc7a <_strtod_l+0x72>
 800cfbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfc0:	dd78      	ble.n	800d0b4 <_strtod_l+0x4ac>
 800cfc2:	2b16      	cmp	r3, #22
 800cfc4:	dc5f      	bgt.n	800d086 <_strtod_l+0x47e>
 800cfc6:	4974      	ldr	r1, [pc, #464]	@ (800d198 <_strtod_l+0x590>)
 800cfc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cfcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cfd0:	4652      	mov	r2, sl
 800cfd2:	465b      	mov	r3, fp
 800cfd4:	f7f3 fb38 	bl	8000648 <__aeabi_dmul>
 800cfd8:	4682      	mov	sl, r0
 800cfda:	468b      	mov	fp, r1
 800cfdc:	e64d      	b.n	800cc7a <_strtod_l+0x72>
 800cfde:	4b6e      	ldr	r3, [pc, #440]	@ (800d198 <_strtod_l+0x590>)
 800cfe0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfe4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cfe8:	f7f3 fb2e 	bl	8000648 <__aeabi_dmul>
 800cfec:	4682      	mov	sl, r0
 800cfee:	9808      	ldr	r0, [sp, #32]
 800cff0:	468b      	mov	fp, r1
 800cff2:	f7f3 faaf 	bl	8000554 <__aeabi_ui2d>
 800cff6:	4602      	mov	r2, r0
 800cff8:	460b      	mov	r3, r1
 800cffa:	4650      	mov	r0, sl
 800cffc:	4659      	mov	r1, fp
 800cffe:	f7f3 f96d 	bl	80002dc <__adddf3>
 800d002:	2d0f      	cmp	r5, #15
 800d004:	4682      	mov	sl, r0
 800d006:	468b      	mov	fp, r1
 800d008:	ddd5      	ble.n	800cfb6 <_strtod_l+0x3ae>
 800d00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d00c:	1b2c      	subs	r4, r5, r4
 800d00e:	441c      	add	r4, r3
 800d010:	2c00      	cmp	r4, #0
 800d012:	f340 8096 	ble.w	800d142 <_strtod_l+0x53a>
 800d016:	f014 030f 	ands.w	r3, r4, #15
 800d01a:	d00a      	beq.n	800d032 <_strtod_l+0x42a>
 800d01c:	495e      	ldr	r1, [pc, #376]	@ (800d198 <_strtod_l+0x590>)
 800d01e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d022:	4652      	mov	r2, sl
 800d024:	465b      	mov	r3, fp
 800d026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d02a:	f7f3 fb0d 	bl	8000648 <__aeabi_dmul>
 800d02e:	4682      	mov	sl, r0
 800d030:	468b      	mov	fp, r1
 800d032:	f034 040f 	bics.w	r4, r4, #15
 800d036:	d073      	beq.n	800d120 <_strtod_l+0x518>
 800d038:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d03c:	dd48      	ble.n	800d0d0 <_strtod_l+0x4c8>
 800d03e:	2400      	movs	r4, #0
 800d040:	46a0      	mov	r8, r4
 800d042:	940a      	str	r4, [sp, #40]	@ 0x28
 800d044:	46a1      	mov	r9, r4
 800d046:	9a05      	ldr	r2, [sp, #20]
 800d048:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d1a0 <_strtod_l+0x598>
 800d04c:	2322      	movs	r3, #34	@ 0x22
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d056:	2b00      	cmp	r3, #0
 800d058:	f43f ae0f 	beq.w	800cc7a <_strtod_l+0x72>
 800d05c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d05e:	9805      	ldr	r0, [sp, #20]
 800d060:	f002 fc4c 	bl	800f8fc <_Bfree>
 800d064:	9805      	ldr	r0, [sp, #20]
 800d066:	4649      	mov	r1, r9
 800d068:	f002 fc48 	bl	800f8fc <_Bfree>
 800d06c:	9805      	ldr	r0, [sp, #20]
 800d06e:	4641      	mov	r1, r8
 800d070:	f002 fc44 	bl	800f8fc <_Bfree>
 800d074:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d076:	9805      	ldr	r0, [sp, #20]
 800d078:	f002 fc40 	bl	800f8fc <_Bfree>
 800d07c:	9805      	ldr	r0, [sp, #20]
 800d07e:	4621      	mov	r1, r4
 800d080:	f002 fc3c 	bl	800f8fc <_Bfree>
 800d084:	e5f9      	b.n	800cc7a <_strtod_l+0x72>
 800d086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d088:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d08c:	4293      	cmp	r3, r2
 800d08e:	dbbc      	blt.n	800d00a <_strtod_l+0x402>
 800d090:	4c41      	ldr	r4, [pc, #260]	@ (800d198 <_strtod_l+0x590>)
 800d092:	f1c5 050f 	rsb	r5, r5, #15
 800d096:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d09a:	4652      	mov	r2, sl
 800d09c:	465b      	mov	r3, fp
 800d09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0a2:	f7f3 fad1 	bl	8000648 <__aeabi_dmul>
 800d0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a8:	1b5d      	subs	r5, r3, r5
 800d0aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0b2:	e78f      	b.n	800cfd4 <_strtod_l+0x3cc>
 800d0b4:	3316      	adds	r3, #22
 800d0b6:	dba8      	blt.n	800d00a <_strtod_l+0x402>
 800d0b8:	4b37      	ldr	r3, [pc, #220]	@ (800d198 <_strtod_l+0x590>)
 800d0ba:	eba9 0808 	sub.w	r8, r9, r8
 800d0be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d0c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	4659      	mov	r1, fp
 800d0ca:	f7f3 fbe7 	bl	800089c <__aeabi_ddiv>
 800d0ce:	e783      	b.n	800cfd8 <_strtod_l+0x3d0>
 800d0d0:	4b32      	ldr	r3, [pc, #200]	@ (800d19c <_strtod_l+0x594>)
 800d0d2:	9308      	str	r3, [sp, #32]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	1124      	asrs	r4, r4, #4
 800d0d8:	4650      	mov	r0, sl
 800d0da:	4659      	mov	r1, fp
 800d0dc:	461e      	mov	r6, r3
 800d0de:	2c01      	cmp	r4, #1
 800d0e0:	dc21      	bgt.n	800d126 <_strtod_l+0x51e>
 800d0e2:	b10b      	cbz	r3, 800d0e8 <_strtod_l+0x4e0>
 800d0e4:	4682      	mov	sl, r0
 800d0e6:	468b      	mov	fp, r1
 800d0e8:	492c      	ldr	r1, [pc, #176]	@ (800d19c <_strtod_l+0x594>)
 800d0ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d0ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d0f2:	4652      	mov	r2, sl
 800d0f4:	465b      	mov	r3, fp
 800d0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0fa:	f7f3 faa5 	bl	8000648 <__aeabi_dmul>
 800d0fe:	4b28      	ldr	r3, [pc, #160]	@ (800d1a0 <_strtod_l+0x598>)
 800d100:	460a      	mov	r2, r1
 800d102:	400b      	ands	r3, r1
 800d104:	4927      	ldr	r1, [pc, #156]	@ (800d1a4 <_strtod_l+0x59c>)
 800d106:	428b      	cmp	r3, r1
 800d108:	4682      	mov	sl, r0
 800d10a:	d898      	bhi.n	800d03e <_strtod_l+0x436>
 800d10c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d110:	428b      	cmp	r3, r1
 800d112:	bf86      	itte	hi
 800d114:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d1a8 <_strtod_l+0x5a0>
 800d118:	f04f 3aff 	movhi.w	sl, #4294967295
 800d11c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d120:	2300      	movs	r3, #0
 800d122:	9308      	str	r3, [sp, #32]
 800d124:	e07a      	b.n	800d21c <_strtod_l+0x614>
 800d126:	07e2      	lsls	r2, r4, #31
 800d128:	d505      	bpl.n	800d136 <_strtod_l+0x52e>
 800d12a:	9b08      	ldr	r3, [sp, #32]
 800d12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d130:	f7f3 fa8a 	bl	8000648 <__aeabi_dmul>
 800d134:	2301      	movs	r3, #1
 800d136:	9a08      	ldr	r2, [sp, #32]
 800d138:	3208      	adds	r2, #8
 800d13a:	3601      	adds	r6, #1
 800d13c:	1064      	asrs	r4, r4, #1
 800d13e:	9208      	str	r2, [sp, #32]
 800d140:	e7cd      	b.n	800d0de <_strtod_l+0x4d6>
 800d142:	d0ed      	beq.n	800d120 <_strtod_l+0x518>
 800d144:	4264      	negs	r4, r4
 800d146:	f014 020f 	ands.w	r2, r4, #15
 800d14a:	d00a      	beq.n	800d162 <_strtod_l+0x55a>
 800d14c:	4b12      	ldr	r3, [pc, #72]	@ (800d198 <_strtod_l+0x590>)
 800d14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d152:	4650      	mov	r0, sl
 800d154:	4659      	mov	r1, fp
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	f7f3 fb9f 	bl	800089c <__aeabi_ddiv>
 800d15e:	4682      	mov	sl, r0
 800d160:	468b      	mov	fp, r1
 800d162:	1124      	asrs	r4, r4, #4
 800d164:	d0dc      	beq.n	800d120 <_strtod_l+0x518>
 800d166:	2c1f      	cmp	r4, #31
 800d168:	dd20      	ble.n	800d1ac <_strtod_l+0x5a4>
 800d16a:	2400      	movs	r4, #0
 800d16c:	46a0      	mov	r8, r4
 800d16e:	940a      	str	r4, [sp, #40]	@ 0x28
 800d170:	46a1      	mov	r9, r4
 800d172:	9a05      	ldr	r2, [sp, #20]
 800d174:	2322      	movs	r3, #34	@ 0x22
 800d176:	f04f 0a00 	mov.w	sl, #0
 800d17a:	f04f 0b00 	mov.w	fp, #0
 800d17e:	6013      	str	r3, [r2, #0]
 800d180:	e768      	b.n	800d054 <_strtod_l+0x44c>
 800d182:	bf00      	nop
 800d184:	08010f2d 	.word	0x08010f2d
 800d188:	08010ecc 	.word	0x08010ecc
 800d18c:	08010f25 	.word	0x08010f25
 800d190:	08010f5f 	.word	0x08010f5f
 800d194:	080112ed 	.word	0x080112ed
 800d198:	080110d8 	.word	0x080110d8
 800d19c:	080110b0 	.word	0x080110b0
 800d1a0:	7ff00000 	.word	0x7ff00000
 800d1a4:	7ca00000 	.word	0x7ca00000
 800d1a8:	7fefffff 	.word	0x7fefffff
 800d1ac:	f014 0310 	ands.w	r3, r4, #16
 800d1b0:	bf18      	it	ne
 800d1b2:	236a      	movne	r3, #106	@ 0x6a
 800d1b4:	4ea9      	ldr	r6, [pc, #676]	@ (800d45c <_strtod_l+0x854>)
 800d1b6:	9308      	str	r3, [sp, #32]
 800d1b8:	4650      	mov	r0, sl
 800d1ba:	4659      	mov	r1, fp
 800d1bc:	2300      	movs	r3, #0
 800d1be:	07e2      	lsls	r2, r4, #31
 800d1c0:	d504      	bpl.n	800d1cc <_strtod_l+0x5c4>
 800d1c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1c6:	f7f3 fa3f 	bl	8000648 <__aeabi_dmul>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	1064      	asrs	r4, r4, #1
 800d1ce:	f106 0608 	add.w	r6, r6, #8
 800d1d2:	d1f4      	bne.n	800d1be <_strtod_l+0x5b6>
 800d1d4:	b10b      	cbz	r3, 800d1da <_strtod_l+0x5d2>
 800d1d6:	4682      	mov	sl, r0
 800d1d8:	468b      	mov	fp, r1
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	b1b3      	cbz	r3, 800d20c <_strtod_l+0x604>
 800d1de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d1e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	4659      	mov	r1, fp
 800d1ea:	dd0f      	ble.n	800d20c <_strtod_l+0x604>
 800d1ec:	2b1f      	cmp	r3, #31
 800d1ee:	dd55      	ble.n	800d29c <_strtod_l+0x694>
 800d1f0:	2b34      	cmp	r3, #52	@ 0x34
 800d1f2:	bfde      	ittt	le
 800d1f4:	f04f 33ff 	movle.w	r3, #4294967295
 800d1f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d1fc:	4093      	lslle	r3, r2
 800d1fe:	f04f 0a00 	mov.w	sl, #0
 800d202:	bfcc      	ite	gt
 800d204:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d208:	ea03 0b01 	andle.w	fp, r3, r1
 800d20c:	2200      	movs	r2, #0
 800d20e:	2300      	movs	r3, #0
 800d210:	4650      	mov	r0, sl
 800d212:	4659      	mov	r1, fp
 800d214:	f7f3 fc80 	bl	8000b18 <__aeabi_dcmpeq>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d1a6      	bne.n	800d16a <_strtod_l+0x562>
 800d21c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d222:	9805      	ldr	r0, [sp, #20]
 800d224:	462b      	mov	r3, r5
 800d226:	463a      	mov	r2, r7
 800d228:	f002 fbd0 	bl	800f9cc <__s2b>
 800d22c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d22e:	2800      	cmp	r0, #0
 800d230:	f43f af05 	beq.w	800d03e <_strtod_l+0x436>
 800d234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d236:	2a00      	cmp	r2, #0
 800d238:	eba9 0308 	sub.w	r3, r9, r8
 800d23c:	bfa8      	it	ge
 800d23e:	2300      	movge	r3, #0
 800d240:	9312      	str	r3, [sp, #72]	@ 0x48
 800d242:	2400      	movs	r4, #0
 800d244:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d248:	9316      	str	r3, [sp, #88]	@ 0x58
 800d24a:	46a0      	mov	r8, r4
 800d24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d24e:	9805      	ldr	r0, [sp, #20]
 800d250:	6859      	ldr	r1, [r3, #4]
 800d252:	f002 fb13 	bl	800f87c <_Balloc>
 800d256:	4681      	mov	r9, r0
 800d258:	2800      	cmp	r0, #0
 800d25a:	f43f aef4 	beq.w	800d046 <_strtod_l+0x43e>
 800d25e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d260:	691a      	ldr	r2, [r3, #16]
 800d262:	3202      	adds	r2, #2
 800d264:	f103 010c 	add.w	r1, r3, #12
 800d268:	0092      	lsls	r2, r2, #2
 800d26a:	300c      	adds	r0, #12
 800d26c:	f001 f905 	bl	800e47a <memcpy>
 800d270:	ec4b ab10 	vmov	d0, sl, fp
 800d274:	9805      	ldr	r0, [sp, #20]
 800d276:	aa1c      	add	r2, sp, #112	@ 0x70
 800d278:	a91b      	add	r1, sp, #108	@ 0x6c
 800d27a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d27e:	f002 fee1 	bl	8010044 <__d2b>
 800d282:	901a      	str	r0, [sp, #104]	@ 0x68
 800d284:	2800      	cmp	r0, #0
 800d286:	f43f aede 	beq.w	800d046 <_strtod_l+0x43e>
 800d28a:	9805      	ldr	r0, [sp, #20]
 800d28c:	2101      	movs	r1, #1
 800d28e:	f002 fc33 	bl	800faf8 <__i2b>
 800d292:	4680      	mov	r8, r0
 800d294:	b948      	cbnz	r0, 800d2aa <_strtod_l+0x6a2>
 800d296:	f04f 0800 	mov.w	r8, #0
 800d29a:	e6d4      	b.n	800d046 <_strtod_l+0x43e>
 800d29c:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a4:	ea03 0a0a 	and.w	sl, r3, sl
 800d2a8:	e7b0      	b.n	800d20c <_strtod_l+0x604>
 800d2aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d2ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d2ae:	2d00      	cmp	r5, #0
 800d2b0:	bfab      	itete	ge
 800d2b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d2b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d2b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d2b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d2ba:	bfac      	ite	ge
 800d2bc:	18ef      	addge	r7, r5, r3
 800d2be:	1b5e      	sublt	r6, r3, r5
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	1aed      	subs	r5, r5, r3
 800d2c4:	4415      	add	r5, r2
 800d2c6:	4b66      	ldr	r3, [pc, #408]	@ (800d460 <_strtod_l+0x858>)
 800d2c8:	3d01      	subs	r5, #1
 800d2ca:	429d      	cmp	r5, r3
 800d2cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d2d0:	da50      	bge.n	800d374 <_strtod_l+0x76c>
 800d2d2:	1b5b      	subs	r3, r3, r5
 800d2d4:	2b1f      	cmp	r3, #31
 800d2d6:	eba2 0203 	sub.w	r2, r2, r3
 800d2da:	f04f 0101 	mov.w	r1, #1
 800d2de:	dc3d      	bgt.n	800d35c <_strtod_l+0x754>
 800d2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2ea:	18bd      	adds	r5, r7, r2
 800d2ec:	9b08      	ldr	r3, [sp, #32]
 800d2ee:	42af      	cmp	r7, r5
 800d2f0:	4416      	add	r6, r2
 800d2f2:	441e      	add	r6, r3
 800d2f4:	463b      	mov	r3, r7
 800d2f6:	bfa8      	it	ge
 800d2f8:	462b      	movge	r3, r5
 800d2fa:	42b3      	cmp	r3, r6
 800d2fc:	bfa8      	it	ge
 800d2fe:	4633      	movge	r3, r6
 800d300:	2b00      	cmp	r3, #0
 800d302:	bfc2      	ittt	gt
 800d304:	1aed      	subgt	r5, r5, r3
 800d306:	1af6      	subgt	r6, r6, r3
 800d308:	1aff      	subgt	r7, r7, r3
 800d30a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	dd16      	ble.n	800d33e <_strtod_l+0x736>
 800d310:	4641      	mov	r1, r8
 800d312:	9805      	ldr	r0, [sp, #20]
 800d314:	461a      	mov	r2, r3
 800d316:	f002 fcaf 	bl	800fc78 <__pow5mult>
 800d31a:	4680      	mov	r8, r0
 800d31c:	2800      	cmp	r0, #0
 800d31e:	d0ba      	beq.n	800d296 <_strtod_l+0x68e>
 800d320:	4601      	mov	r1, r0
 800d322:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d324:	9805      	ldr	r0, [sp, #20]
 800d326:	f002 fbfd 	bl	800fb24 <__multiply>
 800d32a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f43f ae8a 	beq.w	800d046 <_strtod_l+0x43e>
 800d332:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d334:	9805      	ldr	r0, [sp, #20]
 800d336:	f002 fae1 	bl	800f8fc <_Bfree>
 800d33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d33c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d33e:	2d00      	cmp	r5, #0
 800d340:	dc1d      	bgt.n	800d37e <_strtod_l+0x776>
 800d342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d344:	2b00      	cmp	r3, #0
 800d346:	dd23      	ble.n	800d390 <_strtod_l+0x788>
 800d348:	4649      	mov	r1, r9
 800d34a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d34c:	9805      	ldr	r0, [sp, #20]
 800d34e:	f002 fc93 	bl	800fc78 <__pow5mult>
 800d352:	4681      	mov	r9, r0
 800d354:	b9e0      	cbnz	r0, 800d390 <_strtod_l+0x788>
 800d356:	f04f 0900 	mov.w	r9, #0
 800d35a:	e674      	b.n	800d046 <_strtod_l+0x43e>
 800d35c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d360:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d364:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d368:	35e2      	adds	r5, #226	@ 0xe2
 800d36a:	fa01 f305 	lsl.w	r3, r1, r5
 800d36e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d370:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d372:	e7ba      	b.n	800d2ea <_strtod_l+0x6e2>
 800d374:	2300      	movs	r3, #0
 800d376:	9310      	str	r3, [sp, #64]	@ 0x40
 800d378:	2301      	movs	r3, #1
 800d37a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d37c:	e7b5      	b.n	800d2ea <_strtod_l+0x6e2>
 800d37e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d380:	9805      	ldr	r0, [sp, #20]
 800d382:	462a      	mov	r2, r5
 800d384:	f002 fcd2 	bl	800fd2c <__lshift>
 800d388:	901a      	str	r0, [sp, #104]	@ 0x68
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d1d9      	bne.n	800d342 <_strtod_l+0x73a>
 800d38e:	e65a      	b.n	800d046 <_strtod_l+0x43e>
 800d390:	2e00      	cmp	r6, #0
 800d392:	dd07      	ble.n	800d3a4 <_strtod_l+0x79c>
 800d394:	4649      	mov	r1, r9
 800d396:	9805      	ldr	r0, [sp, #20]
 800d398:	4632      	mov	r2, r6
 800d39a:	f002 fcc7 	bl	800fd2c <__lshift>
 800d39e:	4681      	mov	r9, r0
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d0d8      	beq.n	800d356 <_strtod_l+0x74e>
 800d3a4:	2f00      	cmp	r7, #0
 800d3a6:	dd08      	ble.n	800d3ba <_strtod_l+0x7b2>
 800d3a8:	4641      	mov	r1, r8
 800d3aa:	9805      	ldr	r0, [sp, #20]
 800d3ac:	463a      	mov	r2, r7
 800d3ae:	f002 fcbd 	bl	800fd2c <__lshift>
 800d3b2:	4680      	mov	r8, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	f43f ae46 	beq.w	800d046 <_strtod_l+0x43e>
 800d3ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3bc:	9805      	ldr	r0, [sp, #20]
 800d3be:	464a      	mov	r2, r9
 800d3c0:	f002 fd3c 	bl	800fe3c <__mdiff>
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	f43f ae3d 	beq.w	800d046 <_strtod_l+0x43e>
 800d3cc:	68c3      	ldr	r3, [r0, #12]
 800d3ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60c3      	str	r3, [r0, #12]
 800d3d4:	4641      	mov	r1, r8
 800d3d6:	f002 fd15 	bl	800fe04 <__mcmp>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	da46      	bge.n	800d46c <_strtod_l+0x864>
 800d3de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3e0:	ea53 030a 	orrs.w	r3, r3, sl
 800d3e4:	d16c      	bne.n	800d4c0 <_strtod_l+0x8b8>
 800d3e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d168      	bne.n	800d4c0 <_strtod_l+0x8b8>
 800d3ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d3f2:	0d1b      	lsrs	r3, r3, #20
 800d3f4:	051b      	lsls	r3, r3, #20
 800d3f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d3fa:	d961      	bls.n	800d4c0 <_strtod_l+0x8b8>
 800d3fc:	6963      	ldr	r3, [r4, #20]
 800d3fe:	b913      	cbnz	r3, 800d406 <_strtod_l+0x7fe>
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	2b01      	cmp	r3, #1
 800d404:	dd5c      	ble.n	800d4c0 <_strtod_l+0x8b8>
 800d406:	4621      	mov	r1, r4
 800d408:	2201      	movs	r2, #1
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	f002 fc8e 	bl	800fd2c <__lshift>
 800d410:	4641      	mov	r1, r8
 800d412:	4604      	mov	r4, r0
 800d414:	f002 fcf6 	bl	800fe04 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	dd51      	ble.n	800d4c0 <_strtod_l+0x8b8>
 800d41c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d420:	9a08      	ldr	r2, [sp, #32]
 800d422:	0d1b      	lsrs	r3, r3, #20
 800d424:	051b      	lsls	r3, r3, #20
 800d426:	2a00      	cmp	r2, #0
 800d428:	d06b      	beq.n	800d502 <_strtod_l+0x8fa>
 800d42a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d42e:	d868      	bhi.n	800d502 <_strtod_l+0x8fa>
 800d430:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d434:	f67f ae9d 	bls.w	800d172 <_strtod_l+0x56a>
 800d438:	4b0a      	ldr	r3, [pc, #40]	@ (800d464 <_strtod_l+0x85c>)
 800d43a:	4650      	mov	r0, sl
 800d43c:	4659      	mov	r1, fp
 800d43e:	2200      	movs	r2, #0
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <_strtod_l+0x860>)
 800d446:	400b      	ands	r3, r1
 800d448:	4682      	mov	sl, r0
 800d44a:	468b      	mov	fp, r1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f47f ae05 	bne.w	800d05c <_strtod_l+0x454>
 800d452:	9a05      	ldr	r2, [sp, #20]
 800d454:	2322      	movs	r3, #34	@ 0x22
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	e600      	b.n	800d05c <_strtod_l+0x454>
 800d45a:	bf00      	nop
 800d45c:	08010ef8 	.word	0x08010ef8
 800d460:	fffffc02 	.word	0xfffffc02
 800d464:	39500000 	.word	0x39500000
 800d468:	7ff00000 	.word	0x7ff00000
 800d46c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d470:	d165      	bne.n	800d53e <_strtod_l+0x936>
 800d472:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d478:	b35a      	cbz	r2, 800d4d2 <_strtod_l+0x8ca>
 800d47a:	4a9f      	ldr	r2, [pc, #636]	@ (800d6f8 <_strtod_l+0xaf0>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d12b      	bne.n	800d4d8 <_strtod_l+0x8d0>
 800d480:	9b08      	ldr	r3, [sp, #32]
 800d482:	4651      	mov	r1, sl
 800d484:	b303      	cbz	r3, 800d4c8 <_strtod_l+0x8c0>
 800d486:	4b9d      	ldr	r3, [pc, #628]	@ (800d6fc <_strtod_l+0xaf4>)
 800d488:	465a      	mov	r2, fp
 800d48a:	4013      	ands	r3, r2
 800d48c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d490:	f04f 32ff 	mov.w	r2, #4294967295
 800d494:	d81b      	bhi.n	800d4ce <_strtod_l+0x8c6>
 800d496:	0d1b      	lsrs	r3, r3, #20
 800d498:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d49c:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	d119      	bne.n	800d4d8 <_strtod_l+0x8d0>
 800d4a4:	4b96      	ldr	r3, [pc, #600]	@ (800d700 <_strtod_l+0xaf8>)
 800d4a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d102      	bne.n	800d4b2 <_strtod_l+0x8aa>
 800d4ac:	3101      	adds	r1, #1
 800d4ae:	f43f adca 	beq.w	800d046 <_strtod_l+0x43e>
 800d4b2:	4b92      	ldr	r3, [pc, #584]	@ (800d6fc <_strtod_l+0xaf4>)
 800d4b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4b6:	401a      	ands	r2, r3
 800d4b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d4bc:	f04f 0a00 	mov.w	sl, #0
 800d4c0:	9b08      	ldr	r3, [sp, #32]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1b8      	bne.n	800d438 <_strtod_l+0x830>
 800d4c6:	e5c9      	b.n	800d05c <_strtod_l+0x454>
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4cc:	e7e8      	b.n	800d4a0 <_strtod_l+0x898>
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	e7e6      	b.n	800d4a0 <_strtod_l+0x898>
 800d4d2:	ea53 030a 	orrs.w	r3, r3, sl
 800d4d6:	d0a1      	beq.n	800d41c <_strtod_l+0x814>
 800d4d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d4da:	b1db      	cbz	r3, 800d514 <_strtod_l+0x90c>
 800d4dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4de:	4213      	tst	r3, r2
 800d4e0:	d0ee      	beq.n	800d4c0 <_strtod_l+0x8b8>
 800d4e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4e4:	9a08      	ldr	r2, [sp, #32]
 800d4e6:	4650      	mov	r0, sl
 800d4e8:	4659      	mov	r1, fp
 800d4ea:	b1bb      	cbz	r3, 800d51c <_strtod_l+0x914>
 800d4ec:	f7ff fb6e 	bl	800cbcc <sulp>
 800d4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4f4:	ec53 2b10 	vmov	r2, r3, d0
 800d4f8:	f7f2 fef0 	bl	80002dc <__adddf3>
 800d4fc:	4682      	mov	sl, r0
 800d4fe:	468b      	mov	fp, r1
 800d500:	e7de      	b.n	800d4c0 <_strtod_l+0x8b8>
 800d502:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d506:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d50a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d50e:	f04f 3aff 	mov.w	sl, #4294967295
 800d512:	e7d5      	b.n	800d4c0 <_strtod_l+0x8b8>
 800d514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d516:	ea13 0f0a 	tst.w	r3, sl
 800d51a:	e7e1      	b.n	800d4e0 <_strtod_l+0x8d8>
 800d51c:	f7ff fb56 	bl	800cbcc <sulp>
 800d520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d524:	ec53 2b10 	vmov	r2, r3, d0
 800d528:	f7f2 fed6 	bl	80002d8 <__aeabi_dsub>
 800d52c:	2200      	movs	r2, #0
 800d52e:	2300      	movs	r3, #0
 800d530:	4682      	mov	sl, r0
 800d532:	468b      	mov	fp, r1
 800d534:	f7f3 faf0 	bl	8000b18 <__aeabi_dcmpeq>
 800d538:	2800      	cmp	r0, #0
 800d53a:	d0c1      	beq.n	800d4c0 <_strtod_l+0x8b8>
 800d53c:	e619      	b.n	800d172 <_strtod_l+0x56a>
 800d53e:	4641      	mov	r1, r8
 800d540:	4620      	mov	r0, r4
 800d542:	f002 fdd7 	bl	80100f4 <__ratio>
 800d546:	ec57 6b10 	vmov	r6, r7, d0
 800d54a:	2200      	movs	r2, #0
 800d54c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d550:	4630      	mov	r0, r6
 800d552:	4639      	mov	r1, r7
 800d554:	f7f3 faf4 	bl	8000b40 <__aeabi_dcmple>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d06f      	beq.n	800d63c <_strtod_l+0xa34>
 800d55c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d17a      	bne.n	800d658 <_strtod_l+0xa50>
 800d562:	f1ba 0f00 	cmp.w	sl, #0
 800d566:	d158      	bne.n	800d61a <_strtod_l+0xa12>
 800d568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d56a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d15a      	bne.n	800d628 <_strtod_l+0xa20>
 800d572:	4b64      	ldr	r3, [pc, #400]	@ (800d704 <_strtod_l+0xafc>)
 800d574:	2200      	movs	r2, #0
 800d576:	4630      	mov	r0, r6
 800d578:	4639      	mov	r1, r7
 800d57a:	f7f3 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800d57e:	2800      	cmp	r0, #0
 800d580:	d159      	bne.n	800d636 <_strtod_l+0xa2e>
 800d582:	4630      	mov	r0, r6
 800d584:	4639      	mov	r1, r7
 800d586:	4b60      	ldr	r3, [pc, #384]	@ (800d708 <_strtod_l+0xb00>)
 800d588:	2200      	movs	r2, #0
 800d58a:	f7f3 f85d 	bl	8000648 <__aeabi_dmul>
 800d58e:	4606      	mov	r6, r0
 800d590:	460f      	mov	r7, r1
 800d592:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d596:	9606      	str	r6, [sp, #24]
 800d598:	9307      	str	r3, [sp, #28]
 800d59a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d59e:	4d57      	ldr	r5, [pc, #348]	@ (800d6fc <_strtod_l+0xaf4>)
 800d5a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d5a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5a6:	401d      	ands	r5, r3
 800d5a8:	4b58      	ldr	r3, [pc, #352]	@ (800d70c <_strtod_l+0xb04>)
 800d5aa:	429d      	cmp	r5, r3
 800d5ac:	f040 80b2 	bne.w	800d714 <_strtod_l+0xb0c>
 800d5b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d5b6:	ec4b ab10 	vmov	d0, sl, fp
 800d5ba:	f002 fcd3 	bl	800ff64 <__ulp>
 800d5be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5c2:	ec51 0b10 	vmov	r0, r1, d0
 800d5c6:	f7f3 f83f 	bl	8000648 <__aeabi_dmul>
 800d5ca:	4652      	mov	r2, sl
 800d5cc:	465b      	mov	r3, fp
 800d5ce:	f7f2 fe85 	bl	80002dc <__adddf3>
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	4949      	ldr	r1, [pc, #292]	@ (800d6fc <_strtod_l+0xaf4>)
 800d5d6:	4a4e      	ldr	r2, [pc, #312]	@ (800d710 <_strtod_l+0xb08>)
 800d5d8:	4019      	ands	r1, r3
 800d5da:	4291      	cmp	r1, r2
 800d5dc:	4682      	mov	sl, r0
 800d5de:	d942      	bls.n	800d666 <_strtod_l+0xa5e>
 800d5e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d5e2:	4b47      	ldr	r3, [pc, #284]	@ (800d700 <_strtod_l+0xaf8>)
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d103      	bne.n	800d5f0 <_strtod_l+0x9e8>
 800d5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	f43f ad2b 	beq.w	800d046 <_strtod_l+0x43e>
 800d5f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d700 <_strtod_l+0xaf8>
 800d5f4:	f04f 3aff 	mov.w	sl, #4294967295
 800d5f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d5fa:	9805      	ldr	r0, [sp, #20]
 800d5fc:	f002 f97e 	bl	800f8fc <_Bfree>
 800d600:	9805      	ldr	r0, [sp, #20]
 800d602:	4649      	mov	r1, r9
 800d604:	f002 f97a 	bl	800f8fc <_Bfree>
 800d608:	9805      	ldr	r0, [sp, #20]
 800d60a:	4641      	mov	r1, r8
 800d60c:	f002 f976 	bl	800f8fc <_Bfree>
 800d610:	9805      	ldr	r0, [sp, #20]
 800d612:	4621      	mov	r1, r4
 800d614:	f002 f972 	bl	800f8fc <_Bfree>
 800d618:	e618      	b.n	800d24c <_strtod_l+0x644>
 800d61a:	f1ba 0f01 	cmp.w	sl, #1
 800d61e:	d103      	bne.n	800d628 <_strtod_l+0xa20>
 800d620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d622:	2b00      	cmp	r3, #0
 800d624:	f43f ada5 	beq.w	800d172 <_strtod_l+0x56a>
 800d628:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d6d8 <_strtod_l+0xad0>
 800d62c:	4f35      	ldr	r7, [pc, #212]	@ (800d704 <_strtod_l+0xafc>)
 800d62e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d632:	2600      	movs	r6, #0
 800d634:	e7b1      	b.n	800d59a <_strtod_l+0x992>
 800d636:	4f34      	ldr	r7, [pc, #208]	@ (800d708 <_strtod_l+0xb00>)
 800d638:	2600      	movs	r6, #0
 800d63a:	e7aa      	b.n	800d592 <_strtod_l+0x98a>
 800d63c:	4b32      	ldr	r3, [pc, #200]	@ (800d708 <_strtod_l+0xb00>)
 800d63e:	4630      	mov	r0, r6
 800d640:	4639      	mov	r1, r7
 800d642:	2200      	movs	r2, #0
 800d644:	f7f3 f800 	bl	8000648 <__aeabi_dmul>
 800d648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d64a:	4606      	mov	r6, r0
 800d64c:	460f      	mov	r7, r1
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d09f      	beq.n	800d592 <_strtod_l+0x98a>
 800d652:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d656:	e7a0      	b.n	800d59a <_strtod_l+0x992>
 800d658:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d6e0 <_strtod_l+0xad8>
 800d65c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d660:	ec57 6b17 	vmov	r6, r7, d7
 800d664:	e799      	b.n	800d59a <_strtod_l+0x992>
 800d666:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d66a:	9b08      	ldr	r3, [sp, #32]
 800d66c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1c1      	bne.n	800d5f8 <_strtod_l+0x9f0>
 800d674:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d678:	0d1b      	lsrs	r3, r3, #20
 800d67a:	051b      	lsls	r3, r3, #20
 800d67c:	429d      	cmp	r5, r3
 800d67e:	d1bb      	bne.n	800d5f8 <_strtod_l+0x9f0>
 800d680:	4630      	mov	r0, r6
 800d682:	4639      	mov	r1, r7
 800d684:	f7f3 fb28 	bl	8000cd8 <__aeabi_d2lz>
 800d688:	f7f2 ffb0 	bl	80005ec <__aeabi_l2d>
 800d68c:	4602      	mov	r2, r0
 800d68e:	460b      	mov	r3, r1
 800d690:	4630      	mov	r0, r6
 800d692:	4639      	mov	r1, r7
 800d694:	f7f2 fe20 	bl	80002d8 <__aeabi_dsub>
 800d698:	460b      	mov	r3, r1
 800d69a:	4602      	mov	r2, r0
 800d69c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d6a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6a6:	ea46 060a 	orr.w	r6, r6, sl
 800d6aa:	431e      	orrs	r6, r3
 800d6ac:	d06f      	beq.n	800d78e <_strtod_l+0xb86>
 800d6ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6e8 <_strtod_l+0xae0>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f3 fa3a 	bl	8000b2c <__aeabi_dcmplt>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	f47f accf 	bne.w	800d05c <_strtod_l+0x454>
 800d6be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d6f0 <_strtod_l+0xae8>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6c8:	f7f3 fa4e 	bl	8000b68 <__aeabi_dcmpgt>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d093      	beq.n	800d5f8 <_strtod_l+0x9f0>
 800d6d0:	e4c4      	b.n	800d05c <_strtod_l+0x454>
 800d6d2:	bf00      	nop
 800d6d4:	f3af 8000 	nop.w
 800d6d8:	00000000 	.word	0x00000000
 800d6dc:	bff00000 	.word	0xbff00000
 800d6e0:	00000000 	.word	0x00000000
 800d6e4:	3ff00000 	.word	0x3ff00000
 800d6e8:	94a03595 	.word	0x94a03595
 800d6ec:	3fdfffff 	.word	0x3fdfffff
 800d6f0:	35afe535 	.word	0x35afe535
 800d6f4:	3fe00000 	.word	0x3fe00000
 800d6f8:	000fffff 	.word	0x000fffff
 800d6fc:	7ff00000 	.word	0x7ff00000
 800d700:	7fefffff 	.word	0x7fefffff
 800d704:	3ff00000 	.word	0x3ff00000
 800d708:	3fe00000 	.word	0x3fe00000
 800d70c:	7fe00000 	.word	0x7fe00000
 800d710:	7c9fffff 	.word	0x7c9fffff
 800d714:	9b08      	ldr	r3, [sp, #32]
 800d716:	b323      	cbz	r3, 800d762 <_strtod_l+0xb5a>
 800d718:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d71c:	d821      	bhi.n	800d762 <_strtod_l+0xb5a>
 800d71e:	a328      	add	r3, pc, #160	@ (adr r3, 800d7c0 <_strtod_l+0xbb8>)
 800d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d724:	4630      	mov	r0, r6
 800d726:	4639      	mov	r1, r7
 800d728:	f7f3 fa0a 	bl	8000b40 <__aeabi_dcmple>
 800d72c:	b1a0      	cbz	r0, 800d758 <_strtod_l+0xb50>
 800d72e:	4639      	mov	r1, r7
 800d730:	4630      	mov	r0, r6
 800d732:	f7f3 fa61 	bl	8000bf8 <__aeabi_d2uiz>
 800d736:	2801      	cmp	r0, #1
 800d738:	bf38      	it	cc
 800d73a:	2001      	movcc	r0, #1
 800d73c:	f7f2 ff0a 	bl	8000554 <__aeabi_ui2d>
 800d740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d742:	4606      	mov	r6, r0
 800d744:	460f      	mov	r7, r1
 800d746:	b9fb      	cbnz	r3, 800d788 <_strtod_l+0xb80>
 800d748:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d74c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d74e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d750:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d754:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d758:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d75a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d75e:	1b5b      	subs	r3, r3, r5
 800d760:	9311      	str	r3, [sp, #68]	@ 0x44
 800d762:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d766:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d76a:	f002 fbfb 	bl	800ff64 <__ulp>
 800d76e:	4650      	mov	r0, sl
 800d770:	ec53 2b10 	vmov	r2, r3, d0
 800d774:	4659      	mov	r1, fp
 800d776:	f7f2 ff67 	bl	8000648 <__aeabi_dmul>
 800d77a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d77e:	f7f2 fdad 	bl	80002dc <__adddf3>
 800d782:	4682      	mov	sl, r0
 800d784:	468b      	mov	fp, r1
 800d786:	e770      	b.n	800d66a <_strtod_l+0xa62>
 800d788:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d78c:	e7e0      	b.n	800d750 <_strtod_l+0xb48>
 800d78e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7c8 <_strtod_l+0xbc0>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	f7f3 f9ca 	bl	8000b2c <__aeabi_dcmplt>
 800d798:	e798      	b.n	800d6cc <_strtod_l+0xac4>
 800d79a:	2300      	movs	r3, #0
 800d79c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d79e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d7a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7a2:	6013      	str	r3, [r2, #0]
 800d7a4:	f7ff ba6d 	b.w	800cc82 <_strtod_l+0x7a>
 800d7a8:	2a65      	cmp	r2, #101	@ 0x65
 800d7aa:	f43f ab66 	beq.w	800ce7a <_strtod_l+0x272>
 800d7ae:	2a45      	cmp	r2, #69	@ 0x45
 800d7b0:	f43f ab63 	beq.w	800ce7a <_strtod_l+0x272>
 800d7b4:	2301      	movs	r3, #1
 800d7b6:	f7ff bb9e 	b.w	800cef6 <_strtod_l+0x2ee>
 800d7ba:	bf00      	nop
 800d7bc:	f3af 8000 	nop.w
 800d7c0:	ffc00000 	.word	0xffc00000
 800d7c4:	41dfffff 	.word	0x41dfffff
 800d7c8:	94a03595 	.word	0x94a03595
 800d7cc:	3fcfffff 	.word	0x3fcfffff

0800d7d0 <strtod>:
 800d7d0:	460a      	mov	r2, r1
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	4802      	ldr	r0, [pc, #8]	@ (800d7e0 <strtod+0x10>)
 800d7d6:	4b03      	ldr	r3, [pc, #12]	@ (800d7e4 <strtod+0x14>)
 800d7d8:	6800      	ldr	r0, [r0, #0]
 800d7da:	f7ff ba15 	b.w	800cc08 <_strtod_l>
 800d7de:	bf00      	nop
 800d7e0:	20000300 	.word	0x20000300
 800d7e4:	20000194 	.word	0x20000194

0800d7e8 <__cvt>:
 800d7e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ec:	ec57 6b10 	vmov	r6, r7, d0
 800d7f0:	2f00      	cmp	r7, #0
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	463b      	mov	r3, r7
 800d7f8:	bfbb      	ittet	lt
 800d7fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d7fe:	461f      	movlt	r7, r3
 800d800:	2300      	movge	r3, #0
 800d802:	232d      	movlt	r3, #45	@ 0x2d
 800d804:	700b      	strb	r3, [r1, #0]
 800d806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d808:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d80c:	4691      	mov	r9, r2
 800d80e:	f023 0820 	bic.w	r8, r3, #32
 800d812:	bfbc      	itt	lt
 800d814:	4632      	movlt	r2, r6
 800d816:	4616      	movlt	r6, r2
 800d818:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d81c:	d005      	beq.n	800d82a <__cvt+0x42>
 800d81e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d822:	d100      	bne.n	800d826 <__cvt+0x3e>
 800d824:	3401      	adds	r4, #1
 800d826:	2102      	movs	r1, #2
 800d828:	e000      	b.n	800d82c <__cvt+0x44>
 800d82a:	2103      	movs	r1, #3
 800d82c:	ab03      	add	r3, sp, #12
 800d82e:	9301      	str	r3, [sp, #4]
 800d830:	ab02      	add	r3, sp, #8
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	ec47 6b10 	vmov	d0, r6, r7
 800d838:	4653      	mov	r3, sl
 800d83a:	4622      	mov	r2, r4
 800d83c:	f000 febc 	bl	800e5b8 <_dtoa_r>
 800d840:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d844:	4605      	mov	r5, r0
 800d846:	d119      	bne.n	800d87c <__cvt+0x94>
 800d848:	f019 0f01 	tst.w	r9, #1
 800d84c:	d00e      	beq.n	800d86c <__cvt+0x84>
 800d84e:	eb00 0904 	add.w	r9, r0, r4
 800d852:	2200      	movs	r2, #0
 800d854:	2300      	movs	r3, #0
 800d856:	4630      	mov	r0, r6
 800d858:	4639      	mov	r1, r7
 800d85a:	f7f3 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800d85e:	b108      	cbz	r0, 800d864 <__cvt+0x7c>
 800d860:	f8cd 900c 	str.w	r9, [sp, #12]
 800d864:	2230      	movs	r2, #48	@ 0x30
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	454b      	cmp	r3, r9
 800d86a:	d31e      	bcc.n	800d8aa <__cvt+0xc2>
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d870:	1b5b      	subs	r3, r3, r5
 800d872:	4628      	mov	r0, r5
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	b004      	add	sp, #16
 800d878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d880:	eb00 0904 	add.w	r9, r0, r4
 800d884:	d1e5      	bne.n	800d852 <__cvt+0x6a>
 800d886:	7803      	ldrb	r3, [r0, #0]
 800d888:	2b30      	cmp	r3, #48	@ 0x30
 800d88a:	d10a      	bne.n	800d8a2 <__cvt+0xba>
 800d88c:	2200      	movs	r2, #0
 800d88e:	2300      	movs	r3, #0
 800d890:	4630      	mov	r0, r6
 800d892:	4639      	mov	r1, r7
 800d894:	f7f3 f940 	bl	8000b18 <__aeabi_dcmpeq>
 800d898:	b918      	cbnz	r0, 800d8a2 <__cvt+0xba>
 800d89a:	f1c4 0401 	rsb	r4, r4, #1
 800d89e:	f8ca 4000 	str.w	r4, [sl]
 800d8a2:	f8da 3000 	ldr.w	r3, [sl]
 800d8a6:	4499      	add	r9, r3
 800d8a8:	e7d3      	b.n	800d852 <__cvt+0x6a>
 800d8aa:	1c59      	adds	r1, r3, #1
 800d8ac:	9103      	str	r1, [sp, #12]
 800d8ae:	701a      	strb	r2, [r3, #0]
 800d8b0:	e7d9      	b.n	800d866 <__cvt+0x7e>

0800d8b2 <__exponent>:
 800d8b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8b4:	2900      	cmp	r1, #0
 800d8b6:	bfba      	itte	lt
 800d8b8:	4249      	neglt	r1, r1
 800d8ba:	232d      	movlt	r3, #45	@ 0x2d
 800d8bc:	232b      	movge	r3, #43	@ 0x2b
 800d8be:	2909      	cmp	r1, #9
 800d8c0:	7002      	strb	r2, [r0, #0]
 800d8c2:	7043      	strb	r3, [r0, #1]
 800d8c4:	dd29      	ble.n	800d91a <__exponent+0x68>
 800d8c6:	f10d 0307 	add.w	r3, sp, #7
 800d8ca:	461d      	mov	r5, r3
 800d8cc:	270a      	movs	r7, #10
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d8d4:	fb07 1416 	mls	r4, r7, r6, r1
 800d8d8:	3430      	adds	r4, #48	@ 0x30
 800d8da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d8de:	460c      	mov	r4, r1
 800d8e0:	2c63      	cmp	r4, #99	@ 0x63
 800d8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8e6:	4631      	mov	r1, r6
 800d8e8:	dcf1      	bgt.n	800d8ce <__exponent+0x1c>
 800d8ea:	3130      	adds	r1, #48	@ 0x30
 800d8ec:	1e94      	subs	r4, r2, #2
 800d8ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d8f2:	1c41      	adds	r1, r0, #1
 800d8f4:	4623      	mov	r3, r4
 800d8f6:	42ab      	cmp	r3, r5
 800d8f8:	d30a      	bcc.n	800d910 <__exponent+0x5e>
 800d8fa:	f10d 0309 	add.w	r3, sp, #9
 800d8fe:	1a9b      	subs	r3, r3, r2
 800d900:	42ac      	cmp	r4, r5
 800d902:	bf88      	it	hi
 800d904:	2300      	movhi	r3, #0
 800d906:	3302      	adds	r3, #2
 800d908:	4403      	add	r3, r0
 800d90a:	1a18      	subs	r0, r3, r0
 800d90c:	b003      	add	sp, #12
 800d90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d910:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d914:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d918:	e7ed      	b.n	800d8f6 <__exponent+0x44>
 800d91a:	2330      	movs	r3, #48	@ 0x30
 800d91c:	3130      	adds	r1, #48	@ 0x30
 800d91e:	7083      	strb	r3, [r0, #2]
 800d920:	70c1      	strb	r1, [r0, #3]
 800d922:	1d03      	adds	r3, r0, #4
 800d924:	e7f1      	b.n	800d90a <__exponent+0x58>
	...

0800d928 <_printf_float>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	b08d      	sub	sp, #52	@ 0x34
 800d92e:	460c      	mov	r4, r1
 800d930:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d934:	4616      	mov	r6, r2
 800d936:	461f      	mov	r7, r3
 800d938:	4605      	mov	r5, r0
 800d93a:	f000 fd0f 	bl	800e35c <_localeconv_r>
 800d93e:	6803      	ldr	r3, [r0, #0]
 800d940:	9304      	str	r3, [sp, #16]
 800d942:	4618      	mov	r0, r3
 800d944:	f7f2 fcbc 	bl	80002c0 <strlen>
 800d948:	2300      	movs	r3, #0
 800d94a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d94c:	f8d8 3000 	ldr.w	r3, [r8]
 800d950:	9005      	str	r0, [sp, #20]
 800d952:	3307      	adds	r3, #7
 800d954:	f023 0307 	bic.w	r3, r3, #7
 800d958:	f103 0208 	add.w	r2, r3, #8
 800d95c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d960:	f8d4 b000 	ldr.w	fp, [r4]
 800d964:	f8c8 2000 	str.w	r2, [r8]
 800d968:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d96c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d970:	9307      	str	r3, [sp, #28]
 800d972:	f8cd 8018 	str.w	r8, [sp, #24]
 800d976:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d97a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d97e:	4b9c      	ldr	r3, [pc, #624]	@ (800dbf0 <_printf_float+0x2c8>)
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	f7f3 f8fa 	bl	8000b7c <__aeabi_dcmpun>
 800d988:	bb70      	cbnz	r0, 800d9e8 <_printf_float+0xc0>
 800d98a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d98e:	4b98      	ldr	r3, [pc, #608]	@ (800dbf0 <_printf_float+0x2c8>)
 800d990:	f04f 32ff 	mov.w	r2, #4294967295
 800d994:	f7f3 f8d4 	bl	8000b40 <__aeabi_dcmple>
 800d998:	bb30      	cbnz	r0, 800d9e8 <_printf_float+0xc0>
 800d99a:	2200      	movs	r2, #0
 800d99c:	2300      	movs	r3, #0
 800d99e:	4640      	mov	r0, r8
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	f7f3 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800d9a6:	b110      	cbz	r0, 800d9ae <_printf_float+0x86>
 800d9a8:	232d      	movs	r3, #45	@ 0x2d
 800d9aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9ae:	4a91      	ldr	r2, [pc, #580]	@ (800dbf4 <_printf_float+0x2cc>)
 800d9b0:	4b91      	ldr	r3, [pc, #580]	@ (800dbf8 <_printf_float+0x2d0>)
 800d9b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d9b6:	bf94      	ite	ls
 800d9b8:	4690      	movls	r8, r2
 800d9ba:	4698      	movhi	r8, r3
 800d9bc:	2303      	movs	r3, #3
 800d9be:	6123      	str	r3, [r4, #16]
 800d9c0:	f02b 0304 	bic.w	r3, fp, #4
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	f04f 0900 	mov.w	r9, #0
 800d9ca:	9700      	str	r7, [sp, #0]
 800d9cc:	4633      	mov	r3, r6
 800d9ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f000 f9d2 	bl	800dd7c <_printf_common>
 800d9d8:	3001      	adds	r0, #1
 800d9da:	f040 808d 	bne.w	800daf8 <_printf_float+0x1d0>
 800d9de:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e2:	b00d      	add	sp, #52	@ 0x34
 800d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	464b      	mov	r3, r9
 800d9ec:	4640      	mov	r0, r8
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7f3 f8c4 	bl	8000b7c <__aeabi_dcmpun>
 800d9f4:	b140      	cbz	r0, 800da08 <_printf_float+0xe0>
 800d9f6:	464b      	mov	r3, r9
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfbc      	itt	lt
 800d9fc:	232d      	movlt	r3, #45	@ 0x2d
 800d9fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800da02:	4a7e      	ldr	r2, [pc, #504]	@ (800dbfc <_printf_float+0x2d4>)
 800da04:	4b7e      	ldr	r3, [pc, #504]	@ (800dc00 <_printf_float+0x2d8>)
 800da06:	e7d4      	b.n	800d9b2 <_printf_float+0x8a>
 800da08:	6863      	ldr	r3, [r4, #4]
 800da0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800da0e:	9206      	str	r2, [sp, #24]
 800da10:	1c5a      	adds	r2, r3, #1
 800da12:	d13b      	bne.n	800da8c <_printf_float+0x164>
 800da14:	2306      	movs	r3, #6
 800da16:	6063      	str	r3, [r4, #4]
 800da18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800da1c:	2300      	movs	r3, #0
 800da1e:	6022      	str	r2, [r4, #0]
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	ab0a      	add	r3, sp, #40	@ 0x28
 800da24:	e9cd a301 	strd	sl, r3, [sp, #4]
 800da28:	ab09      	add	r3, sp, #36	@ 0x24
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	6861      	ldr	r1, [r4, #4]
 800da2e:	ec49 8b10 	vmov	d0, r8, r9
 800da32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da36:	4628      	mov	r0, r5
 800da38:	f7ff fed6 	bl	800d7e8 <__cvt>
 800da3c:	9b06      	ldr	r3, [sp, #24]
 800da3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da40:	2b47      	cmp	r3, #71	@ 0x47
 800da42:	4680      	mov	r8, r0
 800da44:	d129      	bne.n	800da9a <_printf_float+0x172>
 800da46:	1cc8      	adds	r0, r1, #3
 800da48:	db02      	blt.n	800da50 <_printf_float+0x128>
 800da4a:	6863      	ldr	r3, [r4, #4]
 800da4c:	4299      	cmp	r1, r3
 800da4e:	dd41      	ble.n	800dad4 <_printf_float+0x1ac>
 800da50:	f1aa 0a02 	sub.w	sl, sl, #2
 800da54:	fa5f fa8a 	uxtb.w	sl, sl
 800da58:	3901      	subs	r1, #1
 800da5a:	4652      	mov	r2, sl
 800da5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da60:	9109      	str	r1, [sp, #36]	@ 0x24
 800da62:	f7ff ff26 	bl	800d8b2 <__exponent>
 800da66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da68:	1813      	adds	r3, r2, r0
 800da6a:	2a01      	cmp	r2, #1
 800da6c:	4681      	mov	r9, r0
 800da6e:	6123      	str	r3, [r4, #16]
 800da70:	dc02      	bgt.n	800da78 <_printf_float+0x150>
 800da72:	6822      	ldr	r2, [r4, #0]
 800da74:	07d2      	lsls	r2, r2, #31
 800da76:	d501      	bpl.n	800da7c <_printf_float+0x154>
 800da78:	3301      	adds	r3, #1
 800da7a:	6123      	str	r3, [r4, #16]
 800da7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0a2      	beq.n	800d9ca <_printf_float+0xa2>
 800da84:	232d      	movs	r3, #45	@ 0x2d
 800da86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da8a:	e79e      	b.n	800d9ca <_printf_float+0xa2>
 800da8c:	9a06      	ldr	r2, [sp, #24]
 800da8e:	2a47      	cmp	r2, #71	@ 0x47
 800da90:	d1c2      	bne.n	800da18 <_printf_float+0xf0>
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1c0      	bne.n	800da18 <_printf_float+0xf0>
 800da96:	2301      	movs	r3, #1
 800da98:	e7bd      	b.n	800da16 <_printf_float+0xee>
 800da9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800da9e:	d9db      	bls.n	800da58 <_printf_float+0x130>
 800daa0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800daa4:	d118      	bne.n	800dad8 <_printf_float+0x1b0>
 800daa6:	2900      	cmp	r1, #0
 800daa8:	6863      	ldr	r3, [r4, #4]
 800daaa:	dd0b      	ble.n	800dac4 <_printf_float+0x19c>
 800daac:	6121      	str	r1, [r4, #16]
 800daae:	b913      	cbnz	r3, 800dab6 <_printf_float+0x18e>
 800dab0:	6822      	ldr	r2, [r4, #0]
 800dab2:	07d0      	lsls	r0, r2, #31
 800dab4:	d502      	bpl.n	800dabc <_printf_float+0x194>
 800dab6:	3301      	adds	r3, #1
 800dab8:	440b      	add	r3, r1
 800daba:	6123      	str	r3, [r4, #16]
 800dabc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dabe:	f04f 0900 	mov.w	r9, #0
 800dac2:	e7db      	b.n	800da7c <_printf_float+0x154>
 800dac4:	b913      	cbnz	r3, 800dacc <_printf_float+0x1a4>
 800dac6:	6822      	ldr	r2, [r4, #0]
 800dac8:	07d2      	lsls	r2, r2, #31
 800daca:	d501      	bpl.n	800dad0 <_printf_float+0x1a8>
 800dacc:	3302      	adds	r3, #2
 800dace:	e7f4      	b.n	800daba <_printf_float+0x192>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e7f2      	b.n	800daba <_printf_float+0x192>
 800dad4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dada:	4299      	cmp	r1, r3
 800dadc:	db05      	blt.n	800daea <_printf_float+0x1c2>
 800dade:	6823      	ldr	r3, [r4, #0]
 800dae0:	6121      	str	r1, [r4, #16]
 800dae2:	07d8      	lsls	r0, r3, #31
 800dae4:	d5ea      	bpl.n	800dabc <_printf_float+0x194>
 800dae6:	1c4b      	adds	r3, r1, #1
 800dae8:	e7e7      	b.n	800daba <_printf_float+0x192>
 800daea:	2900      	cmp	r1, #0
 800daec:	bfd4      	ite	le
 800daee:	f1c1 0202 	rsble	r2, r1, #2
 800daf2:	2201      	movgt	r2, #1
 800daf4:	4413      	add	r3, r2
 800daf6:	e7e0      	b.n	800daba <_printf_float+0x192>
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	055a      	lsls	r2, r3, #21
 800dafc:	d407      	bmi.n	800db0e <_printf_float+0x1e6>
 800dafe:	6923      	ldr	r3, [r4, #16]
 800db00:	4642      	mov	r2, r8
 800db02:	4631      	mov	r1, r6
 800db04:	4628      	mov	r0, r5
 800db06:	47b8      	blx	r7
 800db08:	3001      	adds	r0, #1
 800db0a:	d12b      	bne.n	800db64 <_printf_float+0x23c>
 800db0c:	e767      	b.n	800d9de <_printf_float+0xb6>
 800db0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db12:	f240 80dd 	bls.w	800dcd0 <_printf_float+0x3a8>
 800db16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db1a:	2200      	movs	r2, #0
 800db1c:	2300      	movs	r3, #0
 800db1e:	f7f2 fffb 	bl	8000b18 <__aeabi_dcmpeq>
 800db22:	2800      	cmp	r0, #0
 800db24:	d033      	beq.n	800db8e <_printf_float+0x266>
 800db26:	4a37      	ldr	r2, [pc, #220]	@ (800dc04 <_printf_float+0x2dc>)
 800db28:	2301      	movs	r3, #1
 800db2a:	4631      	mov	r1, r6
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b8      	blx	r7
 800db30:	3001      	adds	r0, #1
 800db32:	f43f af54 	beq.w	800d9de <_printf_float+0xb6>
 800db36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db3a:	4543      	cmp	r3, r8
 800db3c:	db02      	blt.n	800db44 <_printf_float+0x21c>
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	07d8      	lsls	r0, r3, #31
 800db42:	d50f      	bpl.n	800db64 <_printf_float+0x23c>
 800db44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	f43f af45 	beq.w	800d9de <_printf_float+0xb6>
 800db54:	f04f 0900 	mov.w	r9, #0
 800db58:	f108 38ff 	add.w	r8, r8, #4294967295
 800db5c:	f104 0a1a 	add.w	sl, r4, #26
 800db60:	45c8      	cmp	r8, r9
 800db62:	dc09      	bgt.n	800db78 <_printf_float+0x250>
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	079b      	lsls	r3, r3, #30
 800db68:	f100 8103 	bmi.w	800dd72 <_printf_float+0x44a>
 800db6c:	68e0      	ldr	r0, [r4, #12]
 800db6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db70:	4298      	cmp	r0, r3
 800db72:	bfb8      	it	lt
 800db74:	4618      	movlt	r0, r3
 800db76:	e734      	b.n	800d9e2 <_printf_float+0xba>
 800db78:	2301      	movs	r3, #1
 800db7a:	4652      	mov	r2, sl
 800db7c:	4631      	mov	r1, r6
 800db7e:	4628      	mov	r0, r5
 800db80:	47b8      	blx	r7
 800db82:	3001      	adds	r0, #1
 800db84:	f43f af2b 	beq.w	800d9de <_printf_float+0xb6>
 800db88:	f109 0901 	add.w	r9, r9, #1
 800db8c:	e7e8      	b.n	800db60 <_printf_float+0x238>
 800db8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db90:	2b00      	cmp	r3, #0
 800db92:	dc39      	bgt.n	800dc08 <_printf_float+0x2e0>
 800db94:	4a1b      	ldr	r2, [pc, #108]	@ (800dc04 <_printf_float+0x2dc>)
 800db96:	2301      	movs	r3, #1
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b8      	blx	r7
 800db9e:	3001      	adds	r0, #1
 800dba0:	f43f af1d 	beq.w	800d9de <_printf_float+0xb6>
 800dba4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dba8:	ea59 0303 	orrs.w	r3, r9, r3
 800dbac:	d102      	bne.n	800dbb4 <_printf_float+0x28c>
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	07d9      	lsls	r1, r3, #31
 800dbb2:	d5d7      	bpl.n	800db64 <_printf_float+0x23c>
 800dbb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbb8:	4631      	mov	r1, r6
 800dbba:	4628      	mov	r0, r5
 800dbbc:	47b8      	blx	r7
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	f43f af0d 	beq.w	800d9de <_printf_float+0xb6>
 800dbc4:	f04f 0a00 	mov.w	sl, #0
 800dbc8:	f104 0b1a 	add.w	fp, r4, #26
 800dbcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbce:	425b      	negs	r3, r3
 800dbd0:	4553      	cmp	r3, sl
 800dbd2:	dc01      	bgt.n	800dbd8 <_printf_float+0x2b0>
 800dbd4:	464b      	mov	r3, r9
 800dbd6:	e793      	b.n	800db00 <_printf_float+0x1d8>
 800dbd8:	2301      	movs	r3, #1
 800dbda:	465a      	mov	r2, fp
 800dbdc:	4631      	mov	r1, r6
 800dbde:	4628      	mov	r0, r5
 800dbe0:	47b8      	blx	r7
 800dbe2:	3001      	adds	r0, #1
 800dbe4:	f43f aefb 	beq.w	800d9de <_printf_float+0xb6>
 800dbe8:	f10a 0a01 	add.w	sl, sl, #1
 800dbec:	e7ee      	b.n	800dbcc <_printf_float+0x2a4>
 800dbee:	bf00      	nop
 800dbf0:	7fefffff 	.word	0x7fefffff
 800dbf4:	08010f20 	.word	0x08010f20
 800dbf8:	08010f24 	.word	0x08010f24
 800dbfc:	08010f28 	.word	0x08010f28
 800dc00:	08010f2c 	.word	0x08010f2c
 800dc04:	08010f30 	.word	0x08010f30
 800dc08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc0e:	4553      	cmp	r3, sl
 800dc10:	bfa8      	it	ge
 800dc12:	4653      	movge	r3, sl
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	4699      	mov	r9, r3
 800dc18:	dc36      	bgt.n	800dc88 <_printf_float+0x360>
 800dc1a:	f04f 0b00 	mov.w	fp, #0
 800dc1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc22:	f104 021a 	add.w	r2, r4, #26
 800dc26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc28:	9306      	str	r3, [sp, #24]
 800dc2a:	eba3 0309 	sub.w	r3, r3, r9
 800dc2e:	455b      	cmp	r3, fp
 800dc30:	dc31      	bgt.n	800dc96 <_printf_float+0x36e>
 800dc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc34:	459a      	cmp	sl, r3
 800dc36:	dc3a      	bgt.n	800dcae <_printf_float+0x386>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	07da      	lsls	r2, r3, #31
 800dc3c:	d437      	bmi.n	800dcae <_printf_float+0x386>
 800dc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc40:	ebaa 0903 	sub.w	r9, sl, r3
 800dc44:	9b06      	ldr	r3, [sp, #24]
 800dc46:	ebaa 0303 	sub.w	r3, sl, r3
 800dc4a:	4599      	cmp	r9, r3
 800dc4c:	bfa8      	it	ge
 800dc4e:	4699      	movge	r9, r3
 800dc50:	f1b9 0f00 	cmp.w	r9, #0
 800dc54:	dc33      	bgt.n	800dcbe <_printf_float+0x396>
 800dc56:	f04f 0800 	mov.w	r8, #0
 800dc5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc5e:	f104 0b1a 	add.w	fp, r4, #26
 800dc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc64:	ebaa 0303 	sub.w	r3, sl, r3
 800dc68:	eba3 0309 	sub.w	r3, r3, r9
 800dc6c:	4543      	cmp	r3, r8
 800dc6e:	f77f af79 	ble.w	800db64 <_printf_float+0x23c>
 800dc72:	2301      	movs	r3, #1
 800dc74:	465a      	mov	r2, fp
 800dc76:	4631      	mov	r1, r6
 800dc78:	4628      	mov	r0, r5
 800dc7a:	47b8      	blx	r7
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	f43f aeae 	beq.w	800d9de <_printf_float+0xb6>
 800dc82:	f108 0801 	add.w	r8, r8, #1
 800dc86:	e7ec      	b.n	800dc62 <_printf_float+0x33a>
 800dc88:	4642      	mov	r2, r8
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	47b8      	blx	r7
 800dc90:	3001      	adds	r0, #1
 800dc92:	d1c2      	bne.n	800dc1a <_printf_float+0x2f2>
 800dc94:	e6a3      	b.n	800d9de <_printf_float+0xb6>
 800dc96:	2301      	movs	r3, #1
 800dc98:	4631      	mov	r1, r6
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	9206      	str	r2, [sp, #24]
 800dc9e:	47b8      	blx	r7
 800dca0:	3001      	adds	r0, #1
 800dca2:	f43f ae9c 	beq.w	800d9de <_printf_float+0xb6>
 800dca6:	9a06      	ldr	r2, [sp, #24]
 800dca8:	f10b 0b01 	add.w	fp, fp, #1
 800dcac:	e7bb      	b.n	800dc26 <_printf_float+0x2fe>
 800dcae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	47b8      	blx	r7
 800dcb8:	3001      	adds	r0, #1
 800dcba:	d1c0      	bne.n	800dc3e <_printf_float+0x316>
 800dcbc:	e68f      	b.n	800d9de <_printf_float+0xb6>
 800dcbe:	9a06      	ldr	r2, [sp, #24]
 800dcc0:	464b      	mov	r3, r9
 800dcc2:	4442      	add	r2, r8
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	d1c3      	bne.n	800dc56 <_printf_float+0x32e>
 800dcce:	e686      	b.n	800d9de <_printf_float+0xb6>
 800dcd0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dcd4:	f1ba 0f01 	cmp.w	sl, #1
 800dcd8:	dc01      	bgt.n	800dcde <_printf_float+0x3b6>
 800dcda:	07db      	lsls	r3, r3, #31
 800dcdc:	d536      	bpl.n	800dd4c <_printf_float+0x424>
 800dcde:	2301      	movs	r3, #1
 800dce0:	4642      	mov	r2, r8
 800dce2:	4631      	mov	r1, r6
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b8      	blx	r7
 800dce8:	3001      	adds	r0, #1
 800dcea:	f43f ae78 	beq.w	800d9de <_printf_float+0xb6>
 800dcee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcf2:	4631      	mov	r1, r6
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	47b8      	blx	r7
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	f43f ae70 	beq.w	800d9de <_printf_float+0xb6>
 800dcfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dd02:	2200      	movs	r2, #0
 800dd04:	2300      	movs	r3, #0
 800dd06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd0a:	f7f2 ff05 	bl	8000b18 <__aeabi_dcmpeq>
 800dd0e:	b9c0      	cbnz	r0, 800dd42 <_printf_float+0x41a>
 800dd10:	4653      	mov	r3, sl
 800dd12:	f108 0201 	add.w	r2, r8, #1
 800dd16:	4631      	mov	r1, r6
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b8      	blx	r7
 800dd1c:	3001      	adds	r0, #1
 800dd1e:	d10c      	bne.n	800dd3a <_printf_float+0x412>
 800dd20:	e65d      	b.n	800d9de <_printf_float+0xb6>
 800dd22:	2301      	movs	r3, #1
 800dd24:	465a      	mov	r2, fp
 800dd26:	4631      	mov	r1, r6
 800dd28:	4628      	mov	r0, r5
 800dd2a:	47b8      	blx	r7
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	f43f ae56 	beq.w	800d9de <_printf_float+0xb6>
 800dd32:	f108 0801 	add.w	r8, r8, #1
 800dd36:	45d0      	cmp	r8, sl
 800dd38:	dbf3      	blt.n	800dd22 <_printf_float+0x3fa>
 800dd3a:	464b      	mov	r3, r9
 800dd3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd40:	e6df      	b.n	800db02 <_printf_float+0x1da>
 800dd42:	f04f 0800 	mov.w	r8, #0
 800dd46:	f104 0b1a 	add.w	fp, r4, #26
 800dd4a:	e7f4      	b.n	800dd36 <_printf_float+0x40e>
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	4642      	mov	r2, r8
 800dd50:	e7e1      	b.n	800dd16 <_printf_float+0x3ee>
 800dd52:	2301      	movs	r3, #1
 800dd54:	464a      	mov	r2, r9
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f ae3e 	beq.w	800d9de <_printf_float+0xb6>
 800dd62:	f108 0801 	add.w	r8, r8, #1
 800dd66:	68e3      	ldr	r3, [r4, #12]
 800dd68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd6a:	1a5b      	subs	r3, r3, r1
 800dd6c:	4543      	cmp	r3, r8
 800dd6e:	dcf0      	bgt.n	800dd52 <_printf_float+0x42a>
 800dd70:	e6fc      	b.n	800db6c <_printf_float+0x244>
 800dd72:	f04f 0800 	mov.w	r8, #0
 800dd76:	f104 0919 	add.w	r9, r4, #25
 800dd7a:	e7f4      	b.n	800dd66 <_printf_float+0x43e>

0800dd7c <_printf_common>:
 800dd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd80:	4616      	mov	r6, r2
 800dd82:	4698      	mov	r8, r3
 800dd84:	688a      	ldr	r2, [r1, #8]
 800dd86:	690b      	ldr	r3, [r1, #16]
 800dd88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	bfb8      	it	lt
 800dd90:	4613      	movlt	r3, r2
 800dd92:	6033      	str	r3, [r6, #0]
 800dd94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd98:	4607      	mov	r7, r0
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	b10a      	cbz	r2, 800dda2 <_printf_common+0x26>
 800dd9e:	3301      	adds	r3, #1
 800dda0:	6033      	str	r3, [r6, #0]
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	0699      	lsls	r1, r3, #26
 800dda6:	bf42      	ittt	mi
 800dda8:	6833      	ldrmi	r3, [r6, #0]
 800ddaa:	3302      	addmi	r3, #2
 800ddac:	6033      	strmi	r3, [r6, #0]
 800ddae:	6825      	ldr	r5, [r4, #0]
 800ddb0:	f015 0506 	ands.w	r5, r5, #6
 800ddb4:	d106      	bne.n	800ddc4 <_printf_common+0x48>
 800ddb6:	f104 0a19 	add.w	sl, r4, #25
 800ddba:	68e3      	ldr	r3, [r4, #12]
 800ddbc:	6832      	ldr	r2, [r6, #0]
 800ddbe:	1a9b      	subs	r3, r3, r2
 800ddc0:	42ab      	cmp	r3, r5
 800ddc2:	dc26      	bgt.n	800de12 <_printf_common+0x96>
 800ddc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ddc8:	6822      	ldr	r2, [r4, #0]
 800ddca:	3b00      	subs	r3, #0
 800ddcc:	bf18      	it	ne
 800ddce:	2301      	movne	r3, #1
 800ddd0:	0692      	lsls	r2, r2, #26
 800ddd2:	d42b      	bmi.n	800de2c <_printf_common+0xb0>
 800ddd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddd8:	4641      	mov	r1, r8
 800ddda:	4638      	mov	r0, r7
 800dddc:	47c8      	blx	r9
 800ddde:	3001      	adds	r0, #1
 800dde0:	d01e      	beq.n	800de20 <_printf_common+0xa4>
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	6922      	ldr	r2, [r4, #16]
 800dde6:	f003 0306 	and.w	r3, r3, #6
 800ddea:	2b04      	cmp	r3, #4
 800ddec:	bf02      	ittt	eq
 800ddee:	68e5      	ldreq	r5, [r4, #12]
 800ddf0:	6833      	ldreq	r3, [r6, #0]
 800ddf2:	1aed      	subeq	r5, r5, r3
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	bf0c      	ite	eq
 800ddf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddfc:	2500      	movne	r5, #0
 800ddfe:	4293      	cmp	r3, r2
 800de00:	bfc4      	itt	gt
 800de02:	1a9b      	subgt	r3, r3, r2
 800de04:	18ed      	addgt	r5, r5, r3
 800de06:	2600      	movs	r6, #0
 800de08:	341a      	adds	r4, #26
 800de0a:	42b5      	cmp	r5, r6
 800de0c:	d11a      	bne.n	800de44 <_printf_common+0xc8>
 800de0e:	2000      	movs	r0, #0
 800de10:	e008      	b.n	800de24 <_printf_common+0xa8>
 800de12:	2301      	movs	r3, #1
 800de14:	4652      	mov	r2, sl
 800de16:	4641      	mov	r1, r8
 800de18:	4638      	mov	r0, r7
 800de1a:	47c8      	blx	r9
 800de1c:	3001      	adds	r0, #1
 800de1e:	d103      	bne.n	800de28 <_printf_common+0xac>
 800de20:	f04f 30ff 	mov.w	r0, #4294967295
 800de24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de28:	3501      	adds	r5, #1
 800de2a:	e7c6      	b.n	800ddba <_printf_common+0x3e>
 800de2c:	18e1      	adds	r1, r4, r3
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	2030      	movs	r0, #48	@ 0x30
 800de32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de36:	4422      	add	r2, r4
 800de38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de40:	3302      	adds	r3, #2
 800de42:	e7c7      	b.n	800ddd4 <_printf_common+0x58>
 800de44:	2301      	movs	r3, #1
 800de46:	4622      	mov	r2, r4
 800de48:	4641      	mov	r1, r8
 800de4a:	4638      	mov	r0, r7
 800de4c:	47c8      	blx	r9
 800de4e:	3001      	adds	r0, #1
 800de50:	d0e6      	beq.n	800de20 <_printf_common+0xa4>
 800de52:	3601      	adds	r6, #1
 800de54:	e7d9      	b.n	800de0a <_printf_common+0x8e>
	...

0800de58 <_printf_i>:
 800de58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de5c:	7e0f      	ldrb	r7, [r1, #24]
 800de5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de60:	2f78      	cmp	r7, #120	@ 0x78
 800de62:	4691      	mov	r9, r2
 800de64:	4680      	mov	r8, r0
 800de66:	460c      	mov	r4, r1
 800de68:	469a      	mov	sl, r3
 800de6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de6e:	d807      	bhi.n	800de80 <_printf_i+0x28>
 800de70:	2f62      	cmp	r7, #98	@ 0x62
 800de72:	d80a      	bhi.n	800de8a <_printf_i+0x32>
 800de74:	2f00      	cmp	r7, #0
 800de76:	f000 80d2 	beq.w	800e01e <_printf_i+0x1c6>
 800de7a:	2f58      	cmp	r7, #88	@ 0x58
 800de7c:	f000 80b9 	beq.w	800dff2 <_printf_i+0x19a>
 800de80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de88:	e03a      	b.n	800df00 <_printf_i+0xa8>
 800de8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de8e:	2b15      	cmp	r3, #21
 800de90:	d8f6      	bhi.n	800de80 <_printf_i+0x28>
 800de92:	a101      	add	r1, pc, #4	@ (adr r1, 800de98 <_printf_i+0x40>)
 800de94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de98:	0800def1 	.word	0x0800def1
 800de9c:	0800df05 	.word	0x0800df05
 800dea0:	0800de81 	.word	0x0800de81
 800dea4:	0800de81 	.word	0x0800de81
 800dea8:	0800de81 	.word	0x0800de81
 800deac:	0800de81 	.word	0x0800de81
 800deb0:	0800df05 	.word	0x0800df05
 800deb4:	0800de81 	.word	0x0800de81
 800deb8:	0800de81 	.word	0x0800de81
 800debc:	0800de81 	.word	0x0800de81
 800dec0:	0800de81 	.word	0x0800de81
 800dec4:	0800e005 	.word	0x0800e005
 800dec8:	0800df2f 	.word	0x0800df2f
 800decc:	0800dfbf 	.word	0x0800dfbf
 800ded0:	0800de81 	.word	0x0800de81
 800ded4:	0800de81 	.word	0x0800de81
 800ded8:	0800e027 	.word	0x0800e027
 800dedc:	0800de81 	.word	0x0800de81
 800dee0:	0800df2f 	.word	0x0800df2f
 800dee4:	0800de81 	.word	0x0800de81
 800dee8:	0800de81 	.word	0x0800de81
 800deec:	0800dfc7 	.word	0x0800dfc7
 800def0:	6833      	ldr	r3, [r6, #0]
 800def2:	1d1a      	adds	r2, r3, #4
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6032      	str	r2, [r6, #0]
 800def8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800defc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800df00:	2301      	movs	r3, #1
 800df02:	e09d      	b.n	800e040 <_printf_i+0x1e8>
 800df04:	6833      	ldr	r3, [r6, #0]
 800df06:	6820      	ldr	r0, [r4, #0]
 800df08:	1d19      	adds	r1, r3, #4
 800df0a:	6031      	str	r1, [r6, #0]
 800df0c:	0606      	lsls	r6, r0, #24
 800df0e:	d501      	bpl.n	800df14 <_printf_i+0xbc>
 800df10:	681d      	ldr	r5, [r3, #0]
 800df12:	e003      	b.n	800df1c <_printf_i+0xc4>
 800df14:	0645      	lsls	r5, r0, #25
 800df16:	d5fb      	bpl.n	800df10 <_printf_i+0xb8>
 800df18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df1c:	2d00      	cmp	r5, #0
 800df1e:	da03      	bge.n	800df28 <_printf_i+0xd0>
 800df20:	232d      	movs	r3, #45	@ 0x2d
 800df22:	426d      	negs	r5, r5
 800df24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df28:	4859      	ldr	r0, [pc, #356]	@ (800e090 <_printf_i+0x238>)
 800df2a:	230a      	movs	r3, #10
 800df2c:	e011      	b.n	800df52 <_printf_i+0xfa>
 800df2e:	6821      	ldr	r1, [r4, #0]
 800df30:	6833      	ldr	r3, [r6, #0]
 800df32:	0608      	lsls	r0, r1, #24
 800df34:	f853 5b04 	ldr.w	r5, [r3], #4
 800df38:	d402      	bmi.n	800df40 <_printf_i+0xe8>
 800df3a:	0649      	lsls	r1, r1, #25
 800df3c:	bf48      	it	mi
 800df3e:	b2ad      	uxthmi	r5, r5
 800df40:	2f6f      	cmp	r7, #111	@ 0x6f
 800df42:	4853      	ldr	r0, [pc, #332]	@ (800e090 <_printf_i+0x238>)
 800df44:	6033      	str	r3, [r6, #0]
 800df46:	bf14      	ite	ne
 800df48:	230a      	movne	r3, #10
 800df4a:	2308      	moveq	r3, #8
 800df4c:	2100      	movs	r1, #0
 800df4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df52:	6866      	ldr	r6, [r4, #4]
 800df54:	60a6      	str	r6, [r4, #8]
 800df56:	2e00      	cmp	r6, #0
 800df58:	bfa2      	ittt	ge
 800df5a:	6821      	ldrge	r1, [r4, #0]
 800df5c:	f021 0104 	bicge.w	r1, r1, #4
 800df60:	6021      	strge	r1, [r4, #0]
 800df62:	b90d      	cbnz	r5, 800df68 <_printf_i+0x110>
 800df64:	2e00      	cmp	r6, #0
 800df66:	d04b      	beq.n	800e000 <_printf_i+0x1a8>
 800df68:	4616      	mov	r6, r2
 800df6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800df6e:	fb03 5711 	mls	r7, r3, r1, r5
 800df72:	5dc7      	ldrb	r7, [r0, r7]
 800df74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df78:	462f      	mov	r7, r5
 800df7a:	42bb      	cmp	r3, r7
 800df7c:	460d      	mov	r5, r1
 800df7e:	d9f4      	bls.n	800df6a <_printf_i+0x112>
 800df80:	2b08      	cmp	r3, #8
 800df82:	d10b      	bne.n	800df9c <_printf_i+0x144>
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	07df      	lsls	r7, r3, #31
 800df88:	d508      	bpl.n	800df9c <_printf_i+0x144>
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	6861      	ldr	r1, [r4, #4]
 800df8e:	4299      	cmp	r1, r3
 800df90:	bfde      	ittt	le
 800df92:	2330      	movle	r3, #48	@ 0x30
 800df94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df9c:	1b92      	subs	r2, r2, r6
 800df9e:	6122      	str	r2, [r4, #16]
 800dfa0:	f8cd a000 	str.w	sl, [sp]
 800dfa4:	464b      	mov	r3, r9
 800dfa6:	aa03      	add	r2, sp, #12
 800dfa8:	4621      	mov	r1, r4
 800dfaa:	4640      	mov	r0, r8
 800dfac:	f7ff fee6 	bl	800dd7c <_printf_common>
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d14a      	bne.n	800e04a <_printf_i+0x1f2>
 800dfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb8:	b004      	add	sp, #16
 800dfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	f043 0320 	orr.w	r3, r3, #32
 800dfc4:	6023      	str	r3, [r4, #0]
 800dfc6:	4833      	ldr	r0, [pc, #204]	@ (800e094 <_printf_i+0x23c>)
 800dfc8:	2778      	movs	r7, #120	@ 0x78
 800dfca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	6831      	ldr	r1, [r6, #0]
 800dfd2:	061f      	lsls	r7, r3, #24
 800dfd4:	f851 5b04 	ldr.w	r5, [r1], #4
 800dfd8:	d402      	bmi.n	800dfe0 <_printf_i+0x188>
 800dfda:	065f      	lsls	r7, r3, #25
 800dfdc:	bf48      	it	mi
 800dfde:	b2ad      	uxthmi	r5, r5
 800dfe0:	6031      	str	r1, [r6, #0]
 800dfe2:	07d9      	lsls	r1, r3, #31
 800dfe4:	bf44      	itt	mi
 800dfe6:	f043 0320 	orrmi.w	r3, r3, #32
 800dfea:	6023      	strmi	r3, [r4, #0]
 800dfec:	b11d      	cbz	r5, 800dff6 <_printf_i+0x19e>
 800dfee:	2310      	movs	r3, #16
 800dff0:	e7ac      	b.n	800df4c <_printf_i+0xf4>
 800dff2:	4827      	ldr	r0, [pc, #156]	@ (800e090 <_printf_i+0x238>)
 800dff4:	e7e9      	b.n	800dfca <_printf_i+0x172>
 800dff6:	6823      	ldr	r3, [r4, #0]
 800dff8:	f023 0320 	bic.w	r3, r3, #32
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	e7f6      	b.n	800dfee <_printf_i+0x196>
 800e000:	4616      	mov	r6, r2
 800e002:	e7bd      	b.n	800df80 <_printf_i+0x128>
 800e004:	6833      	ldr	r3, [r6, #0]
 800e006:	6825      	ldr	r5, [r4, #0]
 800e008:	6961      	ldr	r1, [r4, #20]
 800e00a:	1d18      	adds	r0, r3, #4
 800e00c:	6030      	str	r0, [r6, #0]
 800e00e:	062e      	lsls	r6, r5, #24
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	d501      	bpl.n	800e018 <_printf_i+0x1c0>
 800e014:	6019      	str	r1, [r3, #0]
 800e016:	e002      	b.n	800e01e <_printf_i+0x1c6>
 800e018:	0668      	lsls	r0, r5, #25
 800e01a:	d5fb      	bpl.n	800e014 <_printf_i+0x1bc>
 800e01c:	8019      	strh	r1, [r3, #0]
 800e01e:	2300      	movs	r3, #0
 800e020:	6123      	str	r3, [r4, #16]
 800e022:	4616      	mov	r6, r2
 800e024:	e7bc      	b.n	800dfa0 <_printf_i+0x148>
 800e026:	6833      	ldr	r3, [r6, #0]
 800e028:	1d1a      	adds	r2, r3, #4
 800e02a:	6032      	str	r2, [r6, #0]
 800e02c:	681e      	ldr	r6, [r3, #0]
 800e02e:	6862      	ldr	r2, [r4, #4]
 800e030:	2100      	movs	r1, #0
 800e032:	4630      	mov	r0, r6
 800e034:	f7f2 f8f4 	bl	8000220 <memchr>
 800e038:	b108      	cbz	r0, 800e03e <_printf_i+0x1e6>
 800e03a:	1b80      	subs	r0, r0, r6
 800e03c:	6060      	str	r0, [r4, #4]
 800e03e:	6863      	ldr	r3, [r4, #4]
 800e040:	6123      	str	r3, [r4, #16]
 800e042:	2300      	movs	r3, #0
 800e044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e048:	e7aa      	b.n	800dfa0 <_printf_i+0x148>
 800e04a:	6923      	ldr	r3, [r4, #16]
 800e04c:	4632      	mov	r2, r6
 800e04e:	4649      	mov	r1, r9
 800e050:	4640      	mov	r0, r8
 800e052:	47d0      	blx	sl
 800e054:	3001      	adds	r0, #1
 800e056:	d0ad      	beq.n	800dfb4 <_printf_i+0x15c>
 800e058:	6823      	ldr	r3, [r4, #0]
 800e05a:	079b      	lsls	r3, r3, #30
 800e05c:	d413      	bmi.n	800e086 <_printf_i+0x22e>
 800e05e:	68e0      	ldr	r0, [r4, #12]
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	4298      	cmp	r0, r3
 800e064:	bfb8      	it	lt
 800e066:	4618      	movlt	r0, r3
 800e068:	e7a6      	b.n	800dfb8 <_printf_i+0x160>
 800e06a:	2301      	movs	r3, #1
 800e06c:	4632      	mov	r2, r6
 800e06e:	4649      	mov	r1, r9
 800e070:	4640      	mov	r0, r8
 800e072:	47d0      	blx	sl
 800e074:	3001      	adds	r0, #1
 800e076:	d09d      	beq.n	800dfb4 <_printf_i+0x15c>
 800e078:	3501      	adds	r5, #1
 800e07a:	68e3      	ldr	r3, [r4, #12]
 800e07c:	9903      	ldr	r1, [sp, #12]
 800e07e:	1a5b      	subs	r3, r3, r1
 800e080:	42ab      	cmp	r3, r5
 800e082:	dcf2      	bgt.n	800e06a <_printf_i+0x212>
 800e084:	e7eb      	b.n	800e05e <_printf_i+0x206>
 800e086:	2500      	movs	r5, #0
 800e088:	f104 0619 	add.w	r6, r4, #25
 800e08c:	e7f5      	b.n	800e07a <_printf_i+0x222>
 800e08e:	bf00      	nop
 800e090:	08010f32 	.word	0x08010f32
 800e094:	08010f43 	.word	0x08010f43

0800e098 <std>:
 800e098:	2300      	movs	r3, #0
 800e09a:	b510      	push	{r4, lr}
 800e09c:	4604      	mov	r4, r0
 800e09e:	e9c0 3300 	strd	r3, r3, [r0]
 800e0a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0a6:	6083      	str	r3, [r0, #8]
 800e0a8:	8181      	strh	r1, [r0, #12]
 800e0aa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0ac:	81c2      	strh	r2, [r0, #14]
 800e0ae:	6183      	str	r3, [r0, #24]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	2208      	movs	r2, #8
 800e0b4:	305c      	adds	r0, #92	@ 0x5c
 800e0b6:	f000 f914 	bl	800e2e2 <memset>
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f0 <std+0x58>)
 800e0bc:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0be:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f4 <std+0x5c>)
 800e0c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <std+0x60>)
 800e0c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e0c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e0fc <std+0x64>)
 800e0c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e100 <std+0x68>)
 800e0cc:	6224      	str	r4, [r4, #32]
 800e0ce:	429c      	cmp	r4, r3
 800e0d0:	d006      	beq.n	800e0e0 <std+0x48>
 800e0d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e0d6:	4294      	cmp	r4, r2
 800e0d8:	d002      	beq.n	800e0e0 <std+0x48>
 800e0da:	33d0      	adds	r3, #208	@ 0xd0
 800e0dc:	429c      	cmp	r4, r3
 800e0de:	d105      	bne.n	800e0ec <std+0x54>
 800e0e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0e8:	f000 b9bc 	b.w	800e464 <__retarget_lock_init_recursive>
 800e0ec:	bd10      	pop	{r4, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0800e25d 	.word	0x0800e25d
 800e0f4:	0800e27f 	.word	0x0800e27f
 800e0f8:	0800e2b7 	.word	0x0800e2b7
 800e0fc:	0800e2db 	.word	0x0800e2db
 800e100:	20004bbc 	.word	0x20004bbc

0800e104 <stdio_exit_handler>:
 800e104:	4a02      	ldr	r2, [pc, #8]	@ (800e110 <stdio_exit_handler+0xc>)
 800e106:	4903      	ldr	r1, [pc, #12]	@ (800e114 <stdio_exit_handler+0x10>)
 800e108:	4803      	ldr	r0, [pc, #12]	@ (800e118 <stdio_exit_handler+0x14>)
 800e10a:	f000 b869 	b.w	800e1e0 <_fwalk_sglue>
 800e10e:	bf00      	nop
 800e110:	20000188 	.word	0x20000188
 800e114:	080105b1 	.word	0x080105b1
 800e118:	20000304 	.word	0x20000304

0800e11c <cleanup_stdio>:
 800e11c:	6841      	ldr	r1, [r0, #4]
 800e11e:	4b0c      	ldr	r3, [pc, #48]	@ (800e150 <cleanup_stdio+0x34>)
 800e120:	4299      	cmp	r1, r3
 800e122:	b510      	push	{r4, lr}
 800e124:	4604      	mov	r4, r0
 800e126:	d001      	beq.n	800e12c <cleanup_stdio+0x10>
 800e128:	f002 fa42 	bl	80105b0 <_fflush_r>
 800e12c:	68a1      	ldr	r1, [r4, #8]
 800e12e:	4b09      	ldr	r3, [pc, #36]	@ (800e154 <cleanup_stdio+0x38>)
 800e130:	4299      	cmp	r1, r3
 800e132:	d002      	beq.n	800e13a <cleanup_stdio+0x1e>
 800e134:	4620      	mov	r0, r4
 800e136:	f002 fa3b 	bl	80105b0 <_fflush_r>
 800e13a:	68e1      	ldr	r1, [r4, #12]
 800e13c:	4b06      	ldr	r3, [pc, #24]	@ (800e158 <cleanup_stdio+0x3c>)
 800e13e:	4299      	cmp	r1, r3
 800e140:	d004      	beq.n	800e14c <cleanup_stdio+0x30>
 800e142:	4620      	mov	r0, r4
 800e144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e148:	f002 ba32 	b.w	80105b0 <_fflush_r>
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	bf00      	nop
 800e150:	20004bbc 	.word	0x20004bbc
 800e154:	20004c24 	.word	0x20004c24
 800e158:	20004c8c 	.word	0x20004c8c

0800e15c <global_stdio_init.part.0>:
 800e15c:	b510      	push	{r4, lr}
 800e15e:	4b0b      	ldr	r3, [pc, #44]	@ (800e18c <global_stdio_init.part.0+0x30>)
 800e160:	4c0b      	ldr	r4, [pc, #44]	@ (800e190 <global_stdio_init.part.0+0x34>)
 800e162:	4a0c      	ldr	r2, [pc, #48]	@ (800e194 <global_stdio_init.part.0+0x38>)
 800e164:	601a      	str	r2, [r3, #0]
 800e166:	4620      	mov	r0, r4
 800e168:	2200      	movs	r2, #0
 800e16a:	2104      	movs	r1, #4
 800e16c:	f7ff ff94 	bl	800e098 <std>
 800e170:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e174:	2201      	movs	r2, #1
 800e176:	2109      	movs	r1, #9
 800e178:	f7ff ff8e 	bl	800e098 <std>
 800e17c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e180:	2202      	movs	r2, #2
 800e182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e186:	2112      	movs	r1, #18
 800e188:	f7ff bf86 	b.w	800e098 <std>
 800e18c:	20004cf4 	.word	0x20004cf4
 800e190:	20004bbc 	.word	0x20004bbc
 800e194:	0800e105 	.word	0x0800e105

0800e198 <__sfp_lock_acquire>:
 800e198:	4801      	ldr	r0, [pc, #4]	@ (800e1a0 <__sfp_lock_acquire+0x8>)
 800e19a:	f000 b964 	b.w	800e466 <__retarget_lock_acquire_recursive>
 800e19e:	bf00      	nop
 800e1a0:	20004cfd 	.word	0x20004cfd

0800e1a4 <__sfp_lock_release>:
 800e1a4:	4801      	ldr	r0, [pc, #4]	@ (800e1ac <__sfp_lock_release+0x8>)
 800e1a6:	f000 b95f 	b.w	800e468 <__retarget_lock_release_recursive>
 800e1aa:	bf00      	nop
 800e1ac:	20004cfd 	.word	0x20004cfd

0800e1b0 <__sinit>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	f7ff fff0 	bl	800e198 <__sfp_lock_acquire>
 800e1b8:	6a23      	ldr	r3, [r4, #32]
 800e1ba:	b11b      	cbz	r3, 800e1c4 <__sinit+0x14>
 800e1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1c0:	f7ff bff0 	b.w	800e1a4 <__sfp_lock_release>
 800e1c4:	4b04      	ldr	r3, [pc, #16]	@ (800e1d8 <__sinit+0x28>)
 800e1c6:	6223      	str	r3, [r4, #32]
 800e1c8:	4b04      	ldr	r3, [pc, #16]	@ (800e1dc <__sinit+0x2c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1f5      	bne.n	800e1bc <__sinit+0xc>
 800e1d0:	f7ff ffc4 	bl	800e15c <global_stdio_init.part.0>
 800e1d4:	e7f2      	b.n	800e1bc <__sinit+0xc>
 800e1d6:	bf00      	nop
 800e1d8:	0800e11d 	.word	0x0800e11d
 800e1dc:	20004cf4 	.word	0x20004cf4

0800e1e0 <_fwalk_sglue>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	4688      	mov	r8, r1
 800e1e8:	4614      	mov	r4, r2
 800e1ea:	2600      	movs	r6, #0
 800e1ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1f0:	f1b9 0901 	subs.w	r9, r9, #1
 800e1f4:	d505      	bpl.n	800e202 <_fwalk_sglue+0x22>
 800e1f6:	6824      	ldr	r4, [r4, #0]
 800e1f8:	2c00      	cmp	r4, #0
 800e1fa:	d1f7      	bne.n	800e1ec <_fwalk_sglue+0xc>
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e202:	89ab      	ldrh	r3, [r5, #12]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d907      	bls.n	800e218 <_fwalk_sglue+0x38>
 800e208:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e20c:	3301      	adds	r3, #1
 800e20e:	d003      	beq.n	800e218 <_fwalk_sglue+0x38>
 800e210:	4629      	mov	r1, r5
 800e212:	4638      	mov	r0, r7
 800e214:	47c0      	blx	r8
 800e216:	4306      	orrs	r6, r0
 800e218:	3568      	adds	r5, #104	@ 0x68
 800e21a:	e7e9      	b.n	800e1f0 <_fwalk_sglue+0x10>

0800e21c <siprintf>:
 800e21c:	b40e      	push	{r1, r2, r3}
 800e21e:	b500      	push	{lr}
 800e220:	b09c      	sub	sp, #112	@ 0x70
 800e222:	ab1d      	add	r3, sp, #116	@ 0x74
 800e224:	9002      	str	r0, [sp, #8]
 800e226:	9006      	str	r0, [sp, #24]
 800e228:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e22c:	4809      	ldr	r0, [pc, #36]	@ (800e254 <siprintf+0x38>)
 800e22e:	9107      	str	r1, [sp, #28]
 800e230:	9104      	str	r1, [sp, #16]
 800e232:	4909      	ldr	r1, [pc, #36]	@ (800e258 <siprintf+0x3c>)
 800e234:	f853 2b04 	ldr.w	r2, [r3], #4
 800e238:	9105      	str	r1, [sp, #20]
 800e23a:	6800      	ldr	r0, [r0, #0]
 800e23c:	9301      	str	r3, [sp, #4]
 800e23e:	a902      	add	r1, sp, #8
 800e240:	f002 f836 	bl	80102b0 <_svfiprintf_r>
 800e244:	9b02      	ldr	r3, [sp, #8]
 800e246:	2200      	movs	r2, #0
 800e248:	701a      	strb	r2, [r3, #0]
 800e24a:	b01c      	add	sp, #112	@ 0x70
 800e24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e250:	b003      	add	sp, #12
 800e252:	4770      	bx	lr
 800e254:	20000300 	.word	0x20000300
 800e258:	ffff0208 	.word	0xffff0208

0800e25c <__sread>:
 800e25c:	b510      	push	{r4, lr}
 800e25e:	460c      	mov	r4, r1
 800e260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e264:	f000 f8a0 	bl	800e3a8 <_read_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	bfab      	itete	ge
 800e26c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e26e:	89a3      	ldrhlt	r3, [r4, #12]
 800e270:	181b      	addge	r3, r3, r0
 800e272:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e276:	bfac      	ite	ge
 800e278:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e27a:	81a3      	strhlt	r3, [r4, #12]
 800e27c:	bd10      	pop	{r4, pc}

0800e27e <__swrite>:
 800e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	461f      	mov	r7, r3
 800e284:	898b      	ldrh	r3, [r1, #12]
 800e286:	05db      	lsls	r3, r3, #23
 800e288:	4605      	mov	r5, r0
 800e28a:	460c      	mov	r4, r1
 800e28c:	4616      	mov	r6, r2
 800e28e:	d505      	bpl.n	800e29c <__swrite+0x1e>
 800e290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e294:	2302      	movs	r3, #2
 800e296:	2200      	movs	r2, #0
 800e298:	f000 f874 	bl	800e384 <_lseek_r>
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2a6:	81a3      	strh	r3, [r4, #12]
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b2:	f000 b89b 	b.w	800e3ec <_write_r>

0800e2b6 <__sseek>:
 800e2b6:	b510      	push	{r4, lr}
 800e2b8:	460c      	mov	r4, r1
 800e2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2be:	f000 f861 	bl	800e384 <_lseek_r>
 800e2c2:	1c43      	adds	r3, r0, #1
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	bf15      	itete	ne
 800e2c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e2ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e2ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e2d2:	81a3      	strheq	r3, [r4, #12]
 800e2d4:	bf18      	it	ne
 800e2d6:	81a3      	strhne	r3, [r4, #12]
 800e2d8:	bd10      	pop	{r4, pc}

0800e2da <__sclose>:
 800e2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2de:	f000 b841 	b.w	800e364 <_close_r>

0800e2e2 <memset>:
 800e2e2:	4402      	add	r2, r0
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d100      	bne.n	800e2ec <memset+0xa>
 800e2ea:	4770      	bx	lr
 800e2ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e2f0:	e7f9      	b.n	800e2e6 <memset+0x4>

0800e2f2 <strchr>:
 800e2f2:	b2c9      	uxtb	r1, r1
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2fc:	b112      	cbz	r2, 800e304 <strchr+0x12>
 800e2fe:	428a      	cmp	r2, r1
 800e300:	d1f9      	bne.n	800e2f6 <strchr+0x4>
 800e302:	4770      	bx	lr
 800e304:	2900      	cmp	r1, #0
 800e306:	bf18      	it	ne
 800e308:	2000      	movne	r0, #0
 800e30a:	4770      	bx	lr

0800e30c <strncmp>:
 800e30c:	b510      	push	{r4, lr}
 800e30e:	b16a      	cbz	r2, 800e32c <strncmp+0x20>
 800e310:	3901      	subs	r1, #1
 800e312:	1884      	adds	r4, r0, r2
 800e314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e318:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d103      	bne.n	800e328 <strncmp+0x1c>
 800e320:	42a0      	cmp	r0, r4
 800e322:	d001      	beq.n	800e328 <strncmp+0x1c>
 800e324:	2a00      	cmp	r2, #0
 800e326:	d1f5      	bne.n	800e314 <strncmp+0x8>
 800e328:	1ad0      	subs	r0, r2, r3
 800e32a:	bd10      	pop	{r4, pc}
 800e32c:	4610      	mov	r0, r2
 800e32e:	e7fc      	b.n	800e32a <strncmp+0x1e>

0800e330 <strstr>:
 800e330:	780a      	ldrb	r2, [r1, #0]
 800e332:	b570      	push	{r4, r5, r6, lr}
 800e334:	b96a      	cbnz	r2, 800e352 <strstr+0x22>
 800e336:	bd70      	pop	{r4, r5, r6, pc}
 800e338:	429a      	cmp	r2, r3
 800e33a:	d109      	bne.n	800e350 <strstr+0x20>
 800e33c:	460c      	mov	r4, r1
 800e33e:	4605      	mov	r5, r0
 800e340:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e344:	2b00      	cmp	r3, #0
 800e346:	d0f6      	beq.n	800e336 <strstr+0x6>
 800e348:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e34c:	429e      	cmp	r6, r3
 800e34e:	d0f7      	beq.n	800e340 <strstr+0x10>
 800e350:	3001      	adds	r0, #1
 800e352:	7803      	ldrb	r3, [r0, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1ef      	bne.n	800e338 <strstr+0x8>
 800e358:	4618      	mov	r0, r3
 800e35a:	e7ec      	b.n	800e336 <strstr+0x6>

0800e35c <_localeconv_r>:
 800e35c:	4800      	ldr	r0, [pc, #0]	@ (800e360 <_localeconv_r+0x4>)
 800e35e:	4770      	bx	lr
 800e360:	20000284 	.word	0x20000284

0800e364 <_close_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d06      	ldr	r5, [pc, #24]	@ (800e380 <_close_r+0x1c>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	602b      	str	r3, [r5, #0]
 800e370:	f7f4 f858 	bl	8002424 <_close>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_close_r+0x1a>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_close_r+0x1a>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	20004cf8 	.word	0x20004cf8

0800e384 <_lseek_r>:
 800e384:	b538      	push	{r3, r4, r5, lr}
 800e386:	4d07      	ldr	r5, [pc, #28]	@ (800e3a4 <_lseek_r+0x20>)
 800e388:	4604      	mov	r4, r0
 800e38a:	4608      	mov	r0, r1
 800e38c:	4611      	mov	r1, r2
 800e38e:	2200      	movs	r2, #0
 800e390:	602a      	str	r2, [r5, #0]
 800e392:	461a      	mov	r2, r3
 800e394:	f7f4 f86d 	bl	8002472 <_lseek>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_lseek_r+0x1e>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_lseek_r+0x1e>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	20004cf8 	.word	0x20004cf8

0800e3a8 <_read_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4d07      	ldr	r5, [pc, #28]	@ (800e3c8 <_read_r+0x20>)
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	4608      	mov	r0, r1
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	602a      	str	r2, [r5, #0]
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	f7f3 fffb 	bl	80023b2 <_read>
 800e3bc:	1c43      	adds	r3, r0, #1
 800e3be:	d102      	bne.n	800e3c6 <_read_r+0x1e>
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	b103      	cbz	r3, 800e3c6 <_read_r+0x1e>
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	bd38      	pop	{r3, r4, r5, pc}
 800e3c8:	20004cf8 	.word	0x20004cf8

0800e3cc <_sbrk_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4d06      	ldr	r5, [pc, #24]	@ (800e3e8 <_sbrk_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	602b      	str	r3, [r5, #0]
 800e3d8:	f7f4 f858 	bl	800248c <_sbrk>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_sbrk_r+0x1a>
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_sbrk_r+0x1a>
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	20004cf8 	.word	0x20004cf8

0800e3ec <_write_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4d07      	ldr	r5, [pc, #28]	@ (800e40c <_write_r+0x20>)
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	4608      	mov	r0, r1
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	602a      	str	r2, [r5, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f7f3 fff6 	bl	80023ec <_write>
 800e400:	1c43      	adds	r3, r0, #1
 800e402:	d102      	bne.n	800e40a <_write_r+0x1e>
 800e404:	682b      	ldr	r3, [r5, #0]
 800e406:	b103      	cbz	r3, 800e40a <_write_r+0x1e>
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	bd38      	pop	{r3, r4, r5, pc}
 800e40c:	20004cf8 	.word	0x20004cf8

0800e410 <__errno>:
 800e410:	4b01      	ldr	r3, [pc, #4]	@ (800e418 <__errno+0x8>)
 800e412:	6818      	ldr	r0, [r3, #0]
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	20000300 	.word	0x20000300

0800e41c <__libc_init_array>:
 800e41c:	b570      	push	{r4, r5, r6, lr}
 800e41e:	4d0d      	ldr	r5, [pc, #52]	@ (800e454 <__libc_init_array+0x38>)
 800e420:	4c0d      	ldr	r4, [pc, #52]	@ (800e458 <__libc_init_array+0x3c>)
 800e422:	1b64      	subs	r4, r4, r5
 800e424:	10a4      	asrs	r4, r4, #2
 800e426:	2600      	movs	r6, #0
 800e428:	42a6      	cmp	r6, r4
 800e42a:	d109      	bne.n	800e440 <__libc_init_array+0x24>
 800e42c:	4d0b      	ldr	r5, [pc, #44]	@ (800e45c <__libc_init_array+0x40>)
 800e42e:	4c0c      	ldr	r4, [pc, #48]	@ (800e460 <__libc_init_array+0x44>)
 800e430:	f002 fc0a 	bl	8010c48 <_init>
 800e434:	1b64      	subs	r4, r4, r5
 800e436:	10a4      	asrs	r4, r4, #2
 800e438:	2600      	movs	r6, #0
 800e43a:	42a6      	cmp	r6, r4
 800e43c:	d105      	bne.n	800e44a <__libc_init_array+0x2e>
 800e43e:	bd70      	pop	{r4, r5, r6, pc}
 800e440:	f855 3b04 	ldr.w	r3, [r5], #4
 800e444:	4798      	blx	r3
 800e446:	3601      	adds	r6, #1
 800e448:	e7ee      	b.n	800e428 <__libc_init_array+0xc>
 800e44a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e44e:	4798      	blx	r3
 800e450:	3601      	adds	r6, #1
 800e452:	e7f2      	b.n	800e43a <__libc_init_array+0x1e>
 800e454:	080112f8 	.word	0x080112f8
 800e458:	080112f8 	.word	0x080112f8
 800e45c:	080112f8 	.word	0x080112f8
 800e460:	080112fc 	.word	0x080112fc

0800e464 <__retarget_lock_init_recursive>:
 800e464:	4770      	bx	lr

0800e466 <__retarget_lock_acquire_recursive>:
 800e466:	4770      	bx	lr

0800e468 <__retarget_lock_release_recursive>:
 800e468:	4770      	bx	lr

0800e46a <strcpy>:
 800e46a:	4603      	mov	r3, r0
 800e46c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e470:	f803 2b01 	strb.w	r2, [r3], #1
 800e474:	2a00      	cmp	r2, #0
 800e476:	d1f9      	bne.n	800e46c <strcpy+0x2>
 800e478:	4770      	bx	lr

0800e47a <memcpy>:
 800e47a:	440a      	add	r2, r1
 800e47c:	4291      	cmp	r1, r2
 800e47e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e482:	d100      	bne.n	800e486 <memcpy+0xc>
 800e484:	4770      	bx	lr
 800e486:	b510      	push	{r4, lr}
 800e488:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e48c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e490:	4291      	cmp	r1, r2
 800e492:	d1f9      	bne.n	800e488 <memcpy+0xe>
 800e494:	bd10      	pop	{r4, pc}
	...

0800e498 <nan>:
 800e498:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e4a0 <nan+0x8>
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	7ff80000 	.word	0x7ff80000

0800e4a8 <quorem>:
 800e4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ac:	6903      	ldr	r3, [r0, #16]
 800e4ae:	690c      	ldr	r4, [r1, #16]
 800e4b0:	42a3      	cmp	r3, r4
 800e4b2:	4607      	mov	r7, r0
 800e4b4:	db7e      	blt.n	800e5b4 <quorem+0x10c>
 800e4b6:	3c01      	subs	r4, #1
 800e4b8:	f101 0814 	add.w	r8, r1, #20
 800e4bc:	00a3      	lsls	r3, r4, #2
 800e4be:	f100 0514 	add.w	r5, r0, #20
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4c8:	9301      	str	r3, [sp, #4]
 800e4ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e4da:	fbb2 f6f3 	udiv	r6, r2, r3
 800e4de:	d32e      	bcc.n	800e53e <quorem+0x96>
 800e4e0:	f04f 0a00 	mov.w	sl, #0
 800e4e4:	46c4      	mov	ip, r8
 800e4e6:	46ae      	mov	lr, r5
 800e4e8:	46d3      	mov	fp, sl
 800e4ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e4ee:	b298      	uxth	r0, r3
 800e4f0:	fb06 a000 	mla	r0, r6, r0, sl
 800e4f4:	0c02      	lsrs	r2, r0, #16
 800e4f6:	0c1b      	lsrs	r3, r3, #16
 800e4f8:	fb06 2303 	mla	r3, r6, r3, r2
 800e4fc:	f8de 2000 	ldr.w	r2, [lr]
 800e500:	b280      	uxth	r0, r0
 800e502:	b292      	uxth	r2, r2
 800e504:	1a12      	subs	r2, r2, r0
 800e506:	445a      	add	r2, fp
 800e508:	f8de 0000 	ldr.w	r0, [lr]
 800e50c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e510:	b29b      	uxth	r3, r3
 800e512:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e516:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e51a:	b292      	uxth	r2, r2
 800e51c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e520:	45e1      	cmp	r9, ip
 800e522:	f84e 2b04 	str.w	r2, [lr], #4
 800e526:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e52a:	d2de      	bcs.n	800e4ea <quorem+0x42>
 800e52c:	9b00      	ldr	r3, [sp, #0]
 800e52e:	58eb      	ldr	r3, [r5, r3]
 800e530:	b92b      	cbnz	r3, 800e53e <quorem+0x96>
 800e532:	9b01      	ldr	r3, [sp, #4]
 800e534:	3b04      	subs	r3, #4
 800e536:	429d      	cmp	r5, r3
 800e538:	461a      	mov	r2, r3
 800e53a:	d32f      	bcc.n	800e59c <quorem+0xf4>
 800e53c:	613c      	str	r4, [r7, #16]
 800e53e:	4638      	mov	r0, r7
 800e540:	f001 fc60 	bl	800fe04 <__mcmp>
 800e544:	2800      	cmp	r0, #0
 800e546:	db25      	blt.n	800e594 <quorem+0xec>
 800e548:	4629      	mov	r1, r5
 800e54a:	2000      	movs	r0, #0
 800e54c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e550:	f8d1 c000 	ldr.w	ip, [r1]
 800e554:	fa1f fe82 	uxth.w	lr, r2
 800e558:	fa1f f38c 	uxth.w	r3, ip
 800e55c:	eba3 030e 	sub.w	r3, r3, lr
 800e560:	4403      	add	r3, r0
 800e562:	0c12      	lsrs	r2, r2, #16
 800e564:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e568:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e572:	45c1      	cmp	r9, r8
 800e574:	f841 3b04 	str.w	r3, [r1], #4
 800e578:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e57c:	d2e6      	bcs.n	800e54c <quorem+0xa4>
 800e57e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e586:	b922      	cbnz	r2, 800e592 <quorem+0xea>
 800e588:	3b04      	subs	r3, #4
 800e58a:	429d      	cmp	r5, r3
 800e58c:	461a      	mov	r2, r3
 800e58e:	d30b      	bcc.n	800e5a8 <quorem+0x100>
 800e590:	613c      	str	r4, [r7, #16]
 800e592:	3601      	adds	r6, #1
 800e594:	4630      	mov	r0, r6
 800e596:	b003      	add	sp, #12
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	6812      	ldr	r2, [r2, #0]
 800e59e:	3b04      	subs	r3, #4
 800e5a0:	2a00      	cmp	r2, #0
 800e5a2:	d1cb      	bne.n	800e53c <quorem+0x94>
 800e5a4:	3c01      	subs	r4, #1
 800e5a6:	e7c6      	b.n	800e536 <quorem+0x8e>
 800e5a8:	6812      	ldr	r2, [r2, #0]
 800e5aa:	3b04      	subs	r3, #4
 800e5ac:	2a00      	cmp	r2, #0
 800e5ae:	d1ef      	bne.n	800e590 <quorem+0xe8>
 800e5b0:	3c01      	subs	r4, #1
 800e5b2:	e7ea      	b.n	800e58a <quorem+0xe2>
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	e7ee      	b.n	800e596 <quorem+0xee>

0800e5b8 <_dtoa_r>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	69c7      	ldr	r7, [r0, #28]
 800e5be:	b099      	sub	sp, #100	@ 0x64
 800e5c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e5c4:	ec55 4b10 	vmov	r4, r5, d0
 800e5c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e5ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800e5cc:	4683      	mov	fp, r0
 800e5ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e5d2:	b97f      	cbnz	r7, 800e5f4 <_dtoa_r+0x3c>
 800e5d4:	2010      	movs	r0, #16
 800e5d6:	f001 f937 	bl	800f848 <malloc>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800e5e0:	b920      	cbnz	r0, 800e5ec <_dtoa_r+0x34>
 800e5e2:	4ba7      	ldr	r3, [pc, #668]	@ (800e880 <_dtoa_r+0x2c8>)
 800e5e4:	21ef      	movs	r1, #239	@ 0xef
 800e5e6:	48a7      	ldr	r0, [pc, #668]	@ (800e884 <_dtoa_r+0x2cc>)
 800e5e8:	f002 f824 	bl	8010634 <__assert_func>
 800e5ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e5f0:	6007      	str	r7, [r0, #0]
 800e5f2:	60c7      	str	r7, [r0, #12]
 800e5f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	b159      	cbz	r1, 800e614 <_dtoa_r+0x5c>
 800e5fc:	685a      	ldr	r2, [r3, #4]
 800e5fe:	604a      	str	r2, [r1, #4]
 800e600:	2301      	movs	r3, #1
 800e602:	4093      	lsls	r3, r2
 800e604:	608b      	str	r3, [r1, #8]
 800e606:	4658      	mov	r0, fp
 800e608:	f001 f978 	bl	800f8fc <_Bfree>
 800e60c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e610:	2200      	movs	r2, #0
 800e612:	601a      	str	r2, [r3, #0]
 800e614:	1e2b      	subs	r3, r5, #0
 800e616:	bfb9      	ittee	lt
 800e618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e61c:	9303      	strlt	r3, [sp, #12]
 800e61e:	2300      	movge	r3, #0
 800e620:	6033      	strge	r3, [r6, #0]
 800e622:	9f03      	ldr	r7, [sp, #12]
 800e624:	4b98      	ldr	r3, [pc, #608]	@ (800e888 <_dtoa_r+0x2d0>)
 800e626:	bfbc      	itt	lt
 800e628:	2201      	movlt	r2, #1
 800e62a:	6032      	strlt	r2, [r6, #0]
 800e62c:	43bb      	bics	r3, r7
 800e62e:	d112      	bne.n	800e656 <_dtoa_r+0x9e>
 800e630:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e632:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e636:	6013      	str	r3, [r2, #0]
 800e638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e63c:	4323      	orrs	r3, r4
 800e63e:	f000 854d 	beq.w	800f0dc <_dtoa_r+0xb24>
 800e642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e644:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e89c <_dtoa_r+0x2e4>
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f000 854f 	beq.w	800f0ec <_dtoa_r+0xb34>
 800e64e:	f10a 0303 	add.w	r3, sl, #3
 800e652:	f000 bd49 	b.w	800f0e8 <_dtoa_r+0xb30>
 800e656:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e65a:	2200      	movs	r2, #0
 800e65c:	ec51 0b17 	vmov	r0, r1, d7
 800e660:	2300      	movs	r3, #0
 800e662:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e666:	f7f2 fa57 	bl	8000b18 <__aeabi_dcmpeq>
 800e66a:	4680      	mov	r8, r0
 800e66c:	b158      	cbz	r0, 800e686 <_dtoa_r+0xce>
 800e66e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e670:	2301      	movs	r3, #1
 800e672:	6013      	str	r3, [r2, #0]
 800e674:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e676:	b113      	cbz	r3, 800e67e <_dtoa_r+0xc6>
 800e678:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e67a:	4b84      	ldr	r3, [pc, #528]	@ (800e88c <_dtoa_r+0x2d4>)
 800e67c:	6013      	str	r3, [r2, #0]
 800e67e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e8a0 <_dtoa_r+0x2e8>
 800e682:	f000 bd33 	b.w	800f0ec <_dtoa_r+0xb34>
 800e686:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e68a:	aa16      	add	r2, sp, #88	@ 0x58
 800e68c:	a917      	add	r1, sp, #92	@ 0x5c
 800e68e:	4658      	mov	r0, fp
 800e690:	f001 fcd8 	bl	8010044 <__d2b>
 800e694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e698:	4681      	mov	r9, r0
 800e69a:	2e00      	cmp	r6, #0
 800e69c:	d077      	beq.n	800e78e <_dtoa_r+0x1d6>
 800e69e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e6a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e6b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e6b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	4b74      	ldr	r3, [pc, #464]	@ (800e890 <_dtoa_r+0x2d8>)
 800e6be:	f7f1 fe0b 	bl	80002d8 <__aeabi_dsub>
 800e6c2:	a369      	add	r3, pc, #420	@ (adr r3, 800e868 <_dtoa_r+0x2b0>)
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	f7f1 ffbe 	bl	8000648 <__aeabi_dmul>
 800e6cc:	a368      	add	r3, pc, #416	@ (adr r3, 800e870 <_dtoa_r+0x2b8>)
 800e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6d2:	f7f1 fe03 	bl	80002dc <__adddf3>
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	4630      	mov	r0, r6
 800e6da:	460d      	mov	r5, r1
 800e6dc:	f7f1 ff4a 	bl	8000574 <__aeabi_i2d>
 800e6e0:	a365      	add	r3, pc, #404	@ (adr r3, 800e878 <_dtoa_r+0x2c0>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f7f1 ffaf 	bl	8000648 <__aeabi_dmul>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	4620      	mov	r0, r4
 800e6f0:	4629      	mov	r1, r5
 800e6f2:	f7f1 fdf3 	bl	80002dc <__adddf3>
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	460d      	mov	r5, r1
 800e6fa:	f7f2 fa55 	bl	8000ba8 <__aeabi_d2iz>
 800e6fe:	2200      	movs	r2, #0
 800e700:	4607      	mov	r7, r0
 800e702:	2300      	movs	r3, #0
 800e704:	4620      	mov	r0, r4
 800e706:	4629      	mov	r1, r5
 800e708:	f7f2 fa10 	bl	8000b2c <__aeabi_dcmplt>
 800e70c:	b140      	cbz	r0, 800e720 <_dtoa_r+0x168>
 800e70e:	4638      	mov	r0, r7
 800e710:	f7f1 ff30 	bl	8000574 <__aeabi_i2d>
 800e714:	4622      	mov	r2, r4
 800e716:	462b      	mov	r3, r5
 800e718:	f7f2 f9fe 	bl	8000b18 <__aeabi_dcmpeq>
 800e71c:	b900      	cbnz	r0, 800e720 <_dtoa_r+0x168>
 800e71e:	3f01      	subs	r7, #1
 800e720:	2f16      	cmp	r7, #22
 800e722:	d851      	bhi.n	800e7c8 <_dtoa_r+0x210>
 800e724:	4b5b      	ldr	r3, [pc, #364]	@ (800e894 <_dtoa_r+0x2dc>)
 800e726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e732:	f7f2 f9fb 	bl	8000b2c <__aeabi_dcmplt>
 800e736:	2800      	cmp	r0, #0
 800e738:	d048      	beq.n	800e7cc <_dtoa_r+0x214>
 800e73a:	3f01      	subs	r7, #1
 800e73c:	2300      	movs	r3, #0
 800e73e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e740:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e742:	1b9b      	subs	r3, r3, r6
 800e744:	1e5a      	subs	r2, r3, #1
 800e746:	bf44      	itt	mi
 800e748:	f1c3 0801 	rsbmi	r8, r3, #1
 800e74c:	2300      	movmi	r3, #0
 800e74e:	9208      	str	r2, [sp, #32]
 800e750:	bf54      	ite	pl
 800e752:	f04f 0800 	movpl.w	r8, #0
 800e756:	9308      	strmi	r3, [sp, #32]
 800e758:	2f00      	cmp	r7, #0
 800e75a:	db39      	blt.n	800e7d0 <_dtoa_r+0x218>
 800e75c:	9b08      	ldr	r3, [sp, #32]
 800e75e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e760:	443b      	add	r3, r7
 800e762:	9308      	str	r3, [sp, #32]
 800e764:	2300      	movs	r3, #0
 800e766:	930a      	str	r3, [sp, #40]	@ 0x28
 800e768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76a:	2b09      	cmp	r3, #9
 800e76c:	d864      	bhi.n	800e838 <_dtoa_r+0x280>
 800e76e:	2b05      	cmp	r3, #5
 800e770:	bfc4      	itt	gt
 800e772:	3b04      	subgt	r3, #4
 800e774:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e778:	f1a3 0302 	sub.w	r3, r3, #2
 800e77c:	bfcc      	ite	gt
 800e77e:	2400      	movgt	r4, #0
 800e780:	2401      	movle	r4, #1
 800e782:	2b03      	cmp	r3, #3
 800e784:	d863      	bhi.n	800e84e <_dtoa_r+0x296>
 800e786:	e8df f003 	tbb	[pc, r3]
 800e78a:	372a      	.short	0x372a
 800e78c:	5535      	.short	0x5535
 800e78e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e792:	441e      	add	r6, r3
 800e794:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e798:	2b20      	cmp	r3, #32
 800e79a:	bfc1      	itttt	gt
 800e79c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e7a0:	409f      	lslgt	r7, r3
 800e7a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e7a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e7aa:	bfd6      	itet	le
 800e7ac:	f1c3 0320 	rsble	r3, r3, #32
 800e7b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e7b4:	fa04 f003 	lslle.w	r0, r4, r3
 800e7b8:	f7f1 fecc 	bl	8000554 <__aeabi_ui2d>
 800e7bc:	2201      	movs	r2, #1
 800e7be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e7c2:	3e01      	subs	r6, #1
 800e7c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e7c6:	e777      	b.n	800e6b8 <_dtoa_r+0x100>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e7b8      	b.n	800e73e <_dtoa_r+0x186>
 800e7cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e7ce:	e7b7      	b.n	800e740 <_dtoa_r+0x188>
 800e7d0:	427b      	negs	r3, r7
 800e7d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	eba8 0807 	sub.w	r8, r8, r7
 800e7da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7dc:	e7c4      	b.n	800e768 <_dtoa_r+0x1b0>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	dc35      	bgt.n	800e854 <_dtoa_r+0x29c>
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	9307      	str	r3, [sp, #28]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7f2:	e00b      	b.n	800e80c <_dtoa_r+0x254>
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e7f3      	b.n	800e7e0 <_dtoa_r+0x228>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7fe:	18fb      	adds	r3, r7, r3
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	3301      	adds	r3, #1
 800e804:	2b01      	cmp	r3, #1
 800e806:	9307      	str	r3, [sp, #28]
 800e808:	bfb8      	it	lt
 800e80a:	2301      	movlt	r3, #1
 800e80c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e810:	2100      	movs	r1, #0
 800e812:	2204      	movs	r2, #4
 800e814:	f102 0514 	add.w	r5, r2, #20
 800e818:	429d      	cmp	r5, r3
 800e81a:	d91f      	bls.n	800e85c <_dtoa_r+0x2a4>
 800e81c:	6041      	str	r1, [r0, #4]
 800e81e:	4658      	mov	r0, fp
 800e820:	f001 f82c 	bl	800f87c <_Balloc>
 800e824:	4682      	mov	sl, r0
 800e826:	2800      	cmp	r0, #0
 800e828:	d13c      	bne.n	800e8a4 <_dtoa_r+0x2ec>
 800e82a:	4b1b      	ldr	r3, [pc, #108]	@ (800e898 <_dtoa_r+0x2e0>)
 800e82c:	4602      	mov	r2, r0
 800e82e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e832:	e6d8      	b.n	800e5e6 <_dtoa_r+0x2e>
 800e834:	2301      	movs	r3, #1
 800e836:	e7e0      	b.n	800e7fa <_dtoa_r+0x242>
 800e838:	2401      	movs	r4, #1
 800e83a:	2300      	movs	r3, #0
 800e83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e83e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e840:	f04f 33ff 	mov.w	r3, #4294967295
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	9307      	str	r3, [sp, #28]
 800e848:	2200      	movs	r2, #0
 800e84a:	2312      	movs	r3, #18
 800e84c:	e7d0      	b.n	800e7f0 <_dtoa_r+0x238>
 800e84e:	2301      	movs	r3, #1
 800e850:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e852:	e7f5      	b.n	800e840 <_dtoa_r+0x288>
 800e854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	9307      	str	r3, [sp, #28]
 800e85a:	e7d7      	b.n	800e80c <_dtoa_r+0x254>
 800e85c:	3101      	adds	r1, #1
 800e85e:	0052      	lsls	r2, r2, #1
 800e860:	e7d8      	b.n	800e814 <_dtoa_r+0x25c>
 800e862:	bf00      	nop
 800e864:	f3af 8000 	nop.w
 800e868:	636f4361 	.word	0x636f4361
 800e86c:	3fd287a7 	.word	0x3fd287a7
 800e870:	8b60c8b3 	.word	0x8b60c8b3
 800e874:	3fc68a28 	.word	0x3fc68a28
 800e878:	509f79fb 	.word	0x509f79fb
 800e87c:	3fd34413 	.word	0x3fd34413
 800e880:	08010f69 	.word	0x08010f69
 800e884:	08010f80 	.word	0x08010f80
 800e888:	7ff00000 	.word	0x7ff00000
 800e88c:	08010f31 	.word	0x08010f31
 800e890:	3ff80000 	.word	0x3ff80000
 800e894:	080110d8 	.word	0x080110d8
 800e898:	08010fd8 	.word	0x08010fd8
 800e89c:	08010f65 	.word	0x08010f65
 800e8a0:	08010f30 	.word	0x08010f30
 800e8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e8a8:	6018      	str	r0, [r3, #0]
 800e8aa:	9b07      	ldr	r3, [sp, #28]
 800e8ac:	2b0e      	cmp	r3, #14
 800e8ae:	f200 80a4 	bhi.w	800e9fa <_dtoa_r+0x442>
 800e8b2:	2c00      	cmp	r4, #0
 800e8b4:	f000 80a1 	beq.w	800e9fa <_dtoa_r+0x442>
 800e8b8:	2f00      	cmp	r7, #0
 800e8ba:	dd33      	ble.n	800e924 <_dtoa_r+0x36c>
 800e8bc:	4bad      	ldr	r3, [pc, #692]	@ (800eb74 <_dtoa_r+0x5bc>)
 800e8be:	f007 020f 	and.w	r2, r7, #15
 800e8c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8c6:	ed93 7b00 	vldr	d7, [r3]
 800e8ca:	05f8      	lsls	r0, r7, #23
 800e8cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e8d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e8d4:	d516      	bpl.n	800e904 <_dtoa_r+0x34c>
 800e8d6:	4ba8      	ldr	r3, [pc, #672]	@ (800eb78 <_dtoa_r+0x5c0>)
 800e8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e8e0:	f7f1 ffdc 	bl	800089c <__aeabi_ddiv>
 800e8e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8e8:	f004 040f 	and.w	r4, r4, #15
 800e8ec:	2603      	movs	r6, #3
 800e8ee:	4da2      	ldr	r5, [pc, #648]	@ (800eb78 <_dtoa_r+0x5c0>)
 800e8f0:	b954      	cbnz	r4, 800e908 <_dtoa_r+0x350>
 800e8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8fa:	f7f1 ffcf 	bl	800089c <__aeabi_ddiv>
 800e8fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e902:	e028      	b.n	800e956 <_dtoa_r+0x39e>
 800e904:	2602      	movs	r6, #2
 800e906:	e7f2      	b.n	800e8ee <_dtoa_r+0x336>
 800e908:	07e1      	lsls	r1, r4, #31
 800e90a:	d508      	bpl.n	800e91e <_dtoa_r+0x366>
 800e90c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e910:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e914:	f7f1 fe98 	bl	8000648 <__aeabi_dmul>
 800e918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e91c:	3601      	adds	r6, #1
 800e91e:	1064      	asrs	r4, r4, #1
 800e920:	3508      	adds	r5, #8
 800e922:	e7e5      	b.n	800e8f0 <_dtoa_r+0x338>
 800e924:	f000 80d2 	beq.w	800eacc <_dtoa_r+0x514>
 800e928:	427c      	negs	r4, r7
 800e92a:	4b92      	ldr	r3, [pc, #584]	@ (800eb74 <_dtoa_r+0x5bc>)
 800e92c:	4d92      	ldr	r5, [pc, #584]	@ (800eb78 <_dtoa_r+0x5c0>)
 800e92e:	f004 020f 	and.w	r2, r4, #15
 800e932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e93e:	f7f1 fe83 	bl	8000648 <__aeabi_dmul>
 800e942:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e946:	1124      	asrs	r4, r4, #4
 800e948:	2300      	movs	r3, #0
 800e94a:	2602      	movs	r6, #2
 800e94c:	2c00      	cmp	r4, #0
 800e94e:	f040 80b2 	bne.w	800eab6 <_dtoa_r+0x4fe>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1d3      	bne.n	800e8fe <_dtoa_r+0x346>
 800e956:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e958:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	f000 80b7 	beq.w	800ead0 <_dtoa_r+0x518>
 800e962:	4b86      	ldr	r3, [pc, #536]	@ (800eb7c <_dtoa_r+0x5c4>)
 800e964:	2200      	movs	r2, #0
 800e966:	4620      	mov	r0, r4
 800e968:	4629      	mov	r1, r5
 800e96a:	f7f2 f8df 	bl	8000b2c <__aeabi_dcmplt>
 800e96e:	2800      	cmp	r0, #0
 800e970:	f000 80ae 	beq.w	800ead0 <_dtoa_r+0x518>
 800e974:	9b07      	ldr	r3, [sp, #28]
 800e976:	2b00      	cmp	r3, #0
 800e978:	f000 80aa 	beq.w	800ead0 <_dtoa_r+0x518>
 800e97c:	9b00      	ldr	r3, [sp, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	dd37      	ble.n	800e9f2 <_dtoa_r+0x43a>
 800e982:	1e7b      	subs	r3, r7, #1
 800e984:	9304      	str	r3, [sp, #16]
 800e986:	4620      	mov	r0, r4
 800e988:	4b7d      	ldr	r3, [pc, #500]	@ (800eb80 <_dtoa_r+0x5c8>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	4629      	mov	r1, r5
 800e98e:	f7f1 fe5b 	bl	8000648 <__aeabi_dmul>
 800e992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e996:	9c00      	ldr	r4, [sp, #0]
 800e998:	3601      	adds	r6, #1
 800e99a:	4630      	mov	r0, r6
 800e99c:	f7f1 fdea 	bl	8000574 <__aeabi_i2d>
 800e9a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9a4:	f7f1 fe50 	bl	8000648 <__aeabi_dmul>
 800e9a8:	4b76      	ldr	r3, [pc, #472]	@ (800eb84 <_dtoa_r+0x5cc>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f7f1 fc96 	bl	80002dc <__adddf3>
 800e9b0:	4605      	mov	r5, r0
 800e9b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e9b6:	2c00      	cmp	r4, #0
 800e9b8:	f040 808d 	bne.w	800ead6 <_dtoa_r+0x51e>
 800e9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9c0:	4b71      	ldr	r3, [pc, #452]	@ (800eb88 <_dtoa_r+0x5d0>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f7f1 fc88 	bl	80002d8 <__aeabi_dsub>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e9d0:	462a      	mov	r2, r5
 800e9d2:	4633      	mov	r3, r6
 800e9d4:	f7f2 f8c8 	bl	8000b68 <__aeabi_dcmpgt>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	f040 828b 	bne.w	800eef4 <_dtoa_r+0x93c>
 800e9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e9e8:	f7f2 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f040 8128 	bne.w	800ec42 <_dtoa_r+0x68a>
 800e9f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e9f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e9fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f2c0 815a 	blt.w	800ecb6 <_dtoa_r+0x6fe>
 800ea02:	2f0e      	cmp	r7, #14
 800ea04:	f300 8157 	bgt.w	800ecb6 <_dtoa_r+0x6fe>
 800ea08:	4b5a      	ldr	r3, [pc, #360]	@ (800eb74 <_dtoa_r+0x5bc>)
 800ea0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea0e:	ed93 7b00 	vldr	d7, [r3]
 800ea12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	ed8d 7b00 	vstr	d7, [sp]
 800ea1a:	da03      	bge.n	800ea24 <_dtoa_r+0x46c>
 800ea1c:	9b07      	ldr	r3, [sp, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f340 8101 	ble.w	800ec26 <_dtoa_r+0x66e>
 800ea24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea28:	4656      	mov	r6, sl
 800ea2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea2e:	4620      	mov	r0, r4
 800ea30:	4629      	mov	r1, r5
 800ea32:	f7f1 ff33 	bl	800089c <__aeabi_ddiv>
 800ea36:	f7f2 f8b7 	bl	8000ba8 <__aeabi_d2iz>
 800ea3a:	4680      	mov	r8, r0
 800ea3c:	f7f1 fd9a 	bl	8000574 <__aeabi_i2d>
 800ea40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea44:	f7f1 fe00 	bl	8000648 <__aeabi_dmul>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	4620      	mov	r0, r4
 800ea4e:	4629      	mov	r1, r5
 800ea50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ea54:	f7f1 fc40 	bl	80002d8 <__aeabi_dsub>
 800ea58:	f806 4b01 	strb.w	r4, [r6], #1
 800ea5c:	9d07      	ldr	r5, [sp, #28]
 800ea5e:	eba6 040a 	sub.w	r4, r6, sl
 800ea62:	42a5      	cmp	r5, r4
 800ea64:	4602      	mov	r2, r0
 800ea66:	460b      	mov	r3, r1
 800ea68:	f040 8117 	bne.w	800ec9a <_dtoa_r+0x6e2>
 800ea6c:	f7f1 fc36 	bl	80002dc <__adddf3>
 800ea70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea74:	4604      	mov	r4, r0
 800ea76:	460d      	mov	r5, r1
 800ea78:	f7f2 f876 	bl	8000b68 <__aeabi_dcmpgt>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	f040 80f9 	bne.w	800ec74 <_dtoa_r+0x6bc>
 800ea82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea86:	4620      	mov	r0, r4
 800ea88:	4629      	mov	r1, r5
 800ea8a:	f7f2 f845 	bl	8000b18 <__aeabi_dcmpeq>
 800ea8e:	b118      	cbz	r0, 800ea98 <_dtoa_r+0x4e0>
 800ea90:	f018 0f01 	tst.w	r8, #1
 800ea94:	f040 80ee 	bne.w	800ec74 <_dtoa_r+0x6bc>
 800ea98:	4649      	mov	r1, r9
 800ea9a:	4658      	mov	r0, fp
 800ea9c:	f000 ff2e 	bl	800f8fc <_Bfree>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	7033      	strb	r3, [r6, #0]
 800eaa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eaa6:	3701      	adds	r7, #1
 800eaa8:	601f      	str	r7, [r3, #0]
 800eaaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 831d 	beq.w	800f0ec <_dtoa_r+0xb34>
 800eab2:	601e      	str	r6, [r3, #0]
 800eab4:	e31a      	b.n	800f0ec <_dtoa_r+0xb34>
 800eab6:	07e2      	lsls	r2, r4, #31
 800eab8:	d505      	bpl.n	800eac6 <_dtoa_r+0x50e>
 800eaba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eabe:	f7f1 fdc3 	bl	8000648 <__aeabi_dmul>
 800eac2:	3601      	adds	r6, #1
 800eac4:	2301      	movs	r3, #1
 800eac6:	1064      	asrs	r4, r4, #1
 800eac8:	3508      	adds	r5, #8
 800eaca:	e73f      	b.n	800e94c <_dtoa_r+0x394>
 800eacc:	2602      	movs	r6, #2
 800eace:	e742      	b.n	800e956 <_dtoa_r+0x39e>
 800ead0:	9c07      	ldr	r4, [sp, #28]
 800ead2:	9704      	str	r7, [sp, #16]
 800ead4:	e761      	b.n	800e99a <_dtoa_r+0x3e2>
 800ead6:	4b27      	ldr	r3, [pc, #156]	@ (800eb74 <_dtoa_r+0x5bc>)
 800ead8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eade:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eae2:	4454      	add	r4, sl
 800eae4:	2900      	cmp	r1, #0
 800eae6:	d053      	beq.n	800eb90 <_dtoa_r+0x5d8>
 800eae8:	4928      	ldr	r1, [pc, #160]	@ (800eb8c <_dtoa_r+0x5d4>)
 800eaea:	2000      	movs	r0, #0
 800eaec:	f7f1 fed6 	bl	800089c <__aeabi_ddiv>
 800eaf0:	4633      	mov	r3, r6
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	f7f1 fbf0 	bl	80002d8 <__aeabi_dsub>
 800eaf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eafc:	4656      	mov	r6, sl
 800eafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb02:	f7f2 f851 	bl	8000ba8 <__aeabi_d2iz>
 800eb06:	4605      	mov	r5, r0
 800eb08:	f7f1 fd34 	bl	8000574 <__aeabi_i2d>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb14:	f7f1 fbe0 	bl	80002d8 <__aeabi_dsub>
 800eb18:	3530      	adds	r5, #48	@ 0x30
 800eb1a:	4602      	mov	r2, r0
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb22:	f806 5b01 	strb.w	r5, [r6], #1
 800eb26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb2a:	f7f1 ffff 	bl	8000b2c <__aeabi_dcmplt>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d171      	bne.n	800ec16 <_dtoa_r+0x65e>
 800eb32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb36:	4911      	ldr	r1, [pc, #68]	@ (800eb7c <_dtoa_r+0x5c4>)
 800eb38:	2000      	movs	r0, #0
 800eb3a:	f7f1 fbcd 	bl	80002d8 <__aeabi_dsub>
 800eb3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eb42:	f7f1 fff3 	bl	8000b2c <__aeabi_dcmplt>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f040 8095 	bne.w	800ec76 <_dtoa_r+0x6be>
 800eb4c:	42a6      	cmp	r6, r4
 800eb4e:	f43f af50 	beq.w	800e9f2 <_dtoa_r+0x43a>
 800eb52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eb56:	4b0a      	ldr	r3, [pc, #40]	@ (800eb80 <_dtoa_r+0x5c8>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f7f1 fd75 	bl	8000648 <__aeabi_dmul>
 800eb5e:	4b08      	ldr	r3, [pc, #32]	@ (800eb80 <_dtoa_r+0x5c8>)
 800eb60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb64:	2200      	movs	r2, #0
 800eb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb6a:	f7f1 fd6d 	bl	8000648 <__aeabi_dmul>
 800eb6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb72:	e7c4      	b.n	800eafe <_dtoa_r+0x546>
 800eb74:	080110d8 	.word	0x080110d8
 800eb78:	080110b0 	.word	0x080110b0
 800eb7c:	3ff00000 	.word	0x3ff00000
 800eb80:	40240000 	.word	0x40240000
 800eb84:	401c0000 	.word	0x401c0000
 800eb88:	40140000 	.word	0x40140000
 800eb8c:	3fe00000 	.word	0x3fe00000
 800eb90:	4631      	mov	r1, r6
 800eb92:	4628      	mov	r0, r5
 800eb94:	f7f1 fd58 	bl	8000648 <__aeabi_dmul>
 800eb98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eb9c:	9415      	str	r4, [sp, #84]	@ 0x54
 800eb9e:	4656      	mov	r6, sl
 800eba0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eba4:	f7f2 f800 	bl	8000ba8 <__aeabi_d2iz>
 800eba8:	4605      	mov	r5, r0
 800ebaa:	f7f1 fce3 	bl	8000574 <__aeabi_i2d>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebb6:	f7f1 fb8f 	bl	80002d8 <__aeabi_dsub>
 800ebba:	3530      	adds	r5, #48	@ 0x30
 800ebbc:	f806 5b01 	strb.w	r5, [r6], #1
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	42a6      	cmp	r6, r4
 800ebc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ebca:	f04f 0200 	mov.w	r2, #0
 800ebce:	d124      	bne.n	800ec1a <_dtoa_r+0x662>
 800ebd0:	4bac      	ldr	r3, [pc, #688]	@ (800ee84 <_dtoa_r+0x8cc>)
 800ebd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ebd6:	f7f1 fb81 	bl	80002dc <__adddf3>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	460b      	mov	r3, r1
 800ebde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebe2:	f7f1 ffc1 	bl	8000b68 <__aeabi_dcmpgt>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d145      	bne.n	800ec76 <_dtoa_r+0x6be>
 800ebea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ebee:	49a5      	ldr	r1, [pc, #660]	@ (800ee84 <_dtoa_r+0x8cc>)
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f7f1 fb71 	bl	80002d8 <__aeabi_dsub>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebfe:	f7f1 ff95 	bl	8000b2c <__aeabi_dcmplt>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f43f aef5 	beq.w	800e9f2 <_dtoa_r+0x43a>
 800ec08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ec0a:	1e73      	subs	r3, r6, #1
 800ec0c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec12:	2b30      	cmp	r3, #48	@ 0x30
 800ec14:	d0f8      	beq.n	800ec08 <_dtoa_r+0x650>
 800ec16:	9f04      	ldr	r7, [sp, #16]
 800ec18:	e73e      	b.n	800ea98 <_dtoa_r+0x4e0>
 800ec1a:	4b9b      	ldr	r3, [pc, #620]	@ (800ee88 <_dtoa_r+0x8d0>)
 800ec1c:	f7f1 fd14 	bl	8000648 <__aeabi_dmul>
 800ec20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec24:	e7bc      	b.n	800eba0 <_dtoa_r+0x5e8>
 800ec26:	d10c      	bne.n	800ec42 <_dtoa_r+0x68a>
 800ec28:	4b98      	ldr	r3, [pc, #608]	@ (800ee8c <_dtoa_r+0x8d4>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec30:	f7f1 fd0a 	bl	8000648 <__aeabi_dmul>
 800ec34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec38:	f7f1 ff8c 	bl	8000b54 <__aeabi_dcmpge>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f000 8157 	beq.w	800eef0 <_dtoa_r+0x938>
 800ec42:	2400      	movs	r4, #0
 800ec44:	4625      	mov	r5, r4
 800ec46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec48:	43db      	mvns	r3, r3
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	4656      	mov	r6, sl
 800ec4e:	2700      	movs	r7, #0
 800ec50:	4621      	mov	r1, r4
 800ec52:	4658      	mov	r0, fp
 800ec54:	f000 fe52 	bl	800f8fc <_Bfree>
 800ec58:	2d00      	cmp	r5, #0
 800ec5a:	d0dc      	beq.n	800ec16 <_dtoa_r+0x65e>
 800ec5c:	b12f      	cbz	r7, 800ec6a <_dtoa_r+0x6b2>
 800ec5e:	42af      	cmp	r7, r5
 800ec60:	d003      	beq.n	800ec6a <_dtoa_r+0x6b2>
 800ec62:	4639      	mov	r1, r7
 800ec64:	4658      	mov	r0, fp
 800ec66:	f000 fe49 	bl	800f8fc <_Bfree>
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	4658      	mov	r0, fp
 800ec6e:	f000 fe45 	bl	800f8fc <_Bfree>
 800ec72:	e7d0      	b.n	800ec16 <_dtoa_r+0x65e>
 800ec74:	9704      	str	r7, [sp, #16]
 800ec76:	4633      	mov	r3, r6
 800ec78:	461e      	mov	r6, r3
 800ec7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec7e:	2a39      	cmp	r2, #57	@ 0x39
 800ec80:	d107      	bne.n	800ec92 <_dtoa_r+0x6da>
 800ec82:	459a      	cmp	sl, r3
 800ec84:	d1f8      	bne.n	800ec78 <_dtoa_r+0x6c0>
 800ec86:	9a04      	ldr	r2, [sp, #16]
 800ec88:	3201      	adds	r2, #1
 800ec8a:	9204      	str	r2, [sp, #16]
 800ec8c:	2230      	movs	r2, #48	@ 0x30
 800ec8e:	f88a 2000 	strb.w	r2, [sl]
 800ec92:	781a      	ldrb	r2, [r3, #0]
 800ec94:	3201      	adds	r2, #1
 800ec96:	701a      	strb	r2, [r3, #0]
 800ec98:	e7bd      	b.n	800ec16 <_dtoa_r+0x65e>
 800ec9a:	4b7b      	ldr	r3, [pc, #492]	@ (800ee88 <_dtoa_r+0x8d0>)
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f7f1 fcd3 	bl	8000648 <__aeabi_dmul>
 800eca2:	2200      	movs	r2, #0
 800eca4:	2300      	movs	r3, #0
 800eca6:	4604      	mov	r4, r0
 800eca8:	460d      	mov	r5, r1
 800ecaa:	f7f1 ff35 	bl	8000b18 <__aeabi_dcmpeq>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f43f aebb 	beq.w	800ea2a <_dtoa_r+0x472>
 800ecb4:	e6f0      	b.n	800ea98 <_dtoa_r+0x4e0>
 800ecb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	f000 80db 	beq.w	800ee74 <_dtoa_r+0x8bc>
 800ecbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc0:	2a01      	cmp	r2, #1
 800ecc2:	f300 80bf 	bgt.w	800ee44 <_dtoa_r+0x88c>
 800ecc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ecc8:	2a00      	cmp	r2, #0
 800ecca:	f000 80b7 	beq.w	800ee3c <_dtoa_r+0x884>
 800ecce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ecd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ecd4:	4646      	mov	r6, r8
 800ecd6:	9a08      	ldr	r2, [sp, #32]
 800ecd8:	2101      	movs	r1, #1
 800ecda:	441a      	add	r2, r3
 800ecdc:	4658      	mov	r0, fp
 800ecde:	4498      	add	r8, r3
 800ece0:	9208      	str	r2, [sp, #32]
 800ece2:	f000 ff09 	bl	800faf8 <__i2b>
 800ece6:	4605      	mov	r5, r0
 800ece8:	b15e      	cbz	r6, 800ed02 <_dtoa_r+0x74a>
 800ecea:	9b08      	ldr	r3, [sp, #32]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	dd08      	ble.n	800ed02 <_dtoa_r+0x74a>
 800ecf0:	42b3      	cmp	r3, r6
 800ecf2:	9a08      	ldr	r2, [sp, #32]
 800ecf4:	bfa8      	it	ge
 800ecf6:	4633      	movge	r3, r6
 800ecf8:	eba8 0803 	sub.w	r8, r8, r3
 800ecfc:	1af6      	subs	r6, r6, r3
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	9308      	str	r3, [sp, #32]
 800ed02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed04:	b1f3      	cbz	r3, 800ed44 <_dtoa_r+0x78c>
 800ed06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f000 80b7 	beq.w	800ee7c <_dtoa_r+0x8c4>
 800ed0e:	b18c      	cbz	r4, 800ed34 <_dtoa_r+0x77c>
 800ed10:	4629      	mov	r1, r5
 800ed12:	4622      	mov	r2, r4
 800ed14:	4658      	mov	r0, fp
 800ed16:	f000 ffaf 	bl	800fc78 <__pow5mult>
 800ed1a:	464a      	mov	r2, r9
 800ed1c:	4601      	mov	r1, r0
 800ed1e:	4605      	mov	r5, r0
 800ed20:	4658      	mov	r0, fp
 800ed22:	f000 feff 	bl	800fb24 <__multiply>
 800ed26:	4649      	mov	r1, r9
 800ed28:	9004      	str	r0, [sp, #16]
 800ed2a:	4658      	mov	r0, fp
 800ed2c:	f000 fde6 	bl	800f8fc <_Bfree>
 800ed30:	9b04      	ldr	r3, [sp, #16]
 800ed32:	4699      	mov	r9, r3
 800ed34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed36:	1b1a      	subs	r2, r3, r4
 800ed38:	d004      	beq.n	800ed44 <_dtoa_r+0x78c>
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	4658      	mov	r0, fp
 800ed3e:	f000 ff9b 	bl	800fc78 <__pow5mult>
 800ed42:	4681      	mov	r9, r0
 800ed44:	2101      	movs	r1, #1
 800ed46:	4658      	mov	r0, fp
 800ed48:	f000 fed6 	bl	800faf8 <__i2b>
 800ed4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed4e:	4604      	mov	r4, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 81cf 	beq.w	800f0f4 <_dtoa_r+0xb3c>
 800ed56:	461a      	mov	r2, r3
 800ed58:	4601      	mov	r1, r0
 800ed5a:	4658      	mov	r0, fp
 800ed5c:	f000 ff8c 	bl	800fc78 <__pow5mult>
 800ed60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	4604      	mov	r4, r0
 800ed66:	f300 8095 	bgt.w	800ee94 <_dtoa_r+0x8dc>
 800ed6a:	9b02      	ldr	r3, [sp, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f040 8087 	bne.w	800ee80 <_dtoa_r+0x8c8>
 800ed72:	9b03      	ldr	r3, [sp, #12]
 800ed74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f040 8089 	bne.w	800ee90 <_dtoa_r+0x8d8>
 800ed7e:	9b03      	ldr	r3, [sp, #12]
 800ed80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed84:	0d1b      	lsrs	r3, r3, #20
 800ed86:	051b      	lsls	r3, r3, #20
 800ed88:	b12b      	cbz	r3, 800ed96 <_dtoa_r+0x7de>
 800ed8a:	9b08      	ldr	r3, [sp, #32]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	9308      	str	r3, [sp, #32]
 800ed90:	f108 0801 	add.w	r8, r8, #1
 800ed94:	2301      	movs	r3, #1
 800ed96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 81b0 	beq.w	800f100 <_dtoa_r+0xb48>
 800eda0:	6923      	ldr	r3, [r4, #16]
 800eda2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eda6:	6918      	ldr	r0, [r3, #16]
 800eda8:	f000 fe5a 	bl	800fa60 <__hi0bits>
 800edac:	f1c0 0020 	rsb	r0, r0, #32
 800edb0:	9b08      	ldr	r3, [sp, #32]
 800edb2:	4418      	add	r0, r3
 800edb4:	f010 001f 	ands.w	r0, r0, #31
 800edb8:	d077      	beq.n	800eeaa <_dtoa_r+0x8f2>
 800edba:	f1c0 0320 	rsb	r3, r0, #32
 800edbe:	2b04      	cmp	r3, #4
 800edc0:	dd6b      	ble.n	800ee9a <_dtoa_r+0x8e2>
 800edc2:	9b08      	ldr	r3, [sp, #32]
 800edc4:	f1c0 001c 	rsb	r0, r0, #28
 800edc8:	4403      	add	r3, r0
 800edca:	4480      	add	r8, r0
 800edcc:	4406      	add	r6, r0
 800edce:	9308      	str	r3, [sp, #32]
 800edd0:	f1b8 0f00 	cmp.w	r8, #0
 800edd4:	dd05      	ble.n	800ede2 <_dtoa_r+0x82a>
 800edd6:	4649      	mov	r1, r9
 800edd8:	4642      	mov	r2, r8
 800edda:	4658      	mov	r0, fp
 800eddc:	f000 ffa6 	bl	800fd2c <__lshift>
 800ede0:	4681      	mov	r9, r0
 800ede2:	9b08      	ldr	r3, [sp, #32]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dd05      	ble.n	800edf4 <_dtoa_r+0x83c>
 800ede8:	4621      	mov	r1, r4
 800edea:	461a      	mov	r2, r3
 800edec:	4658      	mov	r0, fp
 800edee:	f000 ff9d 	bl	800fd2c <__lshift>
 800edf2:	4604      	mov	r4, r0
 800edf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d059      	beq.n	800eeae <_dtoa_r+0x8f6>
 800edfa:	4621      	mov	r1, r4
 800edfc:	4648      	mov	r0, r9
 800edfe:	f001 f801 	bl	800fe04 <__mcmp>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	da53      	bge.n	800eeae <_dtoa_r+0x8f6>
 800ee06:	1e7b      	subs	r3, r7, #1
 800ee08:	9304      	str	r3, [sp, #16]
 800ee0a:	4649      	mov	r1, r9
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	220a      	movs	r2, #10
 800ee10:	4658      	mov	r0, fp
 800ee12:	f000 fd95 	bl	800f940 <__multadd>
 800ee16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee18:	4681      	mov	r9, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f000 8172 	beq.w	800f104 <_dtoa_r+0xb4c>
 800ee20:	2300      	movs	r3, #0
 800ee22:	4629      	mov	r1, r5
 800ee24:	220a      	movs	r2, #10
 800ee26:	4658      	mov	r0, fp
 800ee28:	f000 fd8a 	bl	800f940 <__multadd>
 800ee2c:	9b00      	ldr	r3, [sp, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	4605      	mov	r5, r0
 800ee32:	dc67      	bgt.n	800ef04 <_dtoa_r+0x94c>
 800ee34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	dc41      	bgt.n	800eebe <_dtoa_r+0x906>
 800ee3a:	e063      	b.n	800ef04 <_dtoa_r+0x94c>
 800ee3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ee3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ee42:	e746      	b.n	800ecd2 <_dtoa_r+0x71a>
 800ee44:	9b07      	ldr	r3, [sp, #28]
 800ee46:	1e5c      	subs	r4, r3, #1
 800ee48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee4a:	42a3      	cmp	r3, r4
 800ee4c:	bfbf      	itttt	lt
 800ee4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ee50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ee52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ee54:	1ae3      	sublt	r3, r4, r3
 800ee56:	bfb4      	ite	lt
 800ee58:	18d2      	addlt	r2, r2, r3
 800ee5a:	1b1c      	subge	r4, r3, r4
 800ee5c:	9b07      	ldr	r3, [sp, #28]
 800ee5e:	bfbc      	itt	lt
 800ee60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ee62:	2400      	movlt	r4, #0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bfb5      	itete	lt
 800ee68:	eba8 0603 	sublt.w	r6, r8, r3
 800ee6c:	9b07      	ldrge	r3, [sp, #28]
 800ee6e:	2300      	movlt	r3, #0
 800ee70:	4646      	movge	r6, r8
 800ee72:	e730      	b.n	800ecd6 <_dtoa_r+0x71e>
 800ee74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ee78:	4646      	mov	r6, r8
 800ee7a:	e735      	b.n	800ece8 <_dtoa_r+0x730>
 800ee7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ee7e:	e75c      	b.n	800ed3a <_dtoa_r+0x782>
 800ee80:	2300      	movs	r3, #0
 800ee82:	e788      	b.n	800ed96 <_dtoa_r+0x7de>
 800ee84:	3fe00000 	.word	0x3fe00000
 800ee88:	40240000 	.word	0x40240000
 800ee8c:	40140000 	.word	0x40140000
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	e780      	b.n	800ed96 <_dtoa_r+0x7de>
 800ee94:	2300      	movs	r3, #0
 800ee96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee98:	e782      	b.n	800eda0 <_dtoa_r+0x7e8>
 800ee9a:	d099      	beq.n	800edd0 <_dtoa_r+0x818>
 800ee9c:	9a08      	ldr	r2, [sp, #32]
 800ee9e:	331c      	adds	r3, #28
 800eea0:	441a      	add	r2, r3
 800eea2:	4498      	add	r8, r3
 800eea4:	441e      	add	r6, r3
 800eea6:	9208      	str	r2, [sp, #32]
 800eea8:	e792      	b.n	800edd0 <_dtoa_r+0x818>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	e7f6      	b.n	800ee9c <_dtoa_r+0x8e4>
 800eeae:	9b07      	ldr	r3, [sp, #28]
 800eeb0:	9704      	str	r7, [sp, #16]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	dc20      	bgt.n	800eef8 <_dtoa_r+0x940>
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeba:	2b02      	cmp	r3, #2
 800eebc:	dd1e      	ble.n	800eefc <_dtoa_r+0x944>
 800eebe:	9b00      	ldr	r3, [sp, #0]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f47f aec0 	bne.w	800ec46 <_dtoa_r+0x68e>
 800eec6:	4621      	mov	r1, r4
 800eec8:	2205      	movs	r2, #5
 800eeca:	4658      	mov	r0, fp
 800eecc:	f000 fd38 	bl	800f940 <__multadd>
 800eed0:	4601      	mov	r1, r0
 800eed2:	4604      	mov	r4, r0
 800eed4:	4648      	mov	r0, r9
 800eed6:	f000 ff95 	bl	800fe04 <__mcmp>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	f77f aeb3 	ble.w	800ec46 <_dtoa_r+0x68e>
 800eee0:	4656      	mov	r6, sl
 800eee2:	2331      	movs	r3, #49	@ 0x31
 800eee4:	f806 3b01 	strb.w	r3, [r6], #1
 800eee8:	9b04      	ldr	r3, [sp, #16]
 800eeea:	3301      	adds	r3, #1
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	e6ae      	b.n	800ec4e <_dtoa_r+0x696>
 800eef0:	9c07      	ldr	r4, [sp, #28]
 800eef2:	9704      	str	r7, [sp, #16]
 800eef4:	4625      	mov	r5, r4
 800eef6:	e7f3      	b.n	800eee0 <_dtoa_r+0x928>
 800eef8:	9b07      	ldr	r3, [sp, #28]
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f000 8104 	beq.w	800f10c <_dtoa_r+0xb54>
 800ef04:	2e00      	cmp	r6, #0
 800ef06:	dd05      	ble.n	800ef14 <_dtoa_r+0x95c>
 800ef08:	4629      	mov	r1, r5
 800ef0a:	4632      	mov	r2, r6
 800ef0c:	4658      	mov	r0, fp
 800ef0e:	f000 ff0d 	bl	800fd2c <__lshift>
 800ef12:	4605      	mov	r5, r0
 800ef14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d05a      	beq.n	800efd0 <_dtoa_r+0xa18>
 800ef1a:	6869      	ldr	r1, [r5, #4]
 800ef1c:	4658      	mov	r0, fp
 800ef1e:	f000 fcad 	bl	800f87c <_Balloc>
 800ef22:	4606      	mov	r6, r0
 800ef24:	b928      	cbnz	r0, 800ef32 <_dtoa_r+0x97a>
 800ef26:	4b84      	ldr	r3, [pc, #528]	@ (800f138 <_dtoa_r+0xb80>)
 800ef28:	4602      	mov	r2, r0
 800ef2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ef2e:	f7ff bb5a 	b.w	800e5e6 <_dtoa_r+0x2e>
 800ef32:	692a      	ldr	r2, [r5, #16]
 800ef34:	3202      	adds	r2, #2
 800ef36:	0092      	lsls	r2, r2, #2
 800ef38:	f105 010c 	add.w	r1, r5, #12
 800ef3c:	300c      	adds	r0, #12
 800ef3e:	f7ff fa9c 	bl	800e47a <memcpy>
 800ef42:	2201      	movs	r2, #1
 800ef44:	4631      	mov	r1, r6
 800ef46:	4658      	mov	r0, fp
 800ef48:	f000 fef0 	bl	800fd2c <__lshift>
 800ef4c:	f10a 0301 	add.w	r3, sl, #1
 800ef50:	9307      	str	r3, [sp, #28]
 800ef52:	9b00      	ldr	r3, [sp, #0]
 800ef54:	4453      	add	r3, sl
 800ef56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef58:	9b02      	ldr	r3, [sp, #8]
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	462f      	mov	r7, r5
 800ef60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef62:	4605      	mov	r5, r0
 800ef64:	9b07      	ldr	r3, [sp, #28]
 800ef66:	4621      	mov	r1, r4
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	4648      	mov	r0, r9
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	f7ff fa9b 	bl	800e4a8 <quorem>
 800ef72:	4639      	mov	r1, r7
 800ef74:	9002      	str	r0, [sp, #8]
 800ef76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ef7a:	4648      	mov	r0, r9
 800ef7c:	f000 ff42 	bl	800fe04 <__mcmp>
 800ef80:	462a      	mov	r2, r5
 800ef82:	9008      	str	r0, [sp, #32]
 800ef84:	4621      	mov	r1, r4
 800ef86:	4658      	mov	r0, fp
 800ef88:	f000 ff58 	bl	800fe3c <__mdiff>
 800ef8c:	68c2      	ldr	r2, [r0, #12]
 800ef8e:	4606      	mov	r6, r0
 800ef90:	bb02      	cbnz	r2, 800efd4 <_dtoa_r+0xa1c>
 800ef92:	4601      	mov	r1, r0
 800ef94:	4648      	mov	r0, r9
 800ef96:	f000 ff35 	bl	800fe04 <__mcmp>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	4658      	mov	r0, fp
 800efa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800efa2:	f000 fcab 	bl	800f8fc <_Bfree>
 800efa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efaa:	9e07      	ldr	r6, [sp, #28]
 800efac:	ea43 0102 	orr.w	r1, r3, r2
 800efb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efb2:	4319      	orrs	r1, r3
 800efb4:	d110      	bne.n	800efd8 <_dtoa_r+0xa20>
 800efb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800efba:	d029      	beq.n	800f010 <_dtoa_r+0xa58>
 800efbc:	9b08      	ldr	r3, [sp, #32]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	dd02      	ble.n	800efc8 <_dtoa_r+0xa10>
 800efc2:	9b02      	ldr	r3, [sp, #8]
 800efc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800efc8:	9b00      	ldr	r3, [sp, #0]
 800efca:	f883 8000 	strb.w	r8, [r3]
 800efce:	e63f      	b.n	800ec50 <_dtoa_r+0x698>
 800efd0:	4628      	mov	r0, r5
 800efd2:	e7bb      	b.n	800ef4c <_dtoa_r+0x994>
 800efd4:	2201      	movs	r2, #1
 800efd6:	e7e1      	b.n	800ef9c <_dtoa_r+0x9e4>
 800efd8:	9b08      	ldr	r3, [sp, #32]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	db04      	blt.n	800efe8 <_dtoa_r+0xa30>
 800efde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efe0:	430b      	orrs	r3, r1
 800efe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800efe4:	430b      	orrs	r3, r1
 800efe6:	d120      	bne.n	800f02a <_dtoa_r+0xa72>
 800efe8:	2a00      	cmp	r2, #0
 800efea:	dded      	ble.n	800efc8 <_dtoa_r+0xa10>
 800efec:	4649      	mov	r1, r9
 800efee:	2201      	movs	r2, #1
 800eff0:	4658      	mov	r0, fp
 800eff2:	f000 fe9b 	bl	800fd2c <__lshift>
 800eff6:	4621      	mov	r1, r4
 800eff8:	4681      	mov	r9, r0
 800effa:	f000 ff03 	bl	800fe04 <__mcmp>
 800effe:	2800      	cmp	r0, #0
 800f000:	dc03      	bgt.n	800f00a <_dtoa_r+0xa52>
 800f002:	d1e1      	bne.n	800efc8 <_dtoa_r+0xa10>
 800f004:	f018 0f01 	tst.w	r8, #1
 800f008:	d0de      	beq.n	800efc8 <_dtoa_r+0xa10>
 800f00a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f00e:	d1d8      	bne.n	800efc2 <_dtoa_r+0xa0a>
 800f010:	9a00      	ldr	r2, [sp, #0]
 800f012:	2339      	movs	r3, #57	@ 0x39
 800f014:	7013      	strb	r3, [r2, #0]
 800f016:	4633      	mov	r3, r6
 800f018:	461e      	mov	r6, r3
 800f01a:	3b01      	subs	r3, #1
 800f01c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f020:	2a39      	cmp	r2, #57	@ 0x39
 800f022:	d052      	beq.n	800f0ca <_dtoa_r+0xb12>
 800f024:	3201      	adds	r2, #1
 800f026:	701a      	strb	r2, [r3, #0]
 800f028:	e612      	b.n	800ec50 <_dtoa_r+0x698>
 800f02a:	2a00      	cmp	r2, #0
 800f02c:	dd07      	ble.n	800f03e <_dtoa_r+0xa86>
 800f02e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f032:	d0ed      	beq.n	800f010 <_dtoa_r+0xa58>
 800f034:	9a00      	ldr	r2, [sp, #0]
 800f036:	f108 0301 	add.w	r3, r8, #1
 800f03a:	7013      	strb	r3, [r2, #0]
 800f03c:	e608      	b.n	800ec50 <_dtoa_r+0x698>
 800f03e:	9b07      	ldr	r3, [sp, #28]
 800f040:	9a07      	ldr	r2, [sp, #28]
 800f042:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f048:	4293      	cmp	r3, r2
 800f04a:	d028      	beq.n	800f09e <_dtoa_r+0xae6>
 800f04c:	4649      	mov	r1, r9
 800f04e:	2300      	movs	r3, #0
 800f050:	220a      	movs	r2, #10
 800f052:	4658      	mov	r0, fp
 800f054:	f000 fc74 	bl	800f940 <__multadd>
 800f058:	42af      	cmp	r7, r5
 800f05a:	4681      	mov	r9, r0
 800f05c:	f04f 0300 	mov.w	r3, #0
 800f060:	f04f 020a 	mov.w	r2, #10
 800f064:	4639      	mov	r1, r7
 800f066:	4658      	mov	r0, fp
 800f068:	d107      	bne.n	800f07a <_dtoa_r+0xac2>
 800f06a:	f000 fc69 	bl	800f940 <__multadd>
 800f06e:	4607      	mov	r7, r0
 800f070:	4605      	mov	r5, r0
 800f072:	9b07      	ldr	r3, [sp, #28]
 800f074:	3301      	adds	r3, #1
 800f076:	9307      	str	r3, [sp, #28]
 800f078:	e774      	b.n	800ef64 <_dtoa_r+0x9ac>
 800f07a:	f000 fc61 	bl	800f940 <__multadd>
 800f07e:	4629      	mov	r1, r5
 800f080:	4607      	mov	r7, r0
 800f082:	2300      	movs	r3, #0
 800f084:	220a      	movs	r2, #10
 800f086:	4658      	mov	r0, fp
 800f088:	f000 fc5a 	bl	800f940 <__multadd>
 800f08c:	4605      	mov	r5, r0
 800f08e:	e7f0      	b.n	800f072 <_dtoa_r+0xaba>
 800f090:	9b00      	ldr	r3, [sp, #0]
 800f092:	2b00      	cmp	r3, #0
 800f094:	bfcc      	ite	gt
 800f096:	461e      	movgt	r6, r3
 800f098:	2601      	movle	r6, #1
 800f09a:	4456      	add	r6, sl
 800f09c:	2700      	movs	r7, #0
 800f09e:	4649      	mov	r1, r9
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	4658      	mov	r0, fp
 800f0a4:	f000 fe42 	bl	800fd2c <__lshift>
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	4681      	mov	r9, r0
 800f0ac:	f000 feaa 	bl	800fe04 <__mcmp>
 800f0b0:	2800      	cmp	r0, #0
 800f0b2:	dcb0      	bgt.n	800f016 <_dtoa_r+0xa5e>
 800f0b4:	d102      	bne.n	800f0bc <_dtoa_r+0xb04>
 800f0b6:	f018 0f01 	tst.w	r8, #1
 800f0ba:	d1ac      	bne.n	800f016 <_dtoa_r+0xa5e>
 800f0bc:	4633      	mov	r3, r6
 800f0be:	461e      	mov	r6, r3
 800f0c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0c4:	2a30      	cmp	r2, #48	@ 0x30
 800f0c6:	d0fa      	beq.n	800f0be <_dtoa_r+0xb06>
 800f0c8:	e5c2      	b.n	800ec50 <_dtoa_r+0x698>
 800f0ca:	459a      	cmp	sl, r3
 800f0cc:	d1a4      	bne.n	800f018 <_dtoa_r+0xa60>
 800f0ce:	9b04      	ldr	r3, [sp, #16]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	9304      	str	r3, [sp, #16]
 800f0d4:	2331      	movs	r3, #49	@ 0x31
 800f0d6:	f88a 3000 	strb.w	r3, [sl]
 800f0da:	e5b9      	b.n	800ec50 <_dtoa_r+0x698>
 800f0dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f0de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f13c <_dtoa_r+0xb84>
 800f0e2:	b11b      	cbz	r3, 800f0ec <_dtoa_r+0xb34>
 800f0e4:	f10a 0308 	add.w	r3, sl, #8
 800f0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f0ea:	6013      	str	r3, [r2, #0]
 800f0ec:	4650      	mov	r0, sl
 800f0ee:	b019      	add	sp, #100	@ 0x64
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	f77f ae37 	ble.w	800ed6a <_dtoa_r+0x7b2>
 800f0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800f100:	2001      	movs	r0, #1
 800f102:	e655      	b.n	800edb0 <_dtoa_r+0x7f8>
 800f104:	9b00      	ldr	r3, [sp, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f77f aed6 	ble.w	800eeb8 <_dtoa_r+0x900>
 800f10c:	4656      	mov	r6, sl
 800f10e:	4621      	mov	r1, r4
 800f110:	4648      	mov	r0, r9
 800f112:	f7ff f9c9 	bl	800e4a8 <quorem>
 800f116:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f11a:	f806 8b01 	strb.w	r8, [r6], #1
 800f11e:	9b00      	ldr	r3, [sp, #0]
 800f120:	eba6 020a 	sub.w	r2, r6, sl
 800f124:	4293      	cmp	r3, r2
 800f126:	ddb3      	ble.n	800f090 <_dtoa_r+0xad8>
 800f128:	4649      	mov	r1, r9
 800f12a:	2300      	movs	r3, #0
 800f12c:	220a      	movs	r2, #10
 800f12e:	4658      	mov	r0, fp
 800f130:	f000 fc06 	bl	800f940 <__multadd>
 800f134:	4681      	mov	r9, r0
 800f136:	e7ea      	b.n	800f10e <_dtoa_r+0xb56>
 800f138:	08010fd8 	.word	0x08010fd8
 800f13c:	08010f5c 	.word	0x08010f5c

0800f140 <_free_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4605      	mov	r5, r0
 800f144:	2900      	cmp	r1, #0
 800f146:	d041      	beq.n	800f1cc <_free_r+0x8c>
 800f148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f14c:	1f0c      	subs	r4, r1, #4
 800f14e:	2b00      	cmp	r3, #0
 800f150:	bfb8      	it	lt
 800f152:	18e4      	addlt	r4, r4, r3
 800f154:	f7fd fd2e 	bl	800cbb4 <__malloc_lock>
 800f158:	4a1d      	ldr	r2, [pc, #116]	@ (800f1d0 <_free_r+0x90>)
 800f15a:	6813      	ldr	r3, [r2, #0]
 800f15c:	b933      	cbnz	r3, 800f16c <_free_r+0x2c>
 800f15e:	6063      	str	r3, [r4, #4]
 800f160:	6014      	str	r4, [r2, #0]
 800f162:	4628      	mov	r0, r5
 800f164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f168:	f7fd bd2a 	b.w	800cbc0 <__malloc_unlock>
 800f16c:	42a3      	cmp	r3, r4
 800f16e:	d908      	bls.n	800f182 <_free_r+0x42>
 800f170:	6820      	ldr	r0, [r4, #0]
 800f172:	1821      	adds	r1, r4, r0
 800f174:	428b      	cmp	r3, r1
 800f176:	bf01      	itttt	eq
 800f178:	6819      	ldreq	r1, [r3, #0]
 800f17a:	685b      	ldreq	r3, [r3, #4]
 800f17c:	1809      	addeq	r1, r1, r0
 800f17e:	6021      	streq	r1, [r4, #0]
 800f180:	e7ed      	b.n	800f15e <_free_r+0x1e>
 800f182:	461a      	mov	r2, r3
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	b10b      	cbz	r3, 800f18c <_free_r+0x4c>
 800f188:	42a3      	cmp	r3, r4
 800f18a:	d9fa      	bls.n	800f182 <_free_r+0x42>
 800f18c:	6811      	ldr	r1, [r2, #0]
 800f18e:	1850      	adds	r0, r2, r1
 800f190:	42a0      	cmp	r0, r4
 800f192:	d10b      	bne.n	800f1ac <_free_r+0x6c>
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	4401      	add	r1, r0
 800f198:	1850      	adds	r0, r2, r1
 800f19a:	4283      	cmp	r3, r0
 800f19c:	6011      	str	r1, [r2, #0]
 800f19e:	d1e0      	bne.n	800f162 <_free_r+0x22>
 800f1a0:	6818      	ldr	r0, [r3, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	6053      	str	r3, [r2, #4]
 800f1a6:	4408      	add	r0, r1
 800f1a8:	6010      	str	r0, [r2, #0]
 800f1aa:	e7da      	b.n	800f162 <_free_r+0x22>
 800f1ac:	d902      	bls.n	800f1b4 <_free_r+0x74>
 800f1ae:	230c      	movs	r3, #12
 800f1b0:	602b      	str	r3, [r5, #0]
 800f1b2:	e7d6      	b.n	800f162 <_free_r+0x22>
 800f1b4:	6820      	ldr	r0, [r4, #0]
 800f1b6:	1821      	adds	r1, r4, r0
 800f1b8:	428b      	cmp	r3, r1
 800f1ba:	bf04      	itt	eq
 800f1bc:	6819      	ldreq	r1, [r3, #0]
 800f1be:	685b      	ldreq	r3, [r3, #4]
 800f1c0:	6063      	str	r3, [r4, #4]
 800f1c2:	bf04      	itt	eq
 800f1c4:	1809      	addeq	r1, r1, r0
 800f1c6:	6021      	streq	r1, [r4, #0]
 800f1c8:	6054      	str	r4, [r2, #4]
 800f1ca:	e7ca      	b.n	800f162 <_free_r+0x22>
 800f1cc:	bd38      	pop	{r3, r4, r5, pc}
 800f1ce:	bf00      	nop
 800f1d0:	20004bb8 	.word	0x20004bb8

0800f1d4 <rshift>:
 800f1d4:	6903      	ldr	r3, [r0, #16]
 800f1d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1e2:	f100 0414 	add.w	r4, r0, #20
 800f1e6:	dd45      	ble.n	800f274 <rshift+0xa0>
 800f1e8:	f011 011f 	ands.w	r1, r1, #31
 800f1ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1f4:	d10c      	bne.n	800f210 <rshift+0x3c>
 800f1f6:	f100 0710 	add.w	r7, r0, #16
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	42b1      	cmp	r1, r6
 800f1fe:	d334      	bcc.n	800f26a <rshift+0x96>
 800f200:	1a9b      	subs	r3, r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	1eea      	subs	r2, r5, #3
 800f206:	4296      	cmp	r6, r2
 800f208:	bf38      	it	cc
 800f20a:	2300      	movcc	r3, #0
 800f20c:	4423      	add	r3, r4
 800f20e:	e015      	b.n	800f23c <rshift+0x68>
 800f210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f214:	f1c1 0820 	rsb	r8, r1, #32
 800f218:	40cf      	lsrs	r7, r1
 800f21a:	f105 0e04 	add.w	lr, r5, #4
 800f21e:	46a1      	mov	r9, r4
 800f220:	4576      	cmp	r6, lr
 800f222:	46f4      	mov	ip, lr
 800f224:	d815      	bhi.n	800f252 <rshift+0x7e>
 800f226:	1a9a      	subs	r2, r3, r2
 800f228:	0092      	lsls	r2, r2, #2
 800f22a:	3a04      	subs	r2, #4
 800f22c:	3501      	adds	r5, #1
 800f22e:	42ae      	cmp	r6, r5
 800f230:	bf38      	it	cc
 800f232:	2200      	movcc	r2, #0
 800f234:	18a3      	adds	r3, r4, r2
 800f236:	50a7      	str	r7, [r4, r2]
 800f238:	b107      	cbz	r7, 800f23c <rshift+0x68>
 800f23a:	3304      	adds	r3, #4
 800f23c:	1b1a      	subs	r2, r3, r4
 800f23e:	42a3      	cmp	r3, r4
 800f240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f244:	bf08      	it	eq
 800f246:	2300      	moveq	r3, #0
 800f248:	6102      	str	r2, [r0, #16]
 800f24a:	bf08      	it	eq
 800f24c:	6143      	streq	r3, [r0, #20]
 800f24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f252:	f8dc c000 	ldr.w	ip, [ip]
 800f256:	fa0c fc08 	lsl.w	ip, ip, r8
 800f25a:	ea4c 0707 	orr.w	r7, ip, r7
 800f25e:	f849 7b04 	str.w	r7, [r9], #4
 800f262:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f266:	40cf      	lsrs	r7, r1
 800f268:	e7da      	b.n	800f220 <rshift+0x4c>
 800f26a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f26e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f272:	e7c3      	b.n	800f1fc <rshift+0x28>
 800f274:	4623      	mov	r3, r4
 800f276:	e7e1      	b.n	800f23c <rshift+0x68>

0800f278 <__hexdig_fun>:
 800f278:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f27c:	2b09      	cmp	r3, #9
 800f27e:	d802      	bhi.n	800f286 <__hexdig_fun+0xe>
 800f280:	3820      	subs	r0, #32
 800f282:	b2c0      	uxtb	r0, r0
 800f284:	4770      	bx	lr
 800f286:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f28a:	2b05      	cmp	r3, #5
 800f28c:	d801      	bhi.n	800f292 <__hexdig_fun+0x1a>
 800f28e:	3847      	subs	r0, #71	@ 0x47
 800f290:	e7f7      	b.n	800f282 <__hexdig_fun+0xa>
 800f292:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f296:	2b05      	cmp	r3, #5
 800f298:	d801      	bhi.n	800f29e <__hexdig_fun+0x26>
 800f29a:	3827      	subs	r0, #39	@ 0x27
 800f29c:	e7f1      	b.n	800f282 <__hexdig_fun+0xa>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	4770      	bx	lr
	...

0800f2a4 <__gethex>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	b085      	sub	sp, #20
 800f2aa:	468a      	mov	sl, r1
 800f2ac:	9302      	str	r3, [sp, #8]
 800f2ae:	680b      	ldr	r3, [r1, #0]
 800f2b0:	9001      	str	r0, [sp, #4]
 800f2b2:	4690      	mov	r8, r2
 800f2b4:	1c9c      	adds	r4, r3, #2
 800f2b6:	46a1      	mov	r9, r4
 800f2b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f2bc:	2830      	cmp	r0, #48	@ 0x30
 800f2be:	d0fa      	beq.n	800f2b6 <__gethex+0x12>
 800f2c0:	eba9 0303 	sub.w	r3, r9, r3
 800f2c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800f2c8:	f7ff ffd6 	bl	800f278 <__hexdig_fun>
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d168      	bne.n	800f3a4 <__gethex+0x100>
 800f2d2:	49a0      	ldr	r1, [pc, #640]	@ (800f554 <__gethex+0x2b0>)
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	4648      	mov	r0, r9
 800f2d8:	f7ff f818 	bl	800e30c <strncmp>
 800f2dc:	4607      	mov	r7, r0
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d167      	bne.n	800f3b2 <__gethex+0x10e>
 800f2e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f2e6:	4626      	mov	r6, r4
 800f2e8:	f7ff ffc6 	bl	800f278 <__hexdig_fun>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d062      	beq.n	800f3b6 <__gethex+0x112>
 800f2f0:	4623      	mov	r3, r4
 800f2f2:	7818      	ldrb	r0, [r3, #0]
 800f2f4:	2830      	cmp	r0, #48	@ 0x30
 800f2f6:	4699      	mov	r9, r3
 800f2f8:	f103 0301 	add.w	r3, r3, #1
 800f2fc:	d0f9      	beq.n	800f2f2 <__gethex+0x4e>
 800f2fe:	f7ff ffbb 	bl	800f278 <__hexdig_fun>
 800f302:	fab0 f580 	clz	r5, r0
 800f306:	096d      	lsrs	r5, r5, #5
 800f308:	f04f 0b01 	mov.w	fp, #1
 800f30c:	464a      	mov	r2, r9
 800f30e:	4616      	mov	r6, r2
 800f310:	3201      	adds	r2, #1
 800f312:	7830      	ldrb	r0, [r6, #0]
 800f314:	f7ff ffb0 	bl	800f278 <__hexdig_fun>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d1f8      	bne.n	800f30e <__gethex+0x6a>
 800f31c:	498d      	ldr	r1, [pc, #564]	@ (800f554 <__gethex+0x2b0>)
 800f31e:	2201      	movs	r2, #1
 800f320:	4630      	mov	r0, r6
 800f322:	f7fe fff3 	bl	800e30c <strncmp>
 800f326:	2800      	cmp	r0, #0
 800f328:	d13f      	bne.n	800f3aa <__gethex+0x106>
 800f32a:	b944      	cbnz	r4, 800f33e <__gethex+0x9a>
 800f32c:	1c74      	adds	r4, r6, #1
 800f32e:	4622      	mov	r2, r4
 800f330:	4616      	mov	r6, r2
 800f332:	3201      	adds	r2, #1
 800f334:	7830      	ldrb	r0, [r6, #0]
 800f336:	f7ff ff9f 	bl	800f278 <__hexdig_fun>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d1f8      	bne.n	800f330 <__gethex+0x8c>
 800f33e:	1ba4      	subs	r4, r4, r6
 800f340:	00a7      	lsls	r7, r4, #2
 800f342:	7833      	ldrb	r3, [r6, #0]
 800f344:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f348:	2b50      	cmp	r3, #80	@ 0x50
 800f34a:	d13e      	bne.n	800f3ca <__gethex+0x126>
 800f34c:	7873      	ldrb	r3, [r6, #1]
 800f34e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f350:	d033      	beq.n	800f3ba <__gethex+0x116>
 800f352:	2b2d      	cmp	r3, #45	@ 0x2d
 800f354:	d034      	beq.n	800f3c0 <__gethex+0x11c>
 800f356:	1c71      	adds	r1, r6, #1
 800f358:	2400      	movs	r4, #0
 800f35a:	7808      	ldrb	r0, [r1, #0]
 800f35c:	f7ff ff8c 	bl	800f278 <__hexdig_fun>
 800f360:	1e43      	subs	r3, r0, #1
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b18      	cmp	r3, #24
 800f366:	d830      	bhi.n	800f3ca <__gethex+0x126>
 800f368:	f1a0 0210 	sub.w	r2, r0, #16
 800f36c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f370:	f7ff ff82 	bl	800f278 <__hexdig_fun>
 800f374:	f100 3cff 	add.w	ip, r0, #4294967295
 800f378:	fa5f fc8c 	uxtb.w	ip, ip
 800f37c:	f1bc 0f18 	cmp.w	ip, #24
 800f380:	f04f 030a 	mov.w	r3, #10
 800f384:	d91e      	bls.n	800f3c4 <__gethex+0x120>
 800f386:	b104      	cbz	r4, 800f38a <__gethex+0xe6>
 800f388:	4252      	negs	r2, r2
 800f38a:	4417      	add	r7, r2
 800f38c:	f8ca 1000 	str.w	r1, [sl]
 800f390:	b1ed      	cbz	r5, 800f3ce <__gethex+0x12a>
 800f392:	f1bb 0f00 	cmp.w	fp, #0
 800f396:	bf0c      	ite	eq
 800f398:	2506      	moveq	r5, #6
 800f39a:	2500      	movne	r5, #0
 800f39c:	4628      	mov	r0, r5
 800f39e:	b005      	add	sp, #20
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	2500      	movs	r5, #0
 800f3a6:	462c      	mov	r4, r5
 800f3a8:	e7b0      	b.n	800f30c <__gethex+0x68>
 800f3aa:	2c00      	cmp	r4, #0
 800f3ac:	d1c7      	bne.n	800f33e <__gethex+0x9a>
 800f3ae:	4627      	mov	r7, r4
 800f3b0:	e7c7      	b.n	800f342 <__gethex+0x9e>
 800f3b2:	464e      	mov	r6, r9
 800f3b4:	462f      	mov	r7, r5
 800f3b6:	2501      	movs	r5, #1
 800f3b8:	e7c3      	b.n	800f342 <__gethex+0x9e>
 800f3ba:	2400      	movs	r4, #0
 800f3bc:	1cb1      	adds	r1, r6, #2
 800f3be:	e7cc      	b.n	800f35a <__gethex+0xb6>
 800f3c0:	2401      	movs	r4, #1
 800f3c2:	e7fb      	b.n	800f3bc <__gethex+0x118>
 800f3c4:	fb03 0002 	mla	r0, r3, r2, r0
 800f3c8:	e7ce      	b.n	800f368 <__gethex+0xc4>
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	e7de      	b.n	800f38c <__gethex+0xe8>
 800f3ce:	eba6 0309 	sub.w	r3, r6, r9
 800f3d2:	3b01      	subs	r3, #1
 800f3d4:	4629      	mov	r1, r5
 800f3d6:	2b07      	cmp	r3, #7
 800f3d8:	dc0a      	bgt.n	800f3f0 <__gethex+0x14c>
 800f3da:	9801      	ldr	r0, [sp, #4]
 800f3dc:	f000 fa4e 	bl	800f87c <_Balloc>
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	b940      	cbnz	r0, 800f3f6 <__gethex+0x152>
 800f3e4:	4b5c      	ldr	r3, [pc, #368]	@ (800f558 <__gethex+0x2b4>)
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	21e4      	movs	r1, #228	@ 0xe4
 800f3ea:	485c      	ldr	r0, [pc, #368]	@ (800f55c <__gethex+0x2b8>)
 800f3ec:	f001 f922 	bl	8010634 <__assert_func>
 800f3f0:	3101      	adds	r1, #1
 800f3f2:	105b      	asrs	r3, r3, #1
 800f3f4:	e7ef      	b.n	800f3d6 <__gethex+0x132>
 800f3f6:	f100 0a14 	add.w	sl, r0, #20
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	4655      	mov	r5, sl
 800f3fe:	469b      	mov	fp, r3
 800f400:	45b1      	cmp	r9, r6
 800f402:	d337      	bcc.n	800f474 <__gethex+0x1d0>
 800f404:	f845 bb04 	str.w	fp, [r5], #4
 800f408:	eba5 050a 	sub.w	r5, r5, sl
 800f40c:	10ad      	asrs	r5, r5, #2
 800f40e:	6125      	str	r5, [r4, #16]
 800f410:	4658      	mov	r0, fp
 800f412:	f000 fb25 	bl	800fa60 <__hi0bits>
 800f416:	016d      	lsls	r5, r5, #5
 800f418:	f8d8 6000 	ldr.w	r6, [r8]
 800f41c:	1a2d      	subs	r5, r5, r0
 800f41e:	42b5      	cmp	r5, r6
 800f420:	dd54      	ble.n	800f4cc <__gethex+0x228>
 800f422:	1bad      	subs	r5, r5, r6
 800f424:	4629      	mov	r1, r5
 800f426:	4620      	mov	r0, r4
 800f428:	f000 feb9 	bl	801019e <__any_on>
 800f42c:	4681      	mov	r9, r0
 800f42e:	b178      	cbz	r0, 800f450 <__gethex+0x1ac>
 800f430:	1e6b      	subs	r3, r5, #1
 800f432:	1159      	asrs	r1, r3, #5
 800f434:	f003 021f 	and.w	r2, r3, #31
 800f438:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f43c:	f04f 0901 	mov.w	r9, #1
 800f440:	fa09 f202 	lsl.w	r2, r9, r2
 800f444:	420a      	tst	r2, r1
 800f446:	d003      	beq.n	800f450 <__gethex+0x1ac>
 800f448:	454b      	cmp	r3, r9
 800f44a:	dc36      	bgt.n	800f4ba <__gethex+0x216>
 800f44c:	f04f 0902 	mov.w	r9, #2
 800f450:	4629      	mov	r1, r5
 800f452:	4620      	mov	r0, r4
 800f454:	f7ff febe 	bl	800f1d4 <rshift>
 800f458:	442f      	add	r7, r5
 800f45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f45e:	42bb      	cmp	r3, r7
 800f460:	da42      	bge.n	800f4e8 <__gethex+0x244>
 800f462:	9801      	ldr	r0, [sp, #4]
 800f464:	4621      	mov	r1, r4
 800f466:	f000 fa49 	bl	800f8fc <_Bfree>
 800f46a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f46c:	2300      	movs	r3, #0
 800f46e:	6013      	str	r3, [r2, #0]
 800f470:	25a3      	movs	r5, #163	@ 0xa3
 800f472:	e793      	b.n	800f39c <__gethex+0xf8>
 800f474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f478:	2a2e      	cmp	r2, #46	@ 0x2e
 800f47a:	d012      	beq.n	800f4a2 <__gethex+0x1fe>
 800f47c:	2b20      	cmp	r3, #32
 800f47e:	d104      	bne.n	800f48a <__gethex+0x1e6>
 800f480:	f845 bb04 	str.w	fp, [r5], #4
 800f484:	f04f 0b00 	mov.w	fp, #0
 800f488:	465b      	mov	r3, fp
 800f48a:	7830      	ldrb	r0, [r6, #0]
 800f48c:	9303      	str	r3, [sp, #12]
 800f48e:	f7ff fef3 	bl	800f278 <__hexdig_fun>
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	f000 000f 	and.w	r0, r0, #15
 800f498:	4098      	lsls	r0, r3
 800f49a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f49e:	3304      	adds	r3, #4
 800f4a0:	e7ae      	b.n	800f400 <__gethex+0x15c>
 800f4a2:	45b1      	cmp	r9, r6
 800f4a4:	d8ea      	bhi.n	800f47c <__gethex+0x1d8>
 800f4a6:	492b      	ldr	r1, [pc, #172]	@ (800f554 <__gethex+0x2b0>)
 800f4a8:	9303      	str	r3, [sp, #12]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f7fe ff2d 	bl	800e30c <strncmp>
 800f4b2:	9b03      	ldr	r3, [sp, #12]
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	d1e1      	bne.n	800f47c <__gethex+0x1d8>
 800f4b8:	e7a2      	b.n	800f400 <__gethex+0x15c>
 800f4ba:	1ea9      	subs	r1, r5, #2
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f000 fe6e 	bl	801019e <__any_on>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d0c2      	beq.n	800f44c <__gethex+0x1a8>
 800f4c6:	f04f 0903 	mov.w	r9, #3
 800f4ca:	e7c1      	b.n	800f450 <__gethex+0x1ac>
 800f4cc:	da09      	bge.n	800f4e2 <__gethex+0x23e>
 800f4ce:	1b75      	subs	r5, r6, r5
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	9801      	ldr	r0, [sp, #4]
 800f4d4:	462a      	mov	r2, r5
 800f4d6:	f000 fc29 	bl	800fd2c <__lshift>
 800f4da:	1b7f      	subs	r7, r7, r5
 800f4dc:	4604      	mov	r4, r0
 800f4de:	f100 0a14 	add.w	sl, r0, #20
 800f4e2:	f04f 0900 	mov.w	r9, #0
 800f4e6:	e7b8      	b.n	800f45a <__gethex+0x1b6>
 800f4e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f4ec:	42bd      	cmp	r5, r7
 800f4ee:	dd6f      	ble.n	800f5d0 <__gethex+0x32c>
 800f4f0:	1bed      	subs	r5, r5, r7
 800f4f2:	42ae      	cmp	r6, r5
 800f4f4:	dc34      	bgt.n	800f560 <__gethex+0x2bc>
 800f4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f4fa:	2b02      	cmp	r3, #2
 800f4fc:	d022      	beq.n	800f544 <__gethex+0x2a0>
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d024      	beq.n	800f54c <__gethex+0x2a8>
 800f502:	2b01      	cmp	r3, #1
 800f504:	d115      	bne.n	800f532 <__gethex+0x28e>
 800f506:	42ae      	cmp	r6, r5
 800f508:	d113      	bne.n	800f532 <__gethex+0x28e>
 800f50a:	2e01      	cmp	r6, #1
 800f50c:	d10b      	bne.n	800f526 <__gethex+0x282>
 800f50e:	9a02      	ldr	r2, [sp, #8]
 800f510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f514:	6013      	str	r3, [r2, #0]
 800f516:	2301      	movs	r3, #1
 800f518:	6123      	str	r3, [r4, #16]
 800f51a:	f8ca 3000 	str.w	r3, [sl]
 800f51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f520:	2562      	movs	r5, #98	@ 0x62
 800f522:	601c      	str	r4, [r3, #0]
 800f524:	e73a      	b.n	800f39c <__gethex+0xf8>
 800f526:	1e71      	subs	r1, r6, #1
 800f528:	4620      	mov	r0, r4
 800f52a:	f000 fe38 	bl	801019e <__any_on>
 800f52e:	2800      	cmp	r0, #0
 800f530:	d1ed      	bne.n	800f50e <__gethex+0x26a>
 800f532:	9801      	ldr	r0, [sp, #4]
 800f534:	4621      	mov	r1, r4
 800f536:	f000 f9e1 	bl	800f8fc <_Bfree>
 800f53a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f53c:	2300      	movs	r3, #0
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	2550      	movs	r5, #80	@ 0x50
 800f542:	e72b      	b.n	800f39c <__gethex+0xf8>
 800f544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1f3      	bne.n	800f532 <__gethex+0x28e>
 800f54a:	e7e0      	b.n	800f50e <__gethex+0x26a>
 800f54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1dd      	bne.n	800f50e <__gethex+0x26a>
 800f552:	e7ee      	b.n	800f532 <__gethex+0x28e>
 800f554:	08010ec8 	.word	0x08010ec8
 800f558:	08010fd8 	.word	0x08010fd8
 800f55c:	08010fe9 	.word	0x08010fe9
 800f560:	1e6f      	subs	r7, r5, #1
 800f562:	f1b9 0f00 	cmp.w	r9, #0
 800f566:	d130      	bne.n	800f5ca <__gethex+0x326>
 800f568:	b127      	cbz	r7, 800f574 <__gethex+0x2d0>
 800f56a:	4639      	mov	r1, r7
 800f56c:	4620      	mov	r0, r4
 800f56e:	f000 fe16 	bl	801019e <__any_on>
 800f572:	4681      	mov	r9, r0
 800f574:	117a      	asrs	r2, r7, #5
 800f576:	2301      	movs	r3, #1
 800f578:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f57c:	f007 071f 	and.w	r7, r7, #31
 800f580:	40bb      	lsls	r3, r7
 800f582:	4213      	tst	r3, r2
 800f584:	4629      	mov	r1, r5
 800f586:	4620      	mov	r0, r4
 800f588:	bf18      	it	ne
 800f58a:	f049 0902 	orrne.w	r9, r9, #2
 800f58e:	f7ff fe21 	bl	800f1d4 <rshift>
 800f592:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f596:	1b76      	subs	r6, r6, r5
 800f598:	2502      	movs	r5, #2
 800f59a:	f1b9 0f00 	cmp.w	r9, #0
 800f59e:	d047      	beq.n	800f630 <__gethex+0x38c>
 800f5a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5a4:	2b02      	cmp	r3, #2
 800f5a6:	d015      	beq.n	800f5d4 <__gethex+0x330>
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d017      	beq.n	800f5dc <__gethex+0x338>
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d109      	bne.n	800f5c4 <__gethex+0x320>
 800f5b0:	f019 0f02 	tst.w	r9, #2
 800f5b4:	d006      	beq.n	800f5c4 <__gethex+0x320>
 800f5b6:	f8da 3000 	ldr.w	r3, [sl]
 800f5ba:	ea49 0903 	orr.w	r9, r9, r3
 800f5be:	f019 0f01 	tst.w	r9, #1
 800f5c2:	d10e      	bne.n	800f5e2 <__gethex+0x33e>
 800f5c4:	f045 0510 	orr.w	r5, r5, #16
 800f5c8:	e032      	b.n	800f630 <__gethex+0x38c>
 800f5ca:	f04f 0901 	mov.w	r9, #1
 800f5ce:	e7d1      	b.n	800f574 <__gethex+0x2d0>
 800f5d0:	2501      	movs	r5, #1
 800f5d2:	e7e2      	b.n	800f59a <__gethex+0x2f6>
 800f5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5d6:	f1c3 0301 	rsb	r3, r3, #1
 800f5da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d0f0      	beq.n	800f5c4 <__gethex+0x320>
 800f5e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f5e6:	f104 0314 	add.w	r3, r4, #20
 800f5ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f5ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f5f2:	f04f 0c00 	mov.w	ip, #0
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f600:	d01b      	beq.n	800f63a <__gethex+0x396>
 800f602:	3201      	adds	r2, #1
 800f604:	6002      	str	r2, [r0, #0]
 800f606:	2d02      	cmp	r5, #2
 800f608:	f104 0314 	add.w	r3, r4, #20
 800f60c:	d13c      	bne.n	800f688 <__gethex+0x3e4>
 800f60e:	f8d8 2000 	ldr.w	r2, [r8]
 800f612:	3a01      	subs	r2, #1
 800f614:	42b2      	cmp	r2, r6
 800f616:	d109      	bne.n	800f62c <__gethex+0x388>
 800f618:	1171      	asrs	r1, r6, #5
 800f61a:	2201      	movs	r2, #1
 800f61c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f620:	f006 061f 	and.w	r6, r6, #31
 800f624:	fa02 f606 	lsl.w	r6, r2, r6
 800f628:	421e      	tst	r6, r3
 800f62a:	d13a      	bne.n	800f6a2 <__gethex+0x3fe>
 800f62c:	f045 0520 	orr.w	r5, r5, #32
 800f630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f632:	601c      	str	r4, [r3, #0]
 800f634:	9b02      	ldr	r3, [sp, #8]
 800f636:	601f      	str	r7, [r3, #0]
 800f638:	e6b0      	b.n	800f39c <__gethex+0xf8>
 800f63a:	4299      	cmp	r1, r3
 800f63c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f640:	d8d9      	bhi.n	800f5f6 <__gethex+0x352>
 800f642:	68a3      	ldr	r3, [r4, #8]
 800f644:	459b      	cmp	fp, r3
 800f646:	db17      	blt.n	800f678 <__gethex+0x3d4>
 800f648:	6861      	ldr	r1, [r4, #4]
 800f64a:	9801      	ldr	r0, [sp, #4]
 800f64c:	3101      	adds	r1, #1
 800f64e:	f000 f915 	bl	800f87c <_Balloc>
 800f652:	4681      	mov	r9, r0
 800f654:	b918      	cbnz	r0, 800f65e <__gethex+0x3ba>
 800f656:	4b1a      	ldr	r3, [pc, #104]	@ (800f6c0 <__gethex+0x41c>)
 800f658:	4602      	mov	r2, r0
 800f65a:	2184      	movs	r1, #132	@ 0x84
 800f65c:	e6c5      	b.n	800f3ea <__gethex+0x146>
 800f65e:	6922      	ldr	r2, [r4, #16]
 800f660:	3202      	adds	r2, #2
 800f662:	f104 010c 	add.w	r1, r4, #12
 800f666:	0092      	lsls	r2, r2, #2
 800f668:	300c      	adds	r0, #12
 800f66a:	f7fe ff06 	bl	800e47a <memcpy>
 800f66e:	4621      	mov	r1, r4
 800f670:	9801      	ldr	r0, [sp, #4]
 800f672:	f000 f943 	bl	800f8fc <_Bfree>
 800f676:	464c      	mov	r4, r9
 800f678:	6923      	ldr	r3, [r4, #16]
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f680:	6122      	str	r2, [r4, #16]
 800f682:	2201      	movs	r2, #1
 800f684:	615a      	str	r2, [r3, #20]
 800f686:	e7be      	b.n	800f606 <__gethex+0x362>
 800f688:	6922      	ldr	r2, [r4, #16]
 800f68a:	455a      	cmp	r2, fp
 800f68c:	dd0b      	ble.n	800f6a6 <__gethex+0x402>
 800f68e:	2101      	movs	r1, #1
 800f690:	4620      	mov	r0, r4
 800f692:	f7ff fd9f 	bl	800f1d4 <rshift>
 800f696:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f69a:	3701      	adds	r7, #1
 800f69c:	42bb      	cmp	r3, r7
 800f69e:	f6ff aee0 	blt.w	800f462 <__gethex+0x1be>
 800f6a2:	2501      	movs	r5, #1
 800f6a4:	e7c2      	b.n	800f62c <__gethex+0x388>
 800f6a6:	f016 061f 	ands.w	r6, r6, #31
 800f6aa:	d0fa      	beq.n	800f6a2 <__gethex+0x3fe>
 800f6ac:	4453      	add	r3, sl
 800f6ae:	f1c6 0620 	rsb	r6, r6, #32
 800f6b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6b6:	f000 f9d3 	bl	800fa60 <__hi0bits>
 800f6ba:	42b0      	cmp	r0, r6
 800f6bc:	dbe7      	blt.n	800f68e <__gethex+0x3ea>
 800f6be:	e7f0      	b.n	800f6a2 <__gethex+0x3fe>
 800f6c0:	08010fd8 	.word	0x08010fd8

0800f6c4 <L_shift>:
 800f6c4:	f1c2 0208 	rsb	r2, r2, #8
 800f6c8:	0092      	lsls	r2, r2, #2
 800f6ca:	b570      	push	{r4, r5, r6, lr}
 800f6cc:	f1c2 0620 	rsb	r6, r2, #32
 800f6d0:	6843      	ldr	r3, [r0, #4]
 800f6d2:	6804      	ldr	r4, [r0, #0]
 800f6d4:	fa03 f506 	lsl.w	r5, r3, r6
 800f6d8:	432c      	orrs	r4, r5
 800f6da:	40d3      	lsrs	r3, r2
 800f6dc:	6004      	str	r4, [r0, #0]
 800f6de:	f840 3f04 	str.w	r3, [r0, #4]!
 800f6e2:	4288      	cmp	r0, r1
 800f6e4:	d3f4      	bcc.n	800f6d0 <L_shift+0xc>
 800f6e6:	bd70      	pop	{r4, r5, r6, pc}

0800f6e8 <__match>:
 800f6e8:	b530      	push	{r4, r5, lr}
 800f6ea:	6803      	ldr	r3, [r0, #0]
 800f6ec:	3301      	adds	r3, #1
 800f6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6f2:	b914      	cbnz	r4, 800f6fa <__match+0x12>
 800f6f4:	6003      	str	r3, [r0, #0]
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	bd30      	pop	{r4, r5, pc}
 800f6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f702:	2d19      	cmp	r5, #25
 800f704:	bf98      	it	ls
 800f706:	3220      	addls	r2, #32
 800f708:	42a2      	cmp	r2, r4
 800f70a:	d0f0      	beq.n	800f6ee <__match+0x6>
 800f70c:	2000      	movs	r0, #0
 800f70e:	e7f3      	b.n	800f6f8 <__match+0x10>

0800f710 <__hexnan>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	680b      	ldr	r3, [r1, #0]
 800f716:	6801      	ldr	r1, [r0, #0]
 800f718:	115e      	asrs	r6, r3, #5
 800f71a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f71e:	f013 031f 	ands.w	r3, r3, #31
 800f722:	b087      	sub	sp, #28
 800f724:	bf18      	it	ne
 800f726:	3604      	addne	r6, #4
 800f728:	2500      	movs	r5, #0
 800f72a:	1f37      	subs	r7, r6, #4
 800f72c:	4682      	mov	sl, r0
 800f72e:	4690      	mov	r8, r2
 800f730:	9301      	str	r3, [sp, #4]
 800f732:	f846 5c04 	str.w	r5, [r6, #-4]
 800f736:	46b9      	mov	r9, r7
 800f738:	463c      	mov	r4, r7
 800f73a:	9502      	str	r5, [sp, #8]
 800f73c:	46ab      	mov	fp, r5
 800f73e:	784a      	ldrb	r2, [r1, #1]
 800f740:	1c4b      	adds	r3, r1, #1
 800f742:	9303      	str	r3, [sp, #12]
 800f744:	b342      	cbz	r2, 800f798 <__hexnan+0x88>
 800f746:	4610      	mov	r0, r2
 800f748:	9105      	str	r1, [sp, #20]
 800f74a:	9204      	str	r2, [sp, #16]
 800f74c:	f7ff fd94 	bl	800f278 <__hexdig_fun>
 800f750:	2800      	cmp	r0, #0
 800f752:	d151      	bne.n	800f7f8 <__hexnan+0xe8>
 800f754:	9a04      	ldr	r2, [sp, #16]
 800f756:	9905      	ldr	r1, [sp, #20]
 800f758:	2a20      	cmp	r2, #32
 800f75a:	d818      	bhi.n	800f78e <__hexnan+0x7e>
 800f75c:	9b02      	ldr	r3, [sp, #8]
 800f75e:	459b      	cmp	fp, r3
 800f760:	dd13      	ble.n	800f78a <__hexnan+0x7a>
 800f762:	454c      	cmp	r4, r9
 800f764:	d206      	bcs.n	800f774 <__hexnan+0x64>
 800f766:	2d07      	cmp	r5, #7
 800f768:	dc04      	bgt.n	800f774 <__hexnan+0x64>
 800f76a:	462a      	mov	r2, r5
 800f76c:	4649      	mov	r1, r9
 800f76e:	4620      	mov	r0, r4
 800f770:	f7ff ffa8 	bl	800f6c4 <L_shift>
 800f774:	4544      	cmp	r4, r8
 800f776:	d952      	bls.n	800f81e <__hexnan+0x10e>
 800f778:	2300      	movs	r3, #0
 800f77a:	f1a4 0904 	sub.w	r9, r4, #4
 800f77e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f782:	f8cd b008 	str.w	fp, [sp, #8]
 800f786:	464c      	mov	r4, r9
 800f788:	461d      	mov	r5, r3
 800f78a:	9903      	ldr	r1, [sp, #12]
 800f78c:	e7d7      	b.n	800f73e <__hexnan+0x2e>
 800f78e:	2a29      	cmp	r2, #41	@ 0x29
 800f790:	d157      	bne.n	800f842 <__hexnan+0x132>
 800f792:	3102      	adds	r1, #2
 800f794:	f8ca 1000 	str.w	r1, [sl]
 800f798:	f1bb 0f00 	cmp.w	fp, #0
 800f79c:	d051      	beq.n	800f842 <__hexnan+0x132>
 800f79e:	454c      	cmp	r4, r9
 800f7a0:	d206      	bcs.n	800f7b0 <__hexnan+0xa0>
 800f7a2:	2d07      	cmp	r5, #7
 800f7a4:	dc04      	bgt.n	800f7b0 <__hexnan+0xa0>
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	4649      	mov	r1, r9
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f7ff ff8a 	bl	800f6c4 <L_shift>
 800f7b0:	4544      	cmp	r4, r8
 800f7b2:	d936      	bls.n	800f822 <__hexnan+0x112>
 800f7b4:	f1a8 0204 	sub.w	r2, r8, #4
 800f7b8:	4623      	mov	r3, r4
 800f7ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800f7be:	f842 1f04 	str.w	r1, [r2, #4]!
 800f7c2:	429f      	cmp	r7, r3
 800f7c4:	d2f9      	bcs.n	800f7ba <__hexnan+0xaa>
 800f7c6:	1b3b      	subs	r3, r7, r4
 800f7c8:	f023 0303 	bic.w	r3, r3, #3
 800f7cc:	3304      	adds	r3, #4
 800f7ce:	3401      	adds	r4, #1
 800f7d0:	3e03      	subs	r6, #3
 800f7d2:	42b4      	cmp	r4, r6
 800f7d4:	bf88      	it	hi
 800f7d6:	2304      	movhi	r3, #4
 800f7d8:	4443      	add	r3, r8
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f843 2b04 	str.w	r2, [r3], #4
 800f7e0:	429f      	cmp	r7, r3
 800f7e2:	d2fb      	bcs.n	800f7dc <__hexnan+0xcc>
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	b91b      	cbnz	r3, 800f7f0 <__hexnan+0xe0>
 800f7e8:	4547      	cmp	r7, r8
 800f7ea:	d128      	bne.n	800f83e <__hexnan+0x12e>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	603b      	str	r3, [r7, #0]
 800f7f0:	2005      	movs	r0, #5
 800f7f2:	b007      	add	sp, #28
 800f7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f8:	3501      	adds	r5, #1
 800f7fa:	2d08      	cmp	r5, #8
 800f7fc:	f10b 0b01 	add.w	fp, fp, #1
 800f800:	dd06      	ble.n	800f810 <__hexnan+0x100>
 800f802:	4544      	cmp	r4, r8
 800f804:	d9c1      	bls.n	800f78a <__hexnan+0x7a>
 800f806:	2300      	movs	r3, #0
 800f808:	f844 3c04 	str.w	r3, [r4, #-4]
 800f80c:	2501      	movs	r5, #1
 800f80e:	3c04      	subs	r4, #4
 800f810:	6822      	ldr	r2, [r4, #0]
 800f812:	f000 000f 	and.w	r0, r0, #15
 800f816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f81a:	6020      	str	r0, [r4, #0]
 800f81c:	e7b5      	b.n	800f78a <__hexnan+0x7a>
 800f81e:	2508      	movs	r5, #8
 800f820:	e7b3      	b.n	800f78a <__hexnan+0x7a>
 800f822:	9b01      	ldr	r3, [sp, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0dd      	beq.n	800f7e4 <__hexnan+0xd4>
 800f828:	f1c3 0320 	rsb	r3, r3, #32
 800f82c:	f04f 32ff 	mov.w	r2, #4294967295
 800f830:	40da      	lsrs	r2, r3
 800f832:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f836:	4013      	ands	r3, r2
 800f838:	f846 3c04 	str.w	r3, [r6, #-4]
 800f83c:	e7d2      	b.n	800f7e4 <__hexnan+0xd4>
 800f83e:	3f04      	subs	r7, #4
 800f840:	e7d0      	b.n	800f7e4 <__hexnan+0xd4>
 800f842:	2004      	movs	r0, #4
 800f844:	e7d5      	b.n	800f7f2 <__hexnan+0xe2>
	...

0800f848 <malloc>:
 800f848:	4b02      	ldr	r3, [pc, #8]	@ (800f854 <malloc+0xc>)
 800f84a:	4601      	mov	r1, r0
 800f84c:	6818      	ldr	r0, [r3, #0]
 800f84e:	f7fd b931 	b.w	800cab4 <_malloc_r>
 800f852:	bf00      	nop
 800f854:	20000300 	.word	0x20000300

0800f858 <__ascii_mbtowc>:
 800f858:	b082      	sub	sp, #8
 800f85a:	b901      	cbnz	r1, 800f85e <__ascii_mbtowc+0x6>
 800f85c:	a901      	add	r1, sp, #4
 800f85e:	b142      	cbz	r2, 800f872 <__ascii_mbtowc+0x1a>
 800f860:	b14b      	cbz	r3, 800f876 <__ascii_mbtowc+0x1e>
 800f862:	7813      	ldrb	r3, [r2, #0]
 800f864:	600b      	str	r3, [r1, #0]
 800f866:	7812      	ldrb	r2, [r2, #0]
 800f868:	1e10      	subs	r0, r2, #0
 800f86a:	bf18      	it	ne
 800f86c:	2001      	movne	r0, #1
 800f86e:	b002      	add	sp, #8
 800f870:	4770      	bx	lr
 800f872:	4610      	mov	r0, r2
 800f874:	e7fb      	b.n	800f86e <__ascii_mbtowc+0x16>
 800f876:	f06f 0001 	mvn.w	r0, #1
 800f87a:	e7f8      	b.n	800f86e <__ascii_mbtowc+0x16>

0800f87c <_Balloc>:
 800f87c:	b570      	push	{r4, r5, r6, lr}
 800f87e:	69c6      	ldr	r6, [r0, #28]
 800f880:	4604      	mov	r4, r0
 800f882:	460d      	mov	r5, r1
 800f884:	b976      	cbnz	r6, 800f8a4 <_Balloc+0x28>
 800f886:	2010      	movs	r0, #16
 800f888:	f7ff ffde 	bl	800f848 <malloc>
 800f88c:	4602      	mov	r2, r0
 800f88e:	61e0      	str	r0, [r4, #28]
 800f890:	b920      	cbnz	r0, 800f89c <_Balloc+0x20>
 800f892:	4b18      	ldr	r3, [pc, #96]	@ (800f8f4 <_Balloc+0x78>)
 800f894:	4818      	ldr	r0, [pc, #96]	@ (800f8f8 <_Balloc+0x7c>)
 800f896:	216b      	movs	r1, #107	@ 0x6b
 800f898:	f000 fecc 	bl	8010634 <__assert_func>
 800f89c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a0:	6006      	str	r6, [r0, #0]
 800f8a2:	60c6      	str	r6, [r0, #12]
 800f8a4:	69e6      	ldr	r6, [r4, #28]
 800f8a6:	68f3      	ldr	r3, [r6, #12]
 800f8a8:	b183      	cbz	r3, 800f8cc <_Balloc+0x50>
 800f8aa:	69e3      	ldr	r3, [r4, #28]
 800f8ac:	68db      	ldr	r3, [r3, #12]
 800f8ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8b2:	b9b8      	cbnz	r0, 800f8e4 <_Balloc+0x68>
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	fa01 f605 	lsl.w	r6, r1, r5
 800f8ba:	1d72      	adds	r2, r6, #5
 800f8bc:	0092      	lsls	r2, r2, #2
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f7fd f8c2 	bl	800ca48 <_calloc_r>
 800f8c4:	b160      	cbz	r0, 800f8e0 <_Balloc+0x64>
 800f8c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8ca:	e00e      	b.n	800f8ea <_Balloc+0x6e>
 800f8cc:	2221      	movs	r2, #33	@ 0x21
 800f8ce:	2104      	movs	r1, #4
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f7fd f8b9 	bl	800ca48 <_calloc_r>
 800f8d6:	69e3      	ldr	r3, [r4, #28]
 800f8d8:	60f0      	str	r0, [r6, #12]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1e4      	bne.n	800f8aa <_Balloc+0x2e>
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}
 800f8e4:	6802      	ldr	r2, [r0, #0]
 800f8e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8f0:	e7f7      	b.n	800f8e2 <_Balloc+0x66>
 800f8f2:	bf00      	nop
 800f8f4:	08010f69 	.word	0x08010f69
 800f8f8:	08011049 	.word	0x08011049

0800f8fc <_Bfree>:
 800f8fc:	b570      	push	{r4, r5, r6, lr}
 800f8fe:	69c6      	ldr	r6, [r0, #28]
 800f900:	4605      	mov	r5, r0
 800f902:	460c      	mov	r4, r1
 800f904:	b976      	cbnz	r6, 800f924 <_Bfree+0x28>
 800f906:	2010      	movs	r0, #16
 800f908:	f7ff ff9e 	bl	800f848 <malloc>
 800f90c:	4602      	mov	r2, r0
 800f90e:	61e8      	str	r0, [r5, #28]
 800f910:	b920      	cbnz	r0, 800f91c <_Bfree+0x20>
 800f912:	4b09      	ldr	r3, [pc, #36]	@ (800f938 <_Bfree+0x3c>)
 800f914:	4809      	ldr	r0, [pc, #36]	@ (800f93c <_Bfree+0x40>)
 800f916:	218f      	movs	r1, #143	@ 0x8f
 800f918:	f000 fe8c 	bl	8010634 <__assert_func>
 800f91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f920:	6006      	str	r6, [r0, #0]
 800f922:	60c6      	str	r6, [r0, #12]
 800f924:	b13c      	cbz	r4, 800f936 <_Bfree+0x3a>
 800f926:	69eb      	ldr	r3, [r5, #28]
 800f928:	6862      	ldr	r2, [r4, #4]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f930:	6021      	str	r1, [r4, #0]
 800f932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f936:	bd70      	pop	{r4, r5, r6, pc}
 800f938:	08010f69 	.word	0x08010f69
 800f93c:	08011049 	.word	0x08011049

0800f940 <__multadd>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	690d      	ldr	r5, [r1, #16]
 800f946:	4607      	mov	r7, r0
 800f948:	460c      	mov	r4, r1
 800f94a:	461e      	mov	r6, r3
 800f94c:	f101 0c14 	add.w	ip, r1, #20
 800f950:	2000      	movs	r0, #0
 800f952:	f8dc 3000 	ldr.w	r3, [ip]
 800f956:	b299      	uxth	r1, r3
 800f958:	fb02 6101 	mla	r1, r2, r1, r6
 800f95c:	0c1e      	lsrs	r6, r3, #16
 800f95e:	0c0b      	lsrs	r3, r1, #16
 800f960:	fb02 3306 	mla	r3, r2, r6, r3
 800f964:	b289      	uxth	r1, r1
 800f966:	3001      	adds	r0, #1
 800f968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f96c:	4285      	cmp	r5, r0
 800f96e:	f84c 1b04 	str.w	r1, [ip], #4
 800f972:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f976:	dcec      	bgt.n	800f952 <__multadd+0x12>
 800f978:	b30e      	cbz	r6, 800f9be <__multadd+0x7e>
 800f97a:	68a3      	ldr	r3, [r4, #8]
 800f97c:	42ab      	cmp	r3, r5
 800f97e:	dc19      	bgt.n	800f9b4 <__multadd+0x74>
 800f980:	6861      	ldr	r1, [r4, #4]
 800f982:	4638      	mov	r0, r7
 800f984:	3101      	adds	r1, #1
 800f986:	f7ff ff79 	bl	800f87c <_Balloc>
 800f98a:	4680      	mov	r8, r0
 800f98c:	b928      	cbnz	r0, 800f99a <__multadd+0x5a>
 800f98e:	4602      	mov	r2, r0
 800f990:	4b0c      	ldr	r3, [pc, #48]	@ (800f9c4 <__multadd+0x84>)
 800f992:	480d      	ldr	r0, [pc, #52]	@ (800f9c8 <__multadd+0x88>)
 800f994:	21ba      	movs	r1, #186	@ 0xba
 800f996:	f000 fe4d 	bl	8010634 <__assert_func>
 800f99a:	6922      	ldr	r2, [r4, #16]
 800f99c:	3202      	adds	r2, #2
 800f99e:	f104 010c 	add.w	r1, r4, #12
 800f9a2:	0092      	lsls	r2, r2, #2
 800f9a4:	300c      	adds	r0, #12
 800f9a6:	f7fe fd68 	bl	800e47a <memcpy>
 800f9aa:	4621      	mov	r1, r4
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	f7ff ffa5 	bl	800f8fc <_Bfree>
 800f9b2:	4644      	mov	r4, r8
 800f9b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9b8:	3501      	adds	r5, #1
 800f9ba:	615e      	str	r6, [r3, #20]
 800f9bc:	6125      	str	r5, [r4, #16]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c4:	08010fd8 	.word	0x08010fd8
 800f9c8:	08011049 	.word	0x08011049

0800f9cc <__s2b>:
 800f9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	460c      	mov	r4, r1
 800f9d2:	4615      	mov	r5, r2
 800f9d4:	461f      	mov	r7, r3
 800f9d6:	2209      	movs	r2, #9
 800f9d8:	3308      	adds	r3, #8
 800f9da:	4606      	mov	r6, r0
 800f9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	db09      	blt.n	800f9fc <__s2b+0x30>
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ff47 	bl	800f87c <_Balloc>
 800f9ee:	b940      	cbnz	r0, 800fa02 <__s2b+0x36>
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	4b19      	ldr	r3, [pc, #100]	@ (800fa58 <__s2b+0x8c>)
 800f9f4:	4819      	ldr	r0, [pc, #100]	@ (800fa5c <__s2b+0x90>)
 800f9f6:	21d3      	movs	r1, #211	@ 0xd3
 800f9f8:	f000 fe1c 	bl	8010634 <__assert_func>
 800f9fc:	0052      	lsls	r2, r2, #1
 800f9fe:	3101      	adds	r1, #1
 800fa00:	e7f0      	b.n	800f9e4 <__s2b+0x18>
 800fa02:	9b08      	ldr	r3, [sp, #32]
 800fa04:	6143      	str	r3, [r0, #20]
 800fa06:	2d09      	cmp	r5, #9
 800fa08:	f04f 0301 	mov.w	r3, #1
 800fa0c:	6103      	str	r3, [r0, #16]
 800fa0e:	dd16      	ble.n	800fa3e <__s2b+0x72>
 800fa10:	f104 0909 	add.w	r9, r4, #9
 800fa14:	46c8      	mov	r8, r9
 800fa16:	442c      	add	r4, r5
 800fa18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa1c:	4601      	mov	r1, r0
 800fa1e:	3b30      	subs	r3, #48	@ 0x30
 800fa20:	220a      	movs	r2, #10
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff ff8c 	bl	800f940 <__multadd>
 800fa28:	45a0      	cmp	r8, r4
 800fa2a:	d1f5      	bne.n	800fa18 <__s2b+0x4c>
 800fa2c:	f1a5 0408 	sub.w	r4, r5, #8
 800fa30:	444c      	add	r4, r9
 800fa32:	1b2d      	subs	r5, r5, r4
 800fa34:	1963      	adds	r3, r4, r5
 800fa36:	42bb      	cmp	r3, r7
 800fa38:	db04      	blt.n	800fa44 <__s2b+0x78>
 800fa3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa3e:	340a      	adds	r4, #10
 800fa40:	2509      	movs	r5, #9
 800fa42:	e7f6      	b.n	800fa32 <__s2b+0x66>
 800fa44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa48:	4601      	mov	r1, r0
 800fa4a:	3b30      	subs	r3, #48	@ 0x30
 800fa4c:	220a      	movs	r2, #10
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff ff76 	bl	800f940 <__multadd>
 800fa54:	e7ee      	b.n	800fa34 <__s2b+0x68>
 800fa56:	bf00      	nop
 800fa58:	08010fd8 	.word	0x08010fd8
 800fa5c:	08011049 	.word	0x08011049

0800fa60 <__hi0bits>:
 800fa60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa64:	4603      	mov	r3, r0
 800fa66:	bf36      	itet	cc
 800fa68:	0403      	lslcc	r3, r0, #16
 800fa6a:	2000      	movcs	r0, #0
 800fa6c:	2010      	movcc	r0, #16
 800fa6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa72:	bf3c      	itt	cc
 800fa74:	021b      	lslcc	r3, r3, #8
 800fa76:	3008      	addcc	r0, #8
 800fa78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa7c:	bf3c      	itt	cc
 800fa7e:	011b      	lslcc	r3, r3, #4
 800fa80:	3004      	addcc	r0, #4
 800fa82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa86:	bf3c      	itt	cc
 800fa88:	009b      	lslcc	r3, r3, #2
 800fa8a:	3002      	addcc	r0, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	db05      	blt.n	800fa9c <__hi0bits+0x3c>
 800fa90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa94:	f100 0001 	add.w	r0, r0, #1
 800fa98:	bf08      	it	eq
 800fa9a:	2020      	moveq	r0, #32
 800fa9c:	4770      	bx	lr

0800fa9e <__lo0bits>:
 800fa9e:	6803      	ldr	r3, [r0, #0]
 800faa0:	4602      	mov	r2, r0
 800faa2:	f013 0007 	ands.w	r0, r3, #7
 800faa6:	d00b      	beq.n	800fac0 <__lo0bits+0x22>
 800faa8:	07d9      	lsls	r1, r3, #31
 800faaa:	d421      	bmi.n	800faf0 <__lo0bits+0x52>
 800faac:	0798      	lsls	r0, r3, #30
 800faae:	bf49      	itett	mi
 800fab0:	085b      	lsrmi	r3, r3, #1
 800fab2:	089b      	lsrpl	r3, r3, #2
 800fab4:	2001      	movmi	r0, #1
 800fab6:	6013      	strmi	r3, [r2, #0]
 800fab8:	bf5c      	itt	pl
 800faba:	6013      	strpl	r3, [r2, #0]
 800fabc:	2002      	movpl	r0, #2
 800fabe:	4770      	bx	lr
 800fac0:	b299      	uxth	r1, r3
 800fac2:	b909      	cbnz	r1, 800fac8 <__lo0bits+0x2a>
 800fac4:	0c1b      	lsrs	r3, r3, #16
 800fac6:	2010      	movs	r0, #16
 800fac8:	b2d9      	uxtb	r1, r3
 800faca:	b909      	cbnz	r1, 800fad0 <__lo0bits+0x32>
 800facc:	3008      	adds	r0, #8
 800face:	0a1b      	lsrs	r3, r3, #8
 800fad0:	0719      	lsls	r1, r3, #28
 800fad2:	bf04      	itt	eq
 800fad4:	091b      	lsreq	r3, r3, #4
 800fad6:	3004      	addeq	r0, #4
 800fad8:	0799      	lsls	r1, r3, #30
 800fada:	bf04      	itt	eq
 800fadc:	089b      	lsreq	r3, r3, #2
 800fade:	3002      	addeq	r0, #2
 800fae0:	07d9      	lsls	r1, r3, #31
 800fae2:	d403      	bmi.n	800faec <__lo0bits+0x4e>
 800fae4:	085b      	lsrs	r3, r3, #1
 800fae6:	f100 0001 	add.w	r0, r0, #1
 800faea:	d003      	beq.n	800faf4 <__lo0bits+0x56>
 800faec:	6013      	str	r3, [r2, #0]
 800faee:	4770      	bx	lr
 800faf0:	2000      	movs	r0, #0
 800faf2:	4770      	bx	lr
 800faf4:	2020      	movs	r0, #32
 800faf6:	4770      	bx	lr

0800faf8 <__i2b>:
 800faf8:	b510      	push	{r4, lr}
 800fafa:	460c      	mov	r4, r1
 800fafc:	2101      	movs	r1, #1
 800fafe:	f7ff febd 	bl	800f87c <_Balloc>
 800fb02:	4602      	mov	r2, r0
 800fb04:	b928      	cbnz	r0, 800fb12 <__i2b+0x1a>
 800fb06:	4b05      	ldr	r3, [pc, #20]	@ (800fb1c <__i2b+0x24>)
 800fb08:	4805      	ldr	r0, [pc, #20]	@ (800fb20 <__i2b+0x28>)
 800fb0a:	f240 1145 	movw	r1, #325	@ 0x145
 800fb0e:	f000 fd91 	bl	8010634 <__assert_func>
 800fb12:	2301      	movs	r3, #1
 800fb14:	6144      	str	r4, [r0, #20]
 800fb16:	6103      	str	r3, [r0, #16]
 800fb18:	bd10      	pop	{r4, pc}
 800fb1a:	bf00      	nop
 800fb1c:	08010fd8 	.word	0x08010fd8
 800fb20:	08011049 	.word	0x08011049

0800fb24 <__multiply>:
 800fb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb28:	4614      	mov	r4, r2
 800fb2a:	690a      	ldr	r2, [r1, #16]
 800fb2c:	6923      	ldr	r3, [r4, #16]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	bfa8      	it	ge
 800fb32:	4623      	movge	r3, r4
 800fb34:	460f      	mov	r7, r1
 800fb36:	bfa4      	itt	ge
 800fb38:	460c      	movge	r4, r1
 800fb3a:	461f      	movge	r7, r3
 800fb3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fb40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fb44:	68a3      	ldr	r3, [r4, #8]
 800fb46:	6861      	ldr	r1, [r4, #4]
 800fb48:	eb0a 0609 	add.w	r6, sl, r9
 800fb4c:	42b3      	cmp	r3, r6
 800fb4e:	b085      	sub	sp, #20
 800fb50:	bfb8      	it	lt
 800fb52:	3101      	addlt	r1, #1
 800fb54:	f7ff fe92 	bl	800f87c <_Balloc>
 800fb58:	b930      	cbnz	r0, 800fb68 <__multiply+0x44>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	4b44      	ldr	r3, [pc, #272]	@ (800fc70 <__multiply+0x14c>)
 800fb5e:	4845      	ldr	r0, [pc, #276]	@ (800fc74 <__multiply+0x150>)
 800fb60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb64:	f000 fd66 	bl	8010634 <__assert_func>
 800fb68:	f100 0514 	add.w	r5, r0, #20
 800fb6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb70:	462b      	mov	r3, r5
 800fb72:	2200      	movs	r2, #0
 800fb74:	4543      	cmp	r3, r8
 800fb76:	d321      	bcc.n	800fbbc <__multiply+0x98>
 800fb78:	f107 0114 	add.w	r1, r7, #20
 800fb7c:	f104 0214 	add.w	r2, r4, #20
 800fb80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb88:	9302      	str	r3, [sp, #8]
 800fb8a:	1b13      	subs	r3, r2, r4
 800fb8c:	3b15      	subs	r3, #21
 800fb8e:	f023 0303 	bic.w	r3, r3, #3
 800fb92:	3304      	adds	r3, #4
 800fb94:	f104 0715 	add.w	r7, r4, #21
 800fb98:	42ba      	cmp	r2, r7
 800fb9a:	bf38      	it	cc
 800fb9c:	2304      	movcc	r3, #4
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	9b02      	ldr	r3, [sp, #8]
 800fba2:	9103      	str	r1, [sp, #12]
 800fba4:	428b      	cmp	r3, r1
 800fba6:	d80c      	bhi.n	800fbc2 <__multiply+0x9e>
 800fba8:	2e00      	cmp	r6, #0
 800fbaa:	dd03      	ble.n	800fbb4 <__multiply+0x90>
 800fbac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d05b      	beq.n	800fc6c <__multiply+0x148>
 800fbb4:	6106      	str	r6, [r0, #16]
 800fbb6:	b005      	add	sp, #20
 800fbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbc:	f843 2b04 	str.w	r2, [r3], #4
 800fbc0:	e7d8      	b.n	800fb74 <__multiply+0x50>
 800fbc2:	f8b1 a000 	ldrh.w	sl, [r1]
 800fbc6:	f1ba 0f00 	cmp.w	sl, #0
 800fbca:	d024      	beq.n	800fc16 <__multiply+0xf2>
 800fbcc:	f104 0e14 	add.w	lr, r4, #20
 800fbd0:	46a9      	mov	r9, r5
 800fbd2:	f04f 0c00 	mov.w	ip, #0
 800fbd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbda:	f8d9 3000 	ldr.w	r3, [r9]
 800fbde:	fa1f fb87 	uxth.w	fp, r7
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	fb0a 330b 	mla	r3, sl, fp, r3
 800fbe8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fbec:	f8d9 7000 	ldr.w	r7, [r9]
 800fbf0:	4463      	add	r3, ip
 800fbf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fbf6:	fb0a c70b 	mla	r7, sl, fp, ip
 800fbfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc04:	4572      	cmp	r2, lr
 800fc06:	f849 3b04 	str.w	r3, [r9], #4
 800fc0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc0e:	d8e2      	bhi.n	800fbd6 <__multiply+0xb2>
 800fc10:	9b01      	ldr	r3, [sp, #4]
 800fc12:	f845 c003 	str.w	ip, [r5, r3]
 800fc16:	9b03      	ldr	r3, [sp, #12]
 800fc18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc1c:	3104      	adds	r1, #4
 800fc1e:	f1b9 0f00 	cmp.w	r9, #0
 800fc22:	d021      	beq.n	800fc68 <__multiply+0x144>
 800fc24:	682b      	ldr	r3, [r5, #0]
 800fc26:	f104 0c14 	add.w	ip, r4, #20
 800fc2a:	46ae      	mov	lr, r5
 800fc2c:	f04f 0a00 	mov.w	sl, #0
 800fc30:	f8bc b000 	ldrh.w	fp, [ip]
 800fc34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fc38:	fb09 770b 	mla	r7, r9, fp, r7
 800fc3c:	4457      	add	r7, sl
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc44:	f84e 3b04 	str.w	r3, [lr], #4
 800fc48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc50:	f8be 3000 	ldrh.w	r3, [lr]
 800fc54:	fb09 330a 	mla	r3, r9, sl, r3
 800fc58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fc5c:	4562      	cmp	r2, ip
 800fc5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc62:	d8e5      	bhi.n	800fc30 <__multiply+0x10c>
 800fc64:	9f01      	ldr	r7, [sp, #4]
 800fc66:	51eb      	str	r3, [r5, r7]
 800fc68:	3504      	adds	r5, #4
 800fc6a:	e799      	b.n	800fba0 <__multiply+0x7c>
 800fc6c:	3e01      	subs	r6, #1
 800fc6e:	e79b      	b.n	800fba8 <__multiply+0x84>
 800fc70:	08010fd8 	.word	0x08010fd8
 800fc74:	08011049 	.word	0x08011049

0800fc78 <__pow5mult>:
 800fc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc7c:	4615      	mov	r5, r2
 800fc7e:	f012 0203 	ands.w	r2, r2, #3
 800fc82:	4607      	mov	r7, r0
 800fc84:	460e      	mov	r6, r1
 800fc86:	d007      	beq.n	800fc98 <__pow5mult+0x20>
 800fc88:	4c25      	ldr	r4, [pc, #148]	@ (800fd20 <__pow5mult+0xa8>)
 800fc8a:	3a01      	subs	r2, #1
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc92:	f7ff fe55 	bl	800f940 <__multadd>
 800fc96:	4606      	mov	r6, r0
 800fc98:	10ad      	asrs	r5, r5, #2
 800fc9a:	d03d      	beq.n	800fd18 <__pow5mult+0xa0>
 800fc9c:	69fc      	ldr	r4, [r7, #28]
 800fc9e:	b97c      	cbnz	r4, 800fcc0 <__pow5mult+0x48>
 800fca0:	2010      	movs	r0, #16
 800fca2:	f7ff fdd1 	bl	800f848 <malloc>
 800fca6:	4602      	mov	r2, r0
 800fca8:	61f8      	str	r0, [r7, #28]
 800fcaa:	b928      	cbnz	r0, 800fcb8 <__pow5mult+0x40>
 800fcac:	4b1d      	ldr	r3, [pc, #116]	@ (800fd24 <__pow5mult+0xac>)
 800fcae:	481e      	ldr	r0, [pc, #120]	@ (800fd28 <__pow5mult+0xb0>)
 800fcb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fcb4:	f000 fcbe 	bl	8010634 <__assert_func>
 800fcb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcbc:	6004      	str	r4, [r0, #0]
 800fcbe:	60c4      	str	r4, [r0, #12]
 800fcc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fcc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fcc8:	b94c      	cbnz	r4, 800fcde <__pow5mult+0x66>
 800fcca:	f240 2171 	movw	r1, #625	@ 0x271
 800fcce:	4638      	mov	r0, r7
 800fcd0:	f7ff ff12 	bl	800faf8 <__i2b>
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcda:	4604      	mov	r4, r0
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	f04f 0900 	mov.w	r9, #0
 800fce2:	07eb      	lsls	r3, r5, #31
 800fce4:	d50a      	bpl.n	800fcfc <__pow5mult+0x84>
 800fce6:	4631      	mov	r1, r6
 800fce8:	4622      	mov	r2, r4
 800fcea:	4638      	mov	r0, r7
 800fcec:	f7ff ff1a 	bl	800fb24 <__multiply>
 800fcf0:	4631      	mov	r1, r6
 800fcf2:	4680      	mov	r8, r0
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	f7ff fe01 	bl	800f8fc <_Bfree>
 800fcfa:	4646      	mov	r6, r8
 800fcfc:	106d      	asrs	r5, r5, #1
 800fcfe:	d00b      	beq.n	800fd18 <__pow5mult+0xa0>
 800fd00:	6820      	ldr	r0, [r4, #0]
 800fd02:	b938      	cbnz	r0, 800fd14 <__pow5mult+0x9c>
 800fd04:	4622      	mov	r2, r4
 800fd06:	4621      	mov	r1, r4
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f7ff ff0b 	bl	800fb24 <__multiply>
 800fd0e:	6020      	str	r0, [r4, #0]
 800fd10:	f8c0 9000 	str.w	r9, [r0]
 800fd14:	4604      	mov	r4, r0
 800fd16:	e7e4      	b.n	800fce2 <__pow5mult+0x6a>
 800fd18:	4630      	mov	r0, r6
 800fd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1e:	bf00      	nop
 800fd20:	080110a4 	.word	0x080110a4
 800fd24:	08010f69 	.word	0x08010f69
 800fd28:	08011049 	.word	0x08011049

0800fd2c <__lshift>:
 800fd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd30:	460c      	mov	r4, r1
 800fd32:	6849      	ldr	r1, [r1, #4]
 800fd34:	6923      	ldr	r3, [r4, #16]
 800fd36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd3a:	68a3      	ldr	r3, [r4, #8]
 800fd3c:	4607      	mov	r7, r0
 800fd3e:	4691      	mov	r9, r2
 800fd40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd44:	f108 0601 	add.w	r6, r8, #1
 800fd48:	42b3      	cmp	r3, r6
 800fd4a:	db0b      	blt.n	800fd64 <__lshift+0x38>
 800fd4c:	4638      	mov	r0, r7
 800fd4e:	f7ff fd95 	bl	800f87c <_Balloc>
 800fd52:	4605      	mov	r5, r0
 800fd54:	b948      	cbnz	r0, 800fd6a <__lshift+0x3e>
 800fd56:	4602      	mov	r2, r0
 800fd58:	4b28      	ldr	r3, [pc, #160]	@ (800fdfc <__lshift+0xd0>)
 800fd5a:	4829      	ldr	r0, [pc, #164]	@ (800fe00 <__lshift+0xd4>)
 800fd5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd60:	f000 fc68 	bl	8010634 <__assert_func>
 800fd64:	3101      	adds	r1, #1
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	e7ee      	b.n	800fd48 <__lshift+0x1c>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f100 0114 	add.w	r1, r0, #20
 800fd70:	f100 0210 	add.w	r2, r0, #16
 800fd74:	4618      	mov	r0, r3
 800fd76:	4553      	cmp	r3, sl
 800fd78:	db33      	blt.n	800fde2 <__lshift+0xb6>
 800fd7a:	6920      	ldr	r0, [r4, #16]
 800fd7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd80:	f104 0314 	add.w	r3, r4, #20
 800fd84:	f019 091f 	ands.w	r9, r9, #31
 800fd88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd90:	d02b      	beq.n	800fdea <__lshift+0xbe>
 800fd92:	f1c9 0e20 	rsb	lr, r9, #32
 800fd96:	468a      	mov	sl, r1
 800fd98:	2200      	movs	r2, #0
 800fd9a:	6818      	ldr	r0, [r3, #0]
 800fd9c:	fa00 f009 	lsl.w	r0, r0, r9
 800fda0:	4310      	orrs	r0, r2
 800fda2:	f84a 0b04 	str.w	r0, [sl], #4
 800fda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdaa:	459c      	cmp	ip, r3
 800fdac:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdb0:	d8f3      	bhi.n	800fd9a <__lshift+0x6e>
 800fdb2:	ebac 0304 	sub.w	r3, ip, r4
 800fdb6:	3b15      	subs	r3, #21
 800fdb8:	f023 0303 	bic.w	r3, r3, #3
 800fdbc:	3304      	adds	r3, #4
 800fdbe:	f104 0015 	add.w	r0, r4, #21
 800fdc2:	4584      	cmp	ip, r0
 800fdc4:	bf38      	it	cc
 800fdc6:	2304      	movcc	r3, #4
 800fdc8:	50ca      	str	r2, [r1, r3]
 800fdca:	b10a      	cbz	r2, 800fdd0 <__lshift+0xa4>
 800fdcc:	f108 0602 	add.w	r6, r8, #2
 800fdd0:	3e01      	subs	r6, #1
 800fdd2:	4638      	mov	r0, r7
 800fdd4:	612e      	str	r6, [r5, #16]
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	f7ff fd90 	bl	800f8fc <_Bfree>
 800fddc:	4628      	mov	r0, r5
 800fdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde2:	f842 0f04 	str.w	r0, [r2, #4]!
 800fde6:	3301      	adds	r3, #1
 800fde8:	e7c5      	b.n	800fd76 <__lshift+0x4a>
 800fdea:	3904      	subs	r1, #4
 800fdec:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdf4:	459c      	cmp	ip, r3
 800fdf6:	d8f9      	bhi.n	800fdec <__lshift+0xc0>
 800fdf8:	e7ea      	b.n	800fdd0 <__lshift+0xa4>
 800fdfa:	bf00      	nop
 800fdfc:	08010fd8 	.word	0x08010fd8
 800fe00:	08011049 	.word	0x08011049

0800fe04 <__mcmp>:
 800fe04:	690a      	ldr	r2, [r1, #16]
 800fe06:	4603      	mov	r3, r0
 800fe08:	6900      	ldr	r0, [r0, #16]
 800fe0a:	1a80      	subs	r0, r0, r2
 800fe0c:	b530      	push	{r4, r5, lr}
 800fe0e:	d10e      	bne.n	800fe2e <__mcmp+0x2a>
 800fe10:	3314      	adds	r3, #20
 800fe12:	3114      	adds	r1, #20
 800fe14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe24:	4295      	cmp	r5, r2
 800fe26:	d003      	beq.n	800fe30 <__mcmp+0x2c>
 800fe28:	d205      	bcs.n	800fe36 <__mcmp+0x32>
 800fe2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe2e:	bd30      	pop	{r4, r5, pc}
 800fe30:	42a3      	cmp	r3, r4
 800fe32:	d3f3      	bcc.n	800fe1c <__mcmp+0x18>
 800fe34:	e7fb      	b.n	800fe2e <__mcmp+0x2a>
 800fe36:	2001      	movs	r0, #1
 800fe38:	e7f9      	b.n	800fe2e <__mcmp+0x2a>
	...

0800fe3c <__mdiff>:
 800fe3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe40:	4689      	mov	r9, r1
 800fe42:	4606      	mov	r6, r0
 800fe44:	4611      	mov	r1, r2
 800fe46:	4648      	mov	r0, r9
 800fe48:	4614      	mov	r4, r2
 800fe4a:	f7ff ffdb 	bl	800fe04 <__mcmp>
 800fe4e:	1e05      	subs	r5, r0, #0
 800fe50:	d112      	bne.n	800fe78 <__mdiff+0x3c>
 800fe52:	4629      	mov	r1, r5
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7ff fd11 	bl	800f87c <_Balloc>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	b928      	cbnz	r0, 800fe6a <__mdiff+0x2e>
 800fe5e:	4b3f      	ldr	r3, [pc, #252]	@ (800ff5c <__mdiff+0x120>)
 800fe60:	f240 2137 	movw	r1, #567	@ 0x237
 800fe64:	483e      	ldr	r0, [pc, #248]	@ (800ff60 <__mdiff+0x124>)
 800fe66:	f000 fbe5 	bl	8010634 <__assert_func>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe70:	4610      	mov	r0, r2
 800fe72:	b003      	add	sp, #12
 800fe74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe78:	bfbc      	itt	lt
 800fe7a:	464b      	movlt	r3, r9
 800fe7c:	46a1      	movlt	r9, r4
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe84:	bfba      	itte	lt
 800fe86:	461c      	movlt	r4, r3
 800fe88:	2501      	movlt	r5, #1
 800fe8a:	2500      	movge	r5, #0
 800fe8c:	f7ff fcf6 	bl	800f87c <_Balloc>
 800fe90:	4602      	mov	r2, r0
 800fe92:	b918      	cbnz	r0, 800fe9c <__mdiff+0x60>
 800fe94:	4b31      	ldr	r3, [pc, #196]	@ (800ff5c <__mdiff+0x120>)
 800fe96:	f240 2145 	movw	r1, #581	@ 0x245
 800fe9a:	e7e3      	b.n	800fe64 <__mdiff+0x28>
 800fe9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fea0:	6926      	ldr	r6, [r4, #16]
 800fea2:	60c5      	str	r5, [r0, #12]
 800fea4:	f109 0310 	add.w	r3, r9, #16
 800fea8:	f109 0514 	add.w	r5, r9, #20
 800feac:	f104 0e14 	add.w	lr, r4, #20
 800feb0:	f100 0b14 	add.w	fp, r0, #20
 800feb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800feb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	46d9      	mov	r9, fp
 800fec0:	f04f 0c00 	mov.w	ip, #0
 800fec4:	9b01      	ldr	r3, [sp, #4]
 800fec6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800feca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fece:	9301      	str	r3, [sp, #4]
 800fed0:	fa1f f38a 	uxth.w	r3, sl
 800fed4:	4619      	mov	r1, r3
 800fed6:	b283      	uxth	r3, r0
 800fed8:	1acb      	subs	r3, r1, r3
 800feda:	0c00      	lsrs	r0, r0, #16
 800fedc:	4463      	add	r3, ip
 800fede:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fee2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800feec:	4576      	cmp	r6, lr
 800feee:	f849 3b04 	str.w	r3, [r9], #4
 800fef2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fef6:	d8e5      	bhi.n	800fec4 <__mdiff+0x88>
 800fef8:	1b33      	subs	r3, r6, r4
 800fefa:	3b15      	subs	r3, #21
 800fefc:	f023 0303 	bic.w	r3, r3, #3
 800ff00:	3415      	adds	r4, #21
 800ff02:	3304      	adds	r3, #4
 800ff04:	42a6      	cmp	r6, r4
 800ff06:	bf38      	it	cc
 800ff08:	2304      	movcc	r3, #4
 800ff0a:	441d      	add	r5, r3
 800ff0c:	445b      	add	r3, fp
 800ff0e:	461e      	mov	r6, r3
 800ff10:	462c      	mov	r4, r5
 800ff12:	4544      	cmp	r4, r8
 800ff14:	d30e      	bcc.n	800ff34 <__mdiff+0xf8>
 800ff16:	f108 0103 	add.w	r1, r8, #3
 800ff1a:	1b49      	subs	r1, r1, r5
 800ff1c:	f021 0103 	bic.w	r1, r1, #3
 800ff20:	3d03      	subs	r5, #3
 800ff22:	45a8      	cmp	r8, r5
 800ff24:	bf38      	it	cc
 800ff26:	2100      	movcc	r1, #0
 800ff28:	440b      	add	r3, r1
 800ff2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff2e:	b191      	cbz	r1, 800ff56 <__mdiff+0x11a>
 800ff30:	6117      	str	r7, [r2, #16]
 800ff32:	e79d      	b.n	800fe70 <__mdiff+0x34>
 800ff34:	f854 1b04 	ldr.w	r1, [r4], #4
 800ff38:	46e6      	mov	lr, ip
 800ff3a:	0c08      	lsrs	r0, r1, #16
 800ff3c:	fa1c fc81 	uxtah	ip, ip, r1
 800ff40:	4471      	add	r1, lr
 800ff42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff46:	b289      	uxth	r1, r1
 800ff48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff4c:	f846 1b04 	str.w	r1, [r6], #4
 800ff50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff54:	e7dd      	b.n	800ff12 <__mdiff+0xd6>
 800ff56:	3f01      	subs	r7, #1
 800ff58:	e7e7      	b.n	800ff2a <__mdiff+0xee>
 800ff5a:	bf00      	nop
 800ff5c:	08010fd8 	.word	0x08010fd8
 800ff60:	08011049 	.word	0x08011049

0800ff64 <__ulp>:
 800ff64:	b082      	sub	sp, #8
 800ff66:	ed8d 0b00 	vstr	d0, [sp]
 800ff6a:	9a01      	ldr	r2, [sp, #4]
 800ff6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ffac <__ulp+0x48>)
 800ff6e:	4013      	ands	r3, r2
 800ff70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	dc08      	bgt.n	800ff8a <__ulp+0x26>
 800ff78:	425b      	negs	r3, r3
 800ff7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff82:	da04      	bge.n	800ff8e <__ulp+0x2a>
 800ff84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff88:	4113      	asrs	r3, r2
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	e008      	b.n	800ffa0 <__ulp+0x3c>
 800ff8e:	f1a2 0314 	sub.w	r3, r2, #20
 800ff92:	2b1e      	cmp	r3, #30
 800ff94:	bfda      	itte	le
 800ff96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff9a:	40da      	lsrle	r2, r3
 800ff9c:	2201      	movgt	r2, #1
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4619      	mov	r1, r3
 800ffa2:	4610      	mov	r0, r2
 800ffa4:	ec41 0b10 	vmov	d0, r0, r1
 800ffa8:	b002      	add	sp, #8
 800ffaa:	4770      	bx	lr
 800ffac:	7ff00000 	.word	0x7ff00000

0800ffb0 <__b2d>:
 800ffb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb4:	6906      	ldr	r6, [r0, #16]
 800ffb6:	f100 0814 	add.w	r8, r0, #20
 800ffba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ffbe:	1f37      	subs	r7, r6, #4
 800ffc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ffc4:	4610      	mov	r0, r2
 800ffc6:	f7ff fd4b 	bl	800fa60 <__hi0bits>
 800ffca:	f1c0 0320 	rsb	r3, r0, #32
 800ffce:	280a      	cmp	r0, #10
 800ffd0:	600b      	str	r3, [r1, #0]
 800ffd2:	491b      	ldr	r1, [pc, #108]	@ (8010040 <__b2d+0x90>)
 800ffd4:	dc15      	bgt.n	8010002 <__b2d+0x52>
 800ffd6:	f1c0 0c0b 	rsb	ip, r0, #11
 800ffda:	fa22 f30c 	lsr.w	r3, r2, ip
 800ffde:	45b8      	cmp	r8, r7
 800ffe0:	ea43 0501 	orr.w	r5, r3, r1
 800ffe4:	bf34      	ite	cc
 800ffe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffea:	2300      	movcs	r3, #0
 800ffec:	3015      	adds	r0, #21
 800ffee:	fa02 f000 	lsl.w	r0, r2, r0
 800fff2:	fa23 f30c 	lsr.w	r3, r3, ip
 800fff6:	4303      	orrs	r3, r0
 800fff8:	461c      	mov	r4, r3
 800fffa:	ec45 4b10 	vmov	d0, r4, r5
 800fffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010002:	45b8      	cmp	r8, r7
 8010004:	bf3a      	itte	cc
 8010006:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801000a:	f1a6 0708 	subcc.w	r7, r6, #8
 801000e:	2300      	movcs	r3, #0
 8010010:	380b      	subs	r0, #11
 8010012:	d012      	beq.n	801003a <__b2d+0x8a>
 8010014:	f1c0 0120 	rsb	r1, r0, #32
 8010018:	fa23 f401 	lsr.w	r4, r3, r1
 801001c:	4082      	lsls	r2, r0
 801001e:	4322      	orrs	r2, r4
 8010020:	4547      	cmp	r7, r8
 8010022:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010026:	bf8c      	ite	hi
 8010028:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801002c:	2200      	movls	r2, #0
 801002e:	4083      	lsls	r3, r0
 8010030:	40ca      	lsrs	r2, r1
 8010032:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010036:	4313      	orrs	r3, r2
 8010038:	e7de      	b.n	800fff8 <__b2d+0x48>
 801003a:	ea42 0501 	orr.w	r5, r2, r1
 801003e:	e7db      	b.n	800fff8 <__b2d+0x48>
 8010040:	3ff00000 	.word	0x3ff00000

08010044 <__d2b>:
 8010044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010048:	460f      	mov	r7, r1
 801004a:	2101      	movs	r1, #1
 801004c:	ec59 8b10 	vmov	r8, r9, d0
 8010050:	4616      	mov	r6, r2
 8010052:	f7ff fc13 	bl	800f87c <_Balloc>
 8010056:	4604      	mov	r4, r0
 8010058:	b930      	cbnz	r0, 8010068 <__d2b+0x24>
 801005a:	4602      	mov	r2, r0
 801005c:	4b23      	ldr	r3, [pc, #140]	@ (80100ec <__d2b+0xa8>)
 801005e:	4824      	ldr	r0, [pc, #144]	@ (80100f0 <__d2b+0xac>)
 8010060:	f240 310f 	movw	r1, #783	@ 0x30f
 8010064:	f000 fae6 	bl	8010634 <__assert_func>
 8010068:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801006c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010070:	b10d      	cbz	r5, 8010076 <__d2b+0x32>
 8010072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	f1b8 0300 	subs.w	r3, r8, #0
 801007c:	d023      	beq.n	80100c6 <__d2b+0x82>
 801007e:	4668      	mov	r0, sp
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	f7ff fd0c 	bl	800fa9e <__lo0bits>
 8010086:	e9dd 1200 	ldrd	r1, r2, [sp]
 801008a:	b1d0      	cbz	r0, 80100c2 <__d2b+0x7e>
 801008c:	f1c0 0320 	rsb	r3, r0, #32
 8010090:	fa02 f303 	lsl.w	r3, r2, r3
 8010094:	430b      	orrs	r3, r1
 8010096:	40c2      	lsrs	r2, r0
 8010098:	6163      	str	r3, [r4, #20]
 801009a:	9201      	str	r2, [sp, #4]
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	61a3      	str	r3, [r4, #24]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	bf0c      	ite	eq
 80100a4:	2201      	moveq	r2, #1
 80100a6:	2202      	movne	r2, #2
 80100a8:	6122      	str	r2, [r4, #16]
 80100aa:	b1a5      	cbz	r5, 80100d6 <__d2b+0x92>
 80100ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80100b0:	4405      	add	r5, r0
 80100b2:	603d      	str	r5, [r7, #0]
 80100b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80100b8:	6030      	str	r0, [r6, #0]
 80100ba:	4620      	mov	r0, r4
 80100bc:	b003      	add	sp, #12
 80100be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c2:	6161      	str	r1, [r4, #20]
 80100c4:	e7ea      	b.n	801009c <__d2b+0x58>
 80100c6:	a801      	add	r0, sp, #4
 80100c8:	f7ff fce9 	bl	800fa9e <__lo0bits>
 80100cc:	9b01      	ldr	r3, [sp, #4]
 80100ce:	6163      	str	r3, [r4, #20]
 80100d0:	3020      	adds	r0, #32
 80100d2:	2201      	movs	r2, #1
 80100d4:	e7e8      	b.n	80100a8 <__d2b+0x64>
 80100d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80100de:	6038      	str	r0, [r7, #0]
 80100e0:	6918      	ldr	r0, [r3, #16]
 80100e2:	f7ff fcbd 	bl	800fa60 <__hi0bits>
 80100e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100ea:	e7e5      	b.n	80100b8 <__d2b+0x74>
 80100ec:	08010fd8 	.word	0x08010fd8
 80100f0:	08011049 	.word	0x08011049

080100f4 <__ratio>:
 80100f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f8:	b085      	sub	sp, #20
 80100fa:	e9cd 1000 	strd	r1, r0, [sp]
 80100fe:	a902      	add	r1, sp, #8
 8010100:	f7ff ff56 	bl	800ffb0 <__b2d>
 8010104:	9800      	ldr	r0, [sp, #0]
 8010106:	a903      	add	r1, sp, #12
 8010108:	ec55 4b10 	vmov	r4, r5, d0
 801010c:	f7ff ff50 	bl	800ffb0 <__b2d>
 8010110:	9b01      	ldr	r3, [sp, #4]
 8010112:	6919      	ldr	r1, [r3, #16]
 8010114:	9b00      	ldr	r3, [sp, #0]
 8010116:	691b      	ldr	r3, [r3, #16]
 8010118:	1ac9      	subs	r1, r1, r3
 801011a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801011e:	1a9b      	subs	r3, r3, r2
 8010120:	ec5b ab10 	vmov	sl, fp, d0
 8010124:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010128:	2b00      	cmp	r3, #0
 801012a:	bfce      	itee	gt
 801012c:	462a      	movgt	r2, r5
 801012e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010132:	465a      	movle	r2, fp
 8010134:	462f      	mov	r7, r5
 8010136:	46d9      	mov	r9, fp
 8010138:	bfcc      	ite	gt
 801013a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801013e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010142:	464b      	mov	r3, r9
 8010144:	4652      	mov	r2, sl
 8010146:	4620      	mov	r0, r4
 8010148:	4639      	mov	r1, r7
 801014a:	f7f0 fba7 	bl	800089c <__aeabi_ddiv>
 801014e:	ec41 0b10 	vmov	d0, r0, r1
 8010152:	b005      	add	sp, #20
 8010154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010158 <__copybits>:
 8010158:	3901      	subs	r1, #1
 801015a:	b570      	push	{r4, r5, r6, lr}
 801015c:	1149      	asrs	r1, r1, #5
 801015e:	6914      	ldr	r4, [r2, #16]
 8010160:	3101      	adds	r1, #1
 8010162:	f102 0314 	add.w	r3, r2, #20
 8010166:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801016a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801016e:	1f05      	subs	r5, r0, #4
 8010170:	42a3      	cmp	r3, r4
 8010172:	d30c      	bcc.n	801018e <__copybits+0x36>
 8010174:	1aa3      	subs	r3, r4, r2
 8010176:	3b11      	subs	r3, #17
 8010178:	f023 0303 	bic.w	r3, r3, #3
 801017c:	3211      	adds	r2, #17
 801017e:	42a2      	cmp	r2, r4
 8010180:	bf88      	it	hi
 8010182:	2300      	movhi	r3, #0
 8010184:	4418      	add	r0, r3
 8010186:	2300      	movs	r3, #0
 8010188:	4288      	cmp	r0, r1
 801018a:	d305      	bcc.n	8010198 <__copybits+0x40>
 801018c:	bd70      	pop	{r4, r5, r6, pc}
 801018e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010192:	f845 6f04 	str.w	r6, [r5, #4]!
 8010196:	e7eb      	b.n	8010170 <__copybits+0x18>
 8010198:	f840 3b04 	str.w	r3, [r0], #4
 801019c:	e7f4      	b.n	8010188 <__copybits+0x30>

0801019e <__any_on>:
 801019e:	f100 0214 	add.w	r2, r0, #20
 80101a2:	6900      	ldr	r0, [r0, #16]
 80101a4:	114b      	asrs	r3, r1, #5
 80101a6:	4298      	cmp	r0, r3
 80101a8:	b510      	push	{r4, lr}
 80101aa:	db11      	blt.n	80101d0 <__any_on+0x32>
 80101ac:	dd0a      	ble.n	80101c4 <__any_on+0x26>
 80101ae:	f011 011f 	ands.w	r1, r1, #31
 80101b2:	d007      	beq.n	80101c4 <__any_on+0x26>
 80101b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101b8:	fa24 f001 	lsr.w	r0, r4, r1
 80101bc:	fa00 f101 	lsl.w	r1, r0, r1
 80101c0:	428c      	cmp	r4, r1
 80101c2:	d10b      	bne.n	80101dc <__any_on+0x3e>
 80101c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d803      	bhi.n	80101d4 <__any_on+0x36>
 80101cc:	2000      	movs	r0, #0
 80101ce:	bd10      	pop	{r4, pc}
 80101d0:	4603      	mov	r3, r0
 80101d2:	e7f7      	b.n	80101c4 <__any_on+0x26>
 80101d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101d8:	2900      	cmp	r1, #0
 80101da:	d0f5      	beq.n	80101c8 <__any_on+0x2a>
 80101dc:	2001      	movs	r0, #1
 80101de:	e7f6      	b.n	80101ce <__any_on+0x30>

080101e0 <__ascii_wctomb>:
 80101e0:	4603      	mov	r3, r0
 80101e2:	4608      	mov	r0, r1
 80101e4:	b141      	cbz	r1, 80101f8 <__ascii_wctomb+0x18>
 80101e6:	2aff      	cmp	r2, #255	@ 0xff
 80101e8:	d904      	bls.n	80101f4 <__ascii_wctomb+0x14>
 80101ea:	228a      	movs	r2, #138	@ 0x8a
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	f04f 30ff 	mov.w	r0, #4294967295
 80101f2:	4770      	bx	lr
 80101f4:	700a      	strb	r2, [r1, #0]
 80101f6:	2001      	movs	r0, #1
 80101f8:	4770      	bx	lr

080101fa <__ssputs_r>:
 80101fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fe:	688e      	ldr	r6, [r1, #8]
 8010200:	461f      	mov	r7, r3
 8010202:	42be      	cmp	r6, r7
 8010204:	680b      	ldr	r3, [r1, #0]
 8010206:	4682      	mov	sl, r0
 8010208:	460c      	mov	r4, r1
 801020a:	4690      	mov	r8, r2
 801020c:	d82d      	bhi.n	801026a <__ssputs_r+0x70>
 801020e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010212:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010216:	d026      	beq.n	8010266 <__ssputs_r+0x6c>
 8010218:	6965      	ldr	r5, [r4, #20]
 801021a:	6909      	ldr	r1, [r1, #16]
 801021c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010220:	eba3 0901 	sub.w	r9, r3, r1
 8010224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010228:	1c7b      	adds	r3, r7, #1
 801022a:	444b      	add	r3, r9
 801022c:	106d      	asrs	r5, r5, #1
 801022e:	429d      	cmp	r5, r3
 8010230:	bf38      	it	cc
 8010232:	461d      	movcc	r5, r3
 8010234:	0553      	lsls	r3, r2, #21
 8010236:	d527      	bpl.n	8010288 <__ssputs_r+0x8e>
 8010238:	4629      	mov	r1, r5
 801023a:	f7fc fc3b 	bl	800cab4 <_malloc_r>
 801023e:	4606      	mov	r6, r0
 8010240:	b360      	cbz	r0, 801029c <__ssputs_r+0xa2>
 8010242:	6921      	ldr	r1, [r4, #16]
 8010244:	464a      	mov	r2, r9
 8010246:	f7fe f918 	bl	800e47a <memcpy>
 801024a:	89a3      	ldrh	r3, [r4, #12]
 801024c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010254:	81a3      	strh	r3, [r4, #12]
 8010256:	6126      	str	r6, [r4, #16]
 8010258:	6165      	str	r5, [r4, #20]
 801025a:	444e      	add	r6, r9
 801025c:	eba5 0509 	sub.w	r5, r5, r9
 8010260:	6026      	str	r6, [r4, #0]
 8010262:	60a5      	str	r5, [r4, #8]
 8010264:	463e      	mov	r6, r7
 8010266:	42be      	cmp	r6, r7
 8010268:	d900      	bls.n	801026c <__ssputs_r+0x72>
 801026a:	463e      	mov	r6, r7
 801026c:	6820      	ldr	r0, [r4, #0]
 801026e:	4632      	mov	r2, r6
 8010270:	4641      	mov	r1, r8
 8010272:	f000 f9c5 	bl	8010600 <memmove>
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	1b9b      	subs	r3, r3, r6
 801027a:	60a3      	str	r3, [r4, #8]
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	4433      	add	r3, r6
 8010280:	6023      	str	r3, [r4, #0]
 8010282:	2000      	movs	r0, #0
 8010284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010288:	462a      	mov	r2, r5
 801028a:	f000 f9f1 	bl	8010670 <_realloc_r>
 801028e:	4606      	mov	r6, r0
 8010290:	2800      	cmp	r0, #0
 8010292:	d1e0      	bne.n	8010256 <__ssputs_r+0x5c>
 8010294:	6921      	ldr	r1, [r4, #16]
 8010296:	4650      	mov	r0, sl
 8010298:	f7fe ff52 	bl	800f140 <_free_r>
 801029c:	230c      	movs	r3, #12
 801029e:	f8ca 3000 	str.w	r3, [sl]
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102a8:	81a3      	strh	r3, [r4, #12]
 80102aa:	f04f 30ff 	mov.w	r0, #4294967295
 80102ae:	e7e9      	b.n	8010284 <__ssputs_r+0x8a>

080102b0 <_svfiprintf_r>:
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	4698      	mov	r8, r3
 80102b6:	898b      	ldrh	r3, [r1, #12]
 80102b8:	061b      	lsls	r3, r3, #24
 80102ba:	b09d      	sub	sp, #116	@ 0x74
 80102bc:	4607      	mov	r7, r0
 80102be:	460d      	mov	r5, r1
 80102c0:	4614      	mov	r4, r2
 80102c2:	d510      	bpl.n	80102e6 <_svfiprintf_r+0x36>
 80102c4:	690b      	ldr	r3, [r1, #16]
 80102c6:	b973      	cbnz	r3, 80102e6 <_svfiprintf_r+0x36>
 80102c8:	2140      	movs	r1, #64	@ 0x40
 80102ca:	f7fc fbf3 	bl	800cab4 <_malloc_r>
 80102ce:	6028      	str	r0, [r5, #0]
 80102d0:	6128      	str	r0, [r5, #16]
 80102d2:	b930      	cbnz	r0, 80102e2 <_svfiprintf_r+0x32>
 80102d4:	230c      	movs	r3, #12
 80102d6:	603b      	str	r3, [r7, #0]
 80102d8:	f04f 30ff 	mov.w	r0, #4294967295
 80102dc:	b01d      	add	sp, #116	@ 0x74
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e2:	2340      	movs	r3, #64	@ 0x40
 80102e4:	616b      	str	r3, [r5, #20]
 80102e6:	2300      	movs	r3, #0
 80102e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ea:	2320      	movs	r3, #32
 80102ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80102f4:	2330      	movs	r3, #48	@ 0x30
 80102f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010494 <_svfiprintf_r+0x1e4>
 80102fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102fe:	f04f 0901 	mov.w	r9, #1
 8010302:	4623      	mov	r3, r4
 8010304:	469a      	mov	sl, r3
 8010306:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030a:	b10a      	cbz	r2, 8010310 <_svfiprintf_r+0x60>
 801030c:	2a25      	cmp	r2, #37	@ 0x25
 801030e:	d1f9      	bne.n	8010304 <_svfiprintf_r+0x54>
 8010310:	ebba 0b04 	subs.w	fp, sl, r4
 8010314:	d00b      	beq.n	801032e <_svfiprintf_r+0x7e>
 8010316:	465b      	mov	r3, fp
 8010318:	4622      	mov	r2, r4
 801031a:	4629      	mov	r1, r5
 801031c:	4638      	mov	r0, r7
 801031e:	f7ff ff6c 	bl	80101fa <__ssputs_r>
 8010322:	3001      	adds	r0, #1
 8010324:	f000 80a7 	beq.w	8010476 <_svfiprintf_r+0x1c6>
 8010328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801032a:	445a      	add	r2, fp
 801032c:	9209      	str	r2, [sp, #36]	@ 0x24
 801032e:	f89a 3000 	ldrb.w	r3, [sl]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 809f 	beq.w	8010476 <_svfiprintf_r+0x1c6>
 8010338:	2300      	movs	r3, #0
 801033a:	f04f 32ff 	mov.w	r2, #4294967295
 801033e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010342:	f10a 0a01 	add.w	sl, sl, #1
 8010346:	9304      	str	r3, [sp, #16]
 8010348:	9307      	str	r3, [sp, #28]
 801034a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801034e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010350:	4654      	mov	r4, sl
 8010352:	2205      	movs	r2, #5
 8010354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010358:	484e      	ldr	r0, [pc, #312]	@ (8010494 <_svfiprintf_r+0x1e4>)
 801035a:	f7ef ff61 	bl	8000220 <memchr>
 801035e:	9a04      	ldr	r2, [sp, #16]
 8010360:	b9d8      	cbnz	r0, 801039a <_svfiprintf_r+0xea>
 8010362:	06d0      	lsls	r0, r2, #27
 8010364:	bf44      	itt	mi
 8010366:	2320      	movmi	r3, #32
 8010368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801036c:	0711      	lsls	r1, r2, #28
 801036e:	bf44      	itt	mi
 8010370:	232b      	movmi	r3, #43	@ 0x2b
 8010372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010376:	f89a 3000 	ldrb.w	r3, [sl]
 801037a:	2b2a      	cmp	r3, #42	@ 0x2a
 801037c:	d015      	beq.n	80103aa <_svfiprintf_r+0xfa>
 801037e:	9a07      	ldr	r2, [sp, #28]
 8010380:	4654      	mov	r4, sl
 8010382:	2000      	movs	r0, #0
 8010384:	f04f 0c0a 	mov.w	ip, #10
 8010388:	4621      	mov	r1, r4
 801038a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801038e:	3b30      	subs	r3, #48	@ 0x30
 8010390:	2b09      	cmp	r3, #9
 8010392:	d94b      	bls.n	801042c <_svfiprintf_r+0x17c>
 8010394:	b1b0      	cbz	r0, 80103c4 <_svfiprintf_r+0x114>
 8010396:	9207      	str	r2, [sp, #28]
 8010398:	e014      	b.n	80103c4 <_svfiprintf_r+0x114>
 801039a:	eba0 0308 	sub.w	r3, r0, r8
 801039e:	fa09 f303 	lsl.w	r3, r9, r3
 80103a2:	4313      	orrs	r3, r2
 80103a4:	9304      	str	r3, [sp, #16]
 80103a6:	46a2      	mov	sl, r4
 80103a8:	e7d2      	b.n	8010350 <_svfiprintf_r+0xa0>
 80103aa:	9b03      	ldr	r3, [sp, #12]
 80103ac:	1d19      	adds	r1, r3, #4
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	9103      	str	r1, [sp, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	bfbb      	ittet	lt
 80103b6:	425b      	neglt	r3, r3
 80103b8:	f042 0202 	orrlt.w	r2, r2, #2
 80103bc:	9307      	strge	r3, [sp, #28]
 80103be:	9307      	strlt	r3, [sp, #28]
 80103c0:	bfb8      	it	lt
 80103c2:	9204      	strlt	r2, [sp, #16]
 80103c4:	7823      	ldrb	r3, [r4, #0]
 80103c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80103c8:	d10a      	bne.n	80103e0 <_svfiprintf_r+0x130>
 80103ca:	7863      	ldrb	r3, [r4, #1]
 80103cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80103ce:	d132      	bne.n	8010436 <_svfiprintf_r+0x186>
 80103d0:	9b03      	ldr	r3, [sp, #12]
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	9203      	str	r2, [sp, #12]
 80103d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103dc:	3402      	adds	r4, #2
 80103de:	9305      	str	r3, [sp, #20]
 80103e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80104a4 <_svfiprintf_r+0x1f4>
 80103e4:	7821      	ldrb	r1, [r4, #0]
 80103e6:	2203      	movs	r2, #3
 80103e8:	4650      	mov	r0, sl
 80103ea:	f7ef ff19 	bl	8000220 <memchr>
 80103ee:	b138      	cbz	r0, 8010400 <_svfiprintf_r+0x150>
 80103f0:	9b04      	ldr	r3, [sp, #16]
 80103f2:	eba0 000a 	sub.w	r0, r0, sl
 80103f6:	2240      	movs	r2, #64	@ 0x40
 80103f8:	4082      	lsls	r2, r0
 80103fa:	4313      	orrs	r3, r2
 80103fc:	3401      	adds	r4, #1
 80103fe:	9304      	str	r3, [sp, #16]
 8010400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010404:	4824      	ldr	r0, [pc, #144]	@ (8010498 <_svfiprintf_r+0x1e8>)
 8010406:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801040a:	2206      	movs	r2, #6
 801040c:	f7ef ff08 	bl	8000220 <memchr>
 8010410:	2800      	cmp	r0, #0
 8010412:	d036      	beq.n	8010482 <_svfiprintf_r+0x1d2>
 8010414:	4b21      	ldr	r3, [pc, #132]	@ (801049c <_svfiprintf_r+0x1ec>)
 8010416:	bb1b      	cbnz	r3, 8010460 <_svfiprintf_r+0x1b0>
 8010418:	9b03      	ldr	r3, [sp, #12]
 801041a:	3307      	adds	r3, #7
 801041c:	f023 0307 	bic.w	r3, r3, #7
 8010420:	3308      	adds	r3, #8
 8010422:	9303      	str	r3, [sp, #12]
 8010424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010426:	4433      	add	r3, r6
 8010428:	9309      	str	r3, [sp, #36]	@ 0x24
 801042a:	e76a      	b.n	8010302 <_svfiprintf_r+0x52>
 801042c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010430:	460c      	mov	r4, r1
 8010432:	2001      	movs	r0, #1
 8010434:	e7a8      	b.n	8010388 <_svfiprintf_r+0xd8>
 8010436:	2300      	movs	r3, #0
 8010438:	3401      	adds	r4, #1
 801043a:	9305      	str	r3, [sp, #20]
 801043c:	4619      	mov	r1, r3
 801043e:	f04f 0c0a 	mov.w	ip, #10
 8010442:	4620      	mov	r0, r4
 8010444:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010448:	3a30      	subs	r2, #48	@ 0x30
 801044a:	2a09      	cmp	r2, #9
 801044c:	d903      	bls.n	8010456 <_svfiprintf_r+0x1a6>
 801044e:	2b00      	cmp	r3, #0
 8010450:	d0c6      	beq.n	80103e0 <_svfiprintf_r+0x130>
 8010452:	9105      	str	r1, [sp, #20]
 8010454:	e7c4      	b.n	80103e0 <_svfiprintf_r+0x130>
 8010456:	fb0c 2101 	mla	r1, ip, r1, r2
 801045a:	4604      	mov	r4, r0
 801045c:	2301      	movs	r3, #1
 801045e:	e7f0      	b.n	8010442 <_svfiprintf_r+0x192>
 8010460:	ab03      	add	r3, sp, #12
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	462a      	mov	r2, r5
 8010466:	4b0e      	ldr	r3, [pc, #56]	@ (80104a0 <_svfiprintf_r+0x1f0>)
 8010468:	a904      	add	r1, sp, #16
 801046a:	4638      	mov	r0, r7
 801046c:	f7fd fa5c 	bl	800d928 <_printf_float>
 8010470:	1c42      	adds	r2, r0, #1
 8010472:	4606      	mov	r6, r0
 8010474:	d1d6      	bne.n	8010424 <_svfiprintf_r+0x174>
 8010476:	89ab      	ldrh	r3, [r5, #12]
 8010478:	065b      	lsls	r3, r3, #25
 801047a:	f53f af2d 	bmi.w	80102d8 <_svfiprintf_r+0x28>
 801047e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010480:	e72c      	b.n	80102dc <_svfiprintf_r+0x2c>
 8010482:	ab03      	add	r3, sp, #12
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	462a      	mov	r2, r5
 8010488:	4b05      	ldr	r3, [pc, #20]	@ (80104a0 <_svfiprintf_r+0x1f0>)
 801048a:	a904      	add	r1, sp, #16
 801048c:	4638      	mov	r0, r7
 801048e:	f7fd fce3 	bl	800de58 <_printf_i>
 8010492:	e7ed      	b.n	8010470 <_svfiprintf_r+0x1c0>
 8010494:	080112a1 	.word	0x080112a1
 8010498:	080112ab 	.word	0x080112ab
 801049c:	0800d929 	.word	0x0800d929
 80104a0:	080101fb 	.word	0x080101fb
 80104a4:	080112a7 	.word	0x080112a7

080104a8 <__sflush_r>:
 80104a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b0:	0716      	lsls	r6, r2, #28
 80104b2:	4605      	mov	r5, r0
 80104b4:	460c      	mov	r4, r1
 80104b6:	d454      	bmi.n	8010562 <__sflush_r+0xba>
 80104b8:	684b      	ldr	r3, [r1, #4]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	dc02      	bgt.n	80104c4 <__sflush_r+0x1c>
 80104be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	dd48      	ble.n	8010556 <__sflush_r+0xae>
 80104c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104c6:	2e00      	cmp	r6, #0
 80104c8:	d045      	beq.n	8010556 <__sflush_r+0xae>
 80104ca:	2300      	movs	r3, #0
 80104cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80104d0:	682f      	ldr	r7, [r5, #0]
 80104d2:	6a21      	ldr	r1, [r4, #32]
 80104d4:	602b      	str	r3, [r5, #0]
 80104d6:	d030      	beq.n	801053a <__sflush_r+0x92>
 80104d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80104da:	89a3      	ldrh	r3, [r4, #12]
 80104dc:	0759      	lsls	r1, r3, #29
 80104de:	d505      	bpl.n	80104ec <__sflush_r+0x44>
 80104e0:	6863      	ldr	r3, [r4, #4]
 80104e2:	1ad2      	subs	r2, r2, r3
 80104e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80104e6:	b10b      	cbz	r3, 80104ec <__sflush_r+0x44>
 80104e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80104ea:	1ad2      	subs	r2, r2, r3
 80104ec:	2300      	movs	r3, #0
 80104ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80104f0:	6a21      	ldr	r1, [r4, #32]
 80104f2:	4628      	mov	r0, r5
 80104f4:	47b0      	blx	r6
 80104f6:	1c43      	adds	r3, r0, #1
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	d106      	bne.n	801050a <__sflush_r+0x62>
 80104fc:	6829      	ldr	r1, [r5, #0]
 80104fe:	291d      	cmp	r1, #29
 8010500:	d82b      	bhi.n	801055a <__sflush_r+0xb2>
 8010502:	4a2a      	ldr	r2, [pc, #168]	@ (80105ac <__sflush_r+0x104>)
 8010504:	410a      	asrs	r2, r1
 8010506:	07d6      	lsls	r6, r2, #31
 8010508:	d427      	bmi.n	801055a <__sflush_r+0xb2>
 801050a:	2200      	movs	r2, #0
 801050c:	6062      	str	r2, [r4, #4]
 801050e:	04d9      	lsls	r1, r3, #19
 8010510:	6922      	ldr	r2, [r4, #16]
 8010512:	6022      	str	r2, [r4, #0]
 8010514:	d504      	bpl.n	8010520 <__sflush_r+0x78>
 8010516:	1c42      	adds	r2, r0, #1
 8010518:	d101      	bne.n	801051e <__sflush_r+0x76>
 801051a:	682b      	ldr	r3, [r5, #0]
 801051c:	b903      	cbnz	r3, 8010520 <__sflush_r+0x78>
 801051e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010520:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010522:	602f      	str	r7, [r5, #0]
 8010524:	b1b9      	cbz	r1, 8010556 <__sflush_r+0xae>
 8010526:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801052a:	4299      	cmp	r1, r3
 801052c:	d002      	beq.n	8010534 <__sflush_r+0x8c>
 801052e:	4628      	mov	r0, r5
 8010530:	f7fe fe06 	bl	800f140 <_free_r>
 8010534:	2300      	movs	r3, #0
 8010536:	6363      	str	r3, [r4, #52]	@ 0x34
 8010538:	e00d      	b.n	8010556 <__sflush_r+0xae>
 801053a:	2301      	movs	r3, #1
 801053c:	4628      	mov	r0, r5
 801053e:	47b0      	blx	r6
 8010540:	4602      	mov	r2, r0
 8010542:	1c50      	adds	r0, r2, #1
 8010544:	d1c9      	bne.n	80104da <__sflush_r+0x32>
 8010546:	682b      	ldr	r3, [r5, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d0c6      	beq.n	80104da <__sflush_r+0x32>
 801054c:	2b1d      	cmp	r3, #29
 801054e:	d001      	beq.n	8010554 <__sflush_r+0xac>
 8010550:	2b16      	cmp	r3, #22
 8010552:	d11e      	bne.n	8010592 <__sflush_r+0xea>
 8010554:	602f      	str	r7, [r5, #0]
 8010556:	2000      	movs	r0, #0
 8010558:	e022      	b.n	80105a0 <__sflush_r+0xf8>
 801055a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801055e:	b21b      	sxth	r3, r3
 8010560:	e01b      	b.n	801059a <__sflush_r+0xf2>
 8010562:	690f      	ldr	r7, [r1, #16]
 8010564:	2f00      	cmp	r7, #0
 8010566:	d0f6      	beq.n	8010556 <__sflush_r+0xae>
 8010568:	0793      	lsls	r3, r2, #30
 801056a:	680e      	ldr	r6, [r1, #0]
 801056c:	bf08      	it	eq
 801056e:	694b      	ldreq	r3, [r1, #20]
 8010570:	600f      	str	r7, [r1, #0]
 8010572:	bf18      	it	ne
 8010574:	2300      	movne	r3, #0
 8010576:	eba6 0807 	sub.w	r8, r6, r7
 801057a:	608b      	str	r3, [r1, #8]
 801057c:	f1b8 0f00 	cmp.w	r8, #0
 8010580:	dde9      	ble.n	8010556 <__sflush_r+0xae>
 8010582:	6a21      	ldr	r1, [r4, #32]
 8010584:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010586:	4643      	mov	r3, r8
 8010588:	463a      	mov	r2, r7
 801058a:	4628      	mov	r0, r5
 801058c:	47b0      	blx	r6
 801058e:	2800      	cmp	r0, #0
 8010590:	dc08      	bgt.n	80105a4 <__sflush_r+0xfc>
 8010592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801059a:	81a3      	strh	r3, [r4, #12]
 801059c:	f04f 30ff 	mov.w	r0, #4294967295
 80105a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a4:	4407      	add	r7, r0
 80105a6:	eba8 0800 	sub.w	r8, r8, r0
 80105aa:	e7e7      	b.n	801057c <__sflush_r+0xd4>
 80105ac:	dfbffffe 	.word	0xdfbffffe

080105b0 <_fflush_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	690b      	ldr	r3, [r1, #16]
 80105b4:	4605      	mov	r5, r0
 80105b6:	460c      	mov	r4, r1
 80105b8:	b913      	cbnz	r3, 80105c0 <_fflush_r+0x10>
 80105ba:	2500      	movs	r5, #0
 80105bc:	4628      	mov	r0, r5
 80105be:	bd38      	pop	{r3, r4, r5, pc}
 80105c0:	b118      	cbz	r0, 80105ca <_fflush_r+0x1a>
 80105c2:	6a03      	ldr	r3, [r0, #32]
 80105c4:	b90b      	cbnz	r3, 80105ca <_fflush_r+0x1a>
 80105c6:	f7fd fdf3 	bl	800e1b0 <__sinit>
 80105ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d0f3      	beq.n	80105ba <_fflush_r+0xa>
 80105d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80105d4:	07d0      	lsls	r0, r2, #31
 80105d6:	d404      	bmi.n	80105e2 <_fflush_r+0x32>
 80105d8:	0599      	lsls	r1, r3, #22
 80105da:	d402      	bmi.n	80105e2 <_fflush_r+0x32>
 80105dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105de:	f7fd ff42 	bl	800e466 <__retarget_lock_acquire_recursive>
 80105e2:	4628      	mov	r0, r5
 80105e4:	4621      	mov	r1, r4
 80105e6:	f7ff ff5f 	bl	80104a8 <__sflush_r>
 80105ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80105ec:	07da      	lsls	r2, r3, #31
 80105ee:	4605      	mov	r5, r0
 80105f0:	d4e4      	bmi.n	80105bc <_fflush_r+0xc>
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	059b      	lsls	r3, r3, #22
 80105f6:	d4e1      	bmi.n	80105bc <_fflush_r+0xc>
 80105f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80105fa:	f7fd ff35 	bl	800e468 <__retarget_lock_release_recursive>
 80105fe:	e7dd      	b.n	80105bc <_fflush_r+0xc>

08010600 <memmove>:
 8010600:	4288      	cmp	r0, r1
 8010602:	b510      	push	{r4, lr}
 8010604:	eb01 0402 	add.w	r4, r1, r2
 8010608:	d902      	bls.n	8010610 <memmove+0x10>
 801060a:	4284      	cmp	r4, r0
 801060c:	4623      	mov	r3, r4
 801060e:	d807      	bhi.n	8010620 <memmove+0x20>
 8010610:	1e43      	subs	r3, r0, #1
 8010612:	42a1      	cmp	r1, r4
 8010614:	d008      	beq.n	8010628 <memmove+0x28>
 8010616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801061a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801061e:	e7f8      	b.n	8010612 <memmove+0x12>
 8010620:	4402      	add	r2, r0
 8010622:	4601      	mov	r1, r0
 8010624:	428a      	cmp	r2, r1
 8010626:	d100      	bne.n	801062a <memmove+0x2a>
 8010628:	bd10      	pop	{r4, pc}
 801062a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801062e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010632:	e7f7      	b.n	8010624 <memmove+0x24>

08010634 <__assert_func>:
 8010634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010636:	4614      	mov	r4, r2
 8010638:	461a      	mov	r2, r3
 801063a:	4b09      	ldr	r3, [pc, #36]	@ (8010660 <__assert_func+0x2c>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4605      	mov	r5, r0
 8010640:	68d8      	ldr	r0, [r3, #12]
 8010642:	b954      	cbnz	r4, 801065a <__assert_func+0x26>
 8010644:	4b07      	ldr	r3, [pc, #28]	@ (8010664 <__assert_func+0x30>)
 8010646:	461c      	mov	r4, r3
 8010648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801064c:	9100      	str	r1, [sp, #0]
 801064e:	462b      	mov	r3, r5
 8010650:	4905      	ldr	r1, [pc, #20]	@ (8010668 <__assert_func+0x34>)
 8010652:	f000 f83b 	bl	80106cc <fiprintf>
 8010656:	f000 f84b 	bl	80106f0 <abort>
 801065a:	4b04      	ldr	r3, [pc, #16]	@ (801066c <__assert_func+0x38>)
 801065c:	e7f4      	b.n	8010648 <__assert_func+0x14>
 801065e:	bf00      	nop
 8010660:	20000300 	.word	0x20000300
 8010664:	080112ed 	.word	0x080112ed
 8010668:	080112bf 	.word	0x080112bf
 801066c:	080112b2 	.word	0x080112b2

08010670 <_realloc_r>:
 8010670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010674:	4680      	mov	r8, r0
 8010676:	4615      	mov	r5, r2
 8010678:	460c      	mov	r4, r1
 801067a:	b921      	cbnz	r1, 8010686 <_realloc_r+0x16>
 801067c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010680:	4611      	mov	r1, r2
 8010682:	f7fc ba17 	b.w	800cab4 <_malloc_r>
 8010686:	b92a      	cbnz	r2, 8010694 <_realloc_r+0x24>
 8010688:	f7fe fd5a 	bl	800f140 <_free_r>
 801068c:	2400      	movs	r4, #0
 801068e:	4620      	mov	r0, r4
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010694:	f000 f833 	bl	80106fe <_malloc_usable_size_r>
 8010698:	4285      	cmp	r5, r0
 801069a:	4606      	mov	r6, r0
 801069c:	d802      	bhi.n	80106a4 <_realloc_r+0x34>
 801069e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80106a2:	d8f4      	bhi.n	801068e <_realloc_r+0x1e>
 80106a4:	4629      	mov	r1, r5
 80106a6:	4640      	mov	r0, r8
 80106a8:	f7fc fa04 	bl	800cab4 <_malloc_r>
 80106ac:	4607      	mov	r7, r0
 80106ae:	2800      	cmp	r0, #0
 80106b0:	d0ec      	beq.n	801068c <_realloc_r+0x1c>
 80106b2:	42b5      	cmp	r5, r6
 80106b4:	462a      	mov	r2, r5
 80106b6:	4621      	mov	r1, r4
 80106b8:	bf28      	it	cs
 80106ba:	4632      	movcs	r2, r6
 80106bc:	f7fd fedd 	bl	800e47a <memcpy>
 80106c0:	4621      	mov	r1, r4
 80106c2:	4640      	mov	r0, r8
 80106c4:	f7fe fd3c 	bl	800f140 <_free_r>
 80106c8:	463c      	mov	r4, r7
 80106ca:	e7e0      	b.n	801068e <_realloc_r+0x1e>

080106cc <fiprintf>:
 80106cc:	b40e      	push	{r1, r2, r3}
 80106ce:	b503      	push	{r0, r1, lr}
 80106d0:	4601      	mov	r1, r0
 80106d2:	ab03      	add	r3, sp, #12
 80106d4:	4805      	ldr	r0, [pc, #20]	@ (80106ec <fiprintf+0x20>)
 80106d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80106da:	6800      	ldr	r0, [r0, #0]
 80106dc:	9301      	str	r3, [sp, #4]
 80106de:	f000 f83f 	bl	8010760 <_vfiprintf_r>
 80106e2:	b002      	add	sp, #8
 80106e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80106e8:	b003      	add	sp, #12
 80106ea:	4770      	bx	lr
 80106ec:	20000300 	.word	0x20000300

080106f0 <abort>:
 80106f0:	b508      	push	{r3, lr}
 80106f2:	2006      	movs	r0, #6
 80106f4:	f000 fa08 	bl	8010b08 <raise>
 80106f8:	2001      	movs	r0, #1
 80106fa:	f7f1 fe4f 	bl	800239c <_exit>

080106fe <_malloc_usable_size_r>:
 80106fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010702:	1f18      	subs	r0, r3, #4
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfbc      	itt	lt
 8010708:	580b      	ldrlt	r3, [r1, r0]
 801070a:	18c0      	addlt	r0, r0, r3
 801070c:	4770      	bx	lr

0801070e <__sfputc_r>:
 801070e:	6893      	ldr	r3, [r2, #8]
 8010710:	3b01      	subs	r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	b410      	push	{r4}
 8010716:	6093      	str	r3, [r2, #8]
 8010718:	da08      	bge.n	801072c <__sfputc_r+0x1e>
 801071a:	6994      	ldr	r4, [r2, #24]
 801071c:	42a3      	cmp	r3, r4
 801071e:	db01      	blt.n	8010724 <__sfputc_r+0x16>
 8010720:	290a      	cmp	r1, #10
 8010722:	d103      	bne.n	801072c <__sfputc_r+0x1e>
 8010724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010728:	f000 b932 	b.w	8010990 <__swbuf_r>
 801072c:	6813      	ldr	r3, [r2, #0]
 801072e:	1c58      	adds	r0, r3, #1
 8010730:	6010      	str	r0, [r2, #0]
 8010732:	7019      	strb	r1, [r3, #0]
 8010734:	4608      	mov	r0, r1
 8010736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801073a:	4770      	bx	lr

0801073c <__sfputs_r>:
 801073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073e:	4606      	mov	r6, r0
 8010740:	460f      	mov	r7, r1
 8010742:	4614      	mov	r4, r2
 8010744:	18d5      	adds	r5, r2, r3
 8010746:	42ac      	cmp	r4, r5
 8010748:	d101      	bne.n	801074e <__sfputs_r+0x12>
 801074a:	2000      	movs	r0, #0
 801074c:	e007      	b.n	801075e <__sfputs_r+0x22>
 801074e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010752:	463a      	mov	r2, r7
 8010754:	4630      	mov	r0, r6
 8010756:	f7ff ffda 	bl	801070e <__sfputc_r>
 801075a:	1c43      	adds	r3, r0, #1
 801075c:	d1f3      	bne.n	8010746 <__sfputs_r+0xa>
 801075e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010760 <_vfiprintf_r>:
 8010760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	460d      	mov	r5, r1
 8010766:	b09d      	sub	sp, #116	@ 0x74
 8010768:	4614      	mov	r4, r2
 801076a:	4698      	mov	r8, r3
 801076c:	4606      	mov	r6, r0
 801076e:	b118      	cbz	r0, 8010778 <_vfiprintf_r+0x18>
 8010770:	6a03      	ldr	r3, [r0, #32]
 8010772:	b90b      	cbnz	r3, 8010778 <_vfiprintf_r+0x18>
 8010774:	f7fd fd1c 	bl	800e1b0 <__sinit>
 8010778:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801077a:	07d9      	lsls	r1, r3, #31
 801077c:	d405      	bmi.n	801078a <_vfiprintf_r+0x2a>
 801077e:	89ab      	ldrh	r3, [r5, #12]
 8010780:	059a      	lsls	r2, r3, #22
 8010782:	d402      	bmi.n	801078a <_vfiprintf_r+0x2a>
 8010784:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010786:	f7fd fe6e 	bl	800e466 <__retarget_lock_acquire_recursive>
 801078a:	89ab      	ldrh	r3, [r5, #12]
 801078c:	071b      	lsls	r3, r3, #28
 801078e:	d501      	bpl.n	8010794 <_vfiprintf_r+0x34>
 8010790:	692b      	ldr	r3, [r5, #16]
 8010792:	b99b      	cbnz	r3, 80107bc <_vfiprintf_r+0x5c>
 8010794:	4629      	mov	r1, r5
 8010796:	4630      	mov	r0, r6
 8010798:	f000 f938 	bl	8010a0c <__swsetup_r>
 801079c:	b170      	cbz	r0, 80107bc <_vfiprintf_r+0x5c>
 801079e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107a0:	07dc      	lsls	r4, r3, #31
 80107a2:	d504      	bpl.n	80107ae <_vfiprintf_r+0x4e>
 80107a4:	f04f 30ff 	mov.w	r0, #4294967295
 80107a8:	b01d      	add	sp, #116	@ 0x74
 80107aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ae:	89ab      	ldrh	r3, [r5, #12]
 80107b0:	0598      	lsls	r0, r3, #22
 80107b2:	d4f7      	bmi.n	80107a4 <_vfiprintf_r+0x44>
 80107b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107b6:	f7fd fe57 	bl	800e468 <__retarget_lock_release_recursive>
 80107ba:	e7f3      	b.n	80107a4 <_vfiprintf_r+0x44>
 80107bc:	2300      	movs	r3, #0
 80107be:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c0:	2320      	movs	r3, #32
 80107c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80107c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80107ca:	2330      	movs	r3, #48	@ 0x30
 80107cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801097c <_vfiprintf_r+0x21c>
 80107d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107d4:	f04f 0901 	mov.w	r9, #1
 80107d8:	4623      	mov	r3, r4
 80107da:	469a      	mov	sl, r3
 80107dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107e0:	b10a      	cbz	r2, 80107e6 <_vfiprintf_r+0x86>
 80107e2:	2a25      	cmp	r2, #37	@ 0x25
 80107e4:	d1f9      	bne.n	80107da <_vfiprintf_r+0x7a>
 80107e6:	ebba 0b04 	subs.w	fp, sl, r4
 80107ea:	d00b      	beq.n	8010804 <_vfiprintf_r+0xa4>
 80107ec:	465b      	mov	r3, fp
 80107ee:	4622      	mov	r2, r4
 80107f0:	4629      	mov	r1, r5
 80107f2:	4630      	mov	r0, r6
 80107f4:	f7ff ffa2 	bl	801073c <__sfputs_r>
 80107f8:	3001      	adds	r0, #1
 80107fa:	f000 80a7 	beq.w	801094c <_vfiprintf_r+0x1ec>
 80107fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010800:	445a      	add	r2, fp
 8010802:	9209      	str	r2, [sp, #36]	@ 0x24
 8010804:	f89a 3000 	ldrb.w	r3, [sl]
 8010808:	2b00      	cmp	r3, #0
 801080a:	f000 809f 	beq.w	801094c <_vfiprintf_r+0x1ec>
 801080e:	2300      	movs	r3, #0
 8010810:	f04f 32ff 	mov.w	r2, #4294967295
 8010814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010818:	f10a 0a01 	add.w	sl, sl, #1
 801081c:	9304      	str	r3, [sp, #16]
 801081e:	9307      	str	r3, [sp, #28]
 8010820:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010824:	931a      	str	r3, [sp, #104]	@ 0x68
 8010826:	4654      	mov	r4, sl
 8010828:	2205      	movs	r2, #5
 801082a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801082e:	4853      	ldr	r0, [pc, #332]	@ (801097c <_vfiprintf_r+0x21c>)
 8010830:	f7ef fcf6 	bl	8000220 <memchr>
 8010834:	9a04      	ldr	r2, [sp, #16]
 8010836:	b9d8      	cbnz	r0, 8010870 <_vfiprintf_r+0x110>
 8010838:	06d1      	lsls	r1, r2, #27
 801083a:	bf44      	itt	mi
 801083c:	2320      	movmi	r3, #32
 801083e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010842:	0713      	lsls	r3, r2, #28
 8010844:	bf44      	itt	mi
 8010846:	232b      	movmi	r3, #43	@ 0x2b
 8010848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801084c:	f89a 3000 	ldrb.w	r3, [sl]
 8010850:	2b2a      	cmp	r3, #42	@ 0x2a
 8010852:	d015      	beq.n	8010880 <_vfiprintf_r+0x120>
 8010854:	9a07      	ldr	r2, [sp, #28]
 8010856:	4654      	mov	r4, sl
 8010858:	2000      	movs	r0, #0
 801085a:	f04f 0c0a 	mov.w	ip, #10
 801085e:	4621      	mov	r1, r4
 8010860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010864:	3b30      	subs	r3, #48	@ 0x30
 8010866:	2b09      	cmp	r3, #9
 8010868:	d94b      	bls.n	8010902 <_vfiprintf_r+0x1a2>
 801086a:	b1b0      	cbz	r0, 801089a <_vfiprintf_r+0x13a>
 801086c:	9207      	str	r2, [sp, #28]
 801086e:	e014      	b.n	801089a <_vfiprintf_r+0x13a>
 8010870:	eba0 0308 	sub.w	r3, r0, r8
 8010874:	fa09 f303 	lsl.w	r3, r9, r3
 8010878:	4313      	orrs	r3, r2
 801087a:	9304      	str	r3, [sp, #16]
 801087c:	46a2      	mov	sl, r4
 801087e:	e7d2      	b.n	8010826 <_vfiprintf_r+0xc6>
 8010880:	9b03      	ldr	r3, [sp, #12]
 8010882:	1d19      	adds	r1, r3, #4
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	9103      	str	r1, [sp, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	bfbb      	ittet	lt
 801088c:	425b      	neglt	r3, r3
 801088e:	f042 0202 	orrlt.w	r2, r2, #2
 8010892:	9307      	strge	r3, [sp, #28]
 8010894:	9307      	strlt	r3, [sp, #28]
 8010896:	bfb8      	it	lt
 8010898:	9204      	strlt	r2, [sp, #16]
 801089a:	7823      	ldrb	r3, [r4, #0]
 801089c:	2b2e      	cmp	r3, #46	@ 0x2e
 801089e:	d10a      	bne.n	80108b6 <_vfiprintf_r+0x156>
 80108a0:	7863      	ldrb	r3, [r4, #1]
 80108a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80108a4:	d132      	bne.n	801090c <_vfiprintf_r+0x1ac>
 80108a6:	9b03      	ldr	r3, [sp, #12]
 80108a8:	1d1a      	adds	r2, r3, #4
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	9203      	str	r2, [sp, #12]
 80108ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80108b2:	3402      	adds	r4, #2
 80108b4:	9305      	str	r3, [sp, #20]
 80108b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801098c <_vfiprintf_r+0x22c>
 80108ba:	7821      	ldrb	r1, [r4, #0]
 80108bc:	2203      	movs	r2, #3
 80108be:	4650      	mov	r0, sl
 80108c0:	f7ef fcae 	bl	8000220 <memchr>
 80108c4:	b138      	cbz	r0, 80108d6 <_vfiprintf_r+0x176>
 80108c6:	9b04      	ldr	r3, [sp, #16]
 80108c8:	eba0 000a 	sub.w	r0, r0, sl
 80108cc:	2240      	movs	r2, #64	@ 0x40
 80108ce:	4082      	lsls	r2, r0
 80108d0:	4313      	orrs	r3, r2
 80108d2:	3401      	adds	r4, #1
 80108d4:	9304      	str	r3, [sp, #16]
 80108d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108da:	4829      	ldr	r0, [pc, #164]	@ (8010980 <_vfiprintf_r+0x220>)
 80108dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108e0:	2206      	movs	r2, #6
 80108e2:	f7ef fc9d 	bl	8000220 <memchr>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	d03f      	beq.n	801096a <_vfiprintf_r+0x20a>
 80108ea:	4b26      	ldr	r3, [pc, #152]	@ (8010984 <_vfiprintf_r+0x224>)
 80108ec:	bb1b      	cbnz	r3, 8010936 <_vfiprintf_r+0x1d6>
 80108ee:	9b03      	ldr	r3, [sp, #12]
 80108f0:	3307      	adds	r3, #7
 80108f2:	f023 0307 	bic.w	r3, r3, #7
 80108f6:	3308      	adds	r3, #8
 80108f8:	9303      	str	r3, [sp, #12]
 80108fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108fc:	443b      	add	r3, r7
 80108fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010900:	e76a      	b.n	80107d8 <_vfiprintf_r+0x78>
 8010902:	fb0c 3202 	mla	r2, ip, r2, r3
 8010906:	460c      	mov	r4, r1
 8010908:	2001      	movs	r0, #1
 801090a:	e7a8      	b.n	801085e <_vfiprintf_r+0xfe>
 801090c:	2300      	movs	r3, #0
 801090e:	3401      	adds	r4, #1
 8010910:	9305      	str	r3, [sp, #20]
 8010912:	4619      	mov	r1, r3
 8010914:	f04f 0c0a 	mov.w	ip, #10
 8010918:	4620      	mov	r0, r4
 801091a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801091e:	3a30      	subs	r2, #48	@ 0x30
 8010920:	2a09      	cmp	r2, #9
 8010922:	d903      	bls.n	801092c <_vfiprintf_r+0x1cc>
 8010924:	2b00      	cmp	r3, #0
 8010926:	d0c6      	beq.n	80108b6 <_vfiprintf_r+0x156>
 8010928:	9105      	str	r1, [sp, #20]
 801092a:	e7c4      	b.n	80108b6 <_vfiprintf_r+0x156>
 801092c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010930:	4604      	mov	r4, r0
 8010932:	2301      	movs	r3, #1
 8010934:	e7f0      	b.n	8010918 <_vfiprintf_r+0x1b8>
 8010936:	ab03      	add	r3, sp, #12
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	462a      	mov	r2, r5
 801093c:	4b12      	ldr	r3, [pc, #72]	@ (8010988 <_vfiprintf_r+0x228>)
 801093e:	a904      	add	r1, sp, #16
 8010940:	4630      	mov	r0, r6
 8010942:	f7fc fff1 	bl	800d928 <_printf_float>
 8010946:	4607      	mov	r7, r0
 8010948:	1c78      	adds	r0, r7, #1
 801094a:	d1d6      	bne.n	80108fa <_vfiprintf_r+0x19a>
 801094c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801094e:	07d9      	lsls	r1, r3, #31
 8010950:	d405      	bmi.n	801095e <_vfiprintf_r+0x1fe>
 8010952:	89ab      	ldrh	r3, [r5, #12]
 8010954:	059a      	lsls	r2, r3, #22
 8010956:	d402      	bmi.n	801095e <_vfiprintf_r+0x1fe>
 8010958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801095a:	f7fd fd85 	bl	800e468 <__retarget_lock_release_recursive>
 801095e:	89ab      	ldrh	r3, [r5, #12]
 8010960:	065b      	lsls	r3, r3, #25
 8010962:	f53f af1f 	bmi.w	80107a4 <_vfiprintf_r+0x44>
 8010966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010968:	e71e      	b.n	80107a8 <_vfiprintf_r+0x48>
 801096a:	ab03      	add	r3, sp, #12
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	462a      	mov	r2, r5
 8010970:	4b05      	ldr	r3, [pc, #20]	@ (8010988 <_vfiprintf_r+0x228>)
 8010972:	a904      	add	r1, sp, #16
 8010974:	4630      	mov	r0, r6
 8010976:	f7fd fa6f 	bl	800de58 <_printf_i>
 801097a:	e7e4      	b.n	8010946 <_vfiprintf_r+0x1e6>
 801097c:	080112a1 	.word	0x080112a1
 8010980:	080112ab 	.word	0x080112ab
 8010984:	0800d929 	.word	0x0800d929
 8010988:	0801073d 	.word	0x0801073d
 801098c:	080112a7 	.word	0x080112a7

08010990 <__swbuf_r>:
 8010990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010992:	460e      	mov	r6, r1
 8010994:	4614      	mov	r4, r2
 8010996:	4605      	mov	r5, r0
 8010998:	b118      	cbz	r0, 80109a2 <__swbuf_r+0x12>
 801099a:	6a03      	ldr	r3, [r0, #32]
 801099c:	b90b      	cbnz	r3, 80109a2 <__swbuf_r+0x12>
 801099e:	f7fd fc07 	bl	800e1b0 <__sinit>
 80109a2:	69a3      	ldr	r3, [r4, #24]
 80109a4:	60a3      	str	r3, [r4, #8]
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	071a      	lsls	r2, r3, #28
 80109aa:	d501      	bpl.n	80109b0 <__swbuf_r+0x20>
 80109ac:	6923      	ldr	r3, [r4, #16]
 80109ae:	b943      	cbnz	r3, 80109c2 <__swbuf_r+0x32>
 80109b0:	4621      	mov	r1, r4
 80109b2:	4628      	mov	r0, r5
 80109b4:	f000 f82a 	bl	8010a0c <__swsetup_r>
 80109b8:	b118      	cbz	r0, 80109c2 <__swbuf_r+0x32>
 80109ba:	f04f 37ff 	mov.w	r7, #4294967295
 80109be:	4638      	mov	r0, r7
 80109c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	6922      	ldr	r2, [r4, #16]
 80109c6:	1a98      	subs	r0, r3, r2
 80109c8:	6963      	ldr	r3, [r4, #20]
 80109ca:	b2f6      	uxtb	r6, r6
 80109cc:	4283      	cmp	r3, r0
 80109ce:	4637      	mov	r7, r6
 80109d0:	dc05      	bgt.n	80109de <__swbuf_r+0x4e>
 80109d2:	4621      	mov	r1, r4
 80109d4:	4628      	mov	r0, r5
 80109d6:	f7ff fdeb 	bl	80105b0 <_fflush_r>
 80109da:	2800      	cmp	r0, #0
 80109dc:	d1ed      	bne.n	80109ba <__swbuf_r+0x2a>
 80109de:	68a3      	ldr	r3, [r4, #8]
 80109e0:	3b01      	subs	r3, #1
 80109e2:	60a3      	str	r3, [r4, #8]
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	6022      	str	r2, [r4, #0]
 80109ea:	701e      	strb	r6, [r3, #0]
 80109ec:	6962      	ldr	r2, [r4, #20]
 80109ee:	1c43      	adds	r3, r0, #1
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d004      	beq.n	80109fe <__swbuf_r+0x6e>
 80109f4:	89a3      	ldrh	r3, [r4, #12]
 80109f6:	07db      	lsls	r3, r3, #31
 80109f8:	d5e1      	bpl.n	80109be <__swbuf_r+0x2e>
 80109fa:	2e0a      	cmp	r6, #10
 80109fc:	d1df      	bne.n	80109be <__swbuf_r+0x2e>
 80109fe:	4621      	mov	r1, r4
 8010a00:	4628      	mov	r0, r5
 8010a02:	f7ff fdd5 	bl	80105b0 <_fflush_r>
 8010a06:	2800      	cmp	r0, #0
 8010a08:	d0d9      	beq.n	80109be <__swbuf_r+0x2e>
 8010a0a:	e7d6      	b.n	80109ba <__swbuf_r+0x2a>

08010a0c <__swsetup_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4b29      	ldr	r3, [pc, #164]	@ (8010ab4 <__swsetup_r+0xa8>)
 8010a10:	4605      	mov	r5, r0
 8010a12:	6818      	ldr	r0, [r3, #0]
 8010a14:	460c      	mov	r4, r1
 8010a16:	b118      	cbz	r0, 8010a20 <__swsetup_r+0x14>
 8010a18:	6a03      	ldr	r3, [r0, #32]
 8010a1a:	b90b      	cbnz	r3, 8010a20 <__swsetup_r+0x14>
 8010a1c:	f7fd fbc8 	bl	800e1b0 <__sinit>
 8010a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a24:	0719      	lsls	r1, r3, #28
 8010a26:	d422      	bmi.n	8010a6e <__swsetup_r+0x62>
 8010a28:	06da      	lsls	r2, r3, #27
 8010a2a:	d407      	bmi.n	8010a3c <__swsetup_r+0x30>
 8010a2c:	2209      	movs	r2, #9
 8010a2e:	602a      	str	r2, [r5, #0]
 8010a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a34:	81a3      	strh	r3, [r4, #12]
 8010a36:	f04f 30ff 	mov.w	r0, #4294967295
 8010a3a:	e033      	b.n	8010aa4 <__swsetup_r+0x98>
 8010a3c:	0758      	lsls	r0, r3, #29
 8010a3e:	d512      	bpl.n	8010a66 <__swsetup_r+0x5a>
 8010a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010a42:	b141      	cbz	r1, 8010a56 <__swsetup_r+0x4a>
 8010a44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a48:	4299      	cmp	r1, r3
 8010a4a:	d002      	beq.n	8010a52 <__swsetup_r+0x46>
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7fe fb77 	bl	800f140 <_free_r>
 8010a52:	2300      	movs	r3, #0
 8010a54:	6363      	str	r3, [r4, #52]	@ 0x34
 8010a56:	89a3      	ldrh	r3, [r4, #12]
 8010a58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010a5c:	81a3      	strh	r3, [r4, #12]
 8010a5e:	2300      	movs	r3, #0
 8010a60:	6063      	str	r3, [r4, #4]
 8010a62:	6923      	ldr	r3, [r4, #16]
 8010a64:	6023      	str	r3, [r4, #0]
 8010a66:	89a3      	ldrh	r3, [r4, #12]
 8010a68:	f043 0308 	orr.w	r3, r3, #8
 8010a6c:	81a3      	strh	r3, [r4, #12]
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	b94b      	cbnz	r3, 8010a86 <__swsetup_r+0x7a>
 8010a72:	89a3      	ldrh	r3, [r4, #12]
 8010a74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a7c:	d003      	beq.n	8010a86 <__swsetup_r+0x7a>
 8010a7e:	4621      	mov	r1, r4
 8010a80:	4628      	mov	r0, r5
 8010a82:	f000 f883 	bl	8010b8c <__smakebuf_r>
 8010a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a8a:	f013 0201 	ands.w	r2, r3, #1
 8010a8e:	d00a      	beq.n	8010aa6 <__swsetup_r+0x9a>
 8010a90:	2200      	movs	r2, #0
 8010a92:	60a2      	str	r2, [r4, #8]
 8010a94:	6962      	ldr	r2, [r4, #20]
 8010a96:	4252      	negs	r2, r2
 8010a98:	61a2      	str	r2, [r4, #24]
 8010a9a:	6922      	ldr	r2, [r4, #16]
 8010a9c:	b942      	cbnz	r2, 8010ab0 <__swsetup_r+0xa4>
 8010a9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010aa2:	d1c5      	bne.n	8010a30 <__swsetup_r+0x24>
 8010aa4:	bd38      	pop	{r3, r4, r5, pc}
 8010aa6:	0799      	lsls	r1, r3, #30
 8010aa8:	bf58      	it	pl
 8010aaa:	6962      	ldrpl	r2, [r4, #20]
 8010aac:	60a2      	str	r2, [r4, #8]
 8010aae:	e7f4      	b.n	8010a9a <__swsetup_r+0x8e>
 8010ab0:	2000      	movs	r0, #0
 8010ab2:	e7f7      	b.n	8010aa4 <__swsetup_r+0x98>
 8010ab4:	20000300 	.word	0x20000300

08010ab8 <_raise_r>:
 8010ab8:	291f      	cmp	r1, #31
 8010aba:	b538      	push	{r3, r4, r5, lr}
 8010abc:	4605      	mov	r5, r0
 8010abe:	460c      	mov	r4, r1
 8010ac0:	d904      	bls.n	8010acc <_raise_r+0x14>
 8010ac2:	2316      	movs	r3, #22
 8010ac4:	6003      	str	r3, [r0, #0]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ace:	b112      	cbz	r2, 8010ad6 <_raise_r+0x1e>
 8010ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ad4:	b94b      	cbnz	r3, 8010aea <_raise_r+0x32>
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f000 f830 	bl	8010b3c <_getpid_r>
 8010adc:	4622      	mov	r2, r4
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae6:	f000 b817 	b.w	8010b18 <_kill_r>
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d00a      	beq.n	8010b04 <_raise_r+0x4c>
 8010aee:	1c59      	adds	r1, r3, #1
 8010af0:	d103      	bne.n	8010afa <_raise_r+0x42>
 8010af2:	2316      	movs	r3, #22
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	2001      	movs	r0, #1
 8010af8:	e7e7      	b.n	8010aca <_raise_r+0x12>
 8010afa:	2100      	movs	r1, #0
 8010afc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b00:	4620      	mov	r0, r4
 8010b02:	4798      	blx	r3
 8010b04:	2000      	movs	r0, #0
 8010b06:	e7e0      	b.n	8010aca <_raise_r+0x12>

08010b08 <raise>:
 8010b08:	4b02      	ldr	r3, [pc, #8]	@ (8010b14 <raise+0xc>)
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	f7ff bfd3 	b.w	8010ab8 <_raise_r>
 8010b12:	bf00      	nop
 8010b14:	20000300 	.word	0x20000300

08010b18 <_kill_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4d07      	ldr	r5, [pc, #28]	@ (8010b38 <_kill_r+0x20>)
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4608      	mov	r0, r1
 8010b22:	4611      	mov	r1, r2
 8010b24:	602b      	str	r3, [r5, #0]
 8010b26:	f7f1 fc29 	bl	800237c <_kill>
 8010b2a:	1c43      	adds	r3, r0, #1
 8010b2c:	d102      	bne.n	8010b34 <_kill_r+0x1c>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b103      	cbz	r3, 8010b34 <_kill_r+0x1c>
 8010b32:	6023      	str	r3, [r4, #0]
 8010b34:	bd38      	pop	{r3, r4, r5, pc}
 8010b36:	bf00      	nop
 8010b38:	20004cf8 	.word	0x20004cf8

08010b3c <_getpid_r>:
 8010b3c:	f7f1 bc16 	b.w	800236c <_getpid>

08010b40 <__swhatbuf_r>:
 8010b40:	b570      	push	{r4, r5, r6, lr}
 8010b42:	460c      	mov	r4, r1
 8010b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b48:	2900      	cmp	r1, #0
 8010b4a:	b096      	sub	sp, #88	@ 0x58
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	461e      	mov	r6, r3
 8010b50:	da0d      	bge.n	8010b6e <__swhatbuf_r+0x2e>
 8010b52:	89a3      	ldrh	r3, [r4, #12]
 8010b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010b58:	f04f 0100 	mov.w	r1, #0
 8010b5c:	bf14      	ite	ne
 8010b5e:	2340      	movne	r3, #64	@ 0x40
 8010b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010b64:	2000      	movs	r0, #0
 8010b66:	6031      	str	r1, [r6, #0]
 8010b68:	602b      	str	r3, [r5, #0]
 8010b6a:	b016      	add	sp, #88	@ 0x58
 8010b6c:	bd70      	pop	{r4, r5, r6, pc}
 8010b6e:	466a      	mov	r2, sp
 8010b70:	f000 f848 	bl	8010c04 <_fstat_r>
 8010b74:	2800      	cmp	r0, #0
 8010b76:	dbec      	blt.n	8010b52 <__swhatbuf_r+0x12>
 8010b78:	9901      	ldr	r1, [sp, #4]
 8010b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010b82:	4259      	negs	r1, r3
 8010b84:	4159      	adcs	r1, r3
 8010b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b8a:	e7eb      	b.n	8010b64 <__swhatbuf_r+0x24>

08010b8c <__smakebuf_r>:
 8010b8c:	898b      	ldrh	r3, [r1, #12]
 8010b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b90:	079d      	lsls	r5, r3, #30
 8010b92:	4606      	mov	r6, r0
 8010b94:	460c      	mov	r4, r1
 8010b96:	d507      	bpl.n	8010ba8 <__smakebuf_r+0x1c>
 8010b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010b9c:	6023      	str	r3, [r4, #0]
 8010b9e:	6123      	str	r3, [r4, #16]
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	6163      	str	r3, [r4, #20]
 8010ba4:	b003      	add	sp, #12
 8010ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba8:	ab01      	add	r3, sp, #4
 8010baa:	466a      	mov	r2, sp
 8010bac:	f7ff ffc8 	bl	8010b40 <__swhatbuf_r>
 8010bb0:	9f00      	ldr	r7, [sp, #0]
 8010bb2:	4605      	mov	r5, r0
 8010bb4:	4639      	mov	r1, r7
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	f7fb ff7c 	bl	800cab4 <_malloc_r>
 8010bbc:	b948      	cbnz	r0, 8010bd2 <__smakebuf_r+0x46>
 8010bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bc2:	059a      	lsls	r2, r3, #22
 8010bc4:	d4ee      	bmi.n	8010ba4 <__smakebuf_r+0x18>
 8010bc6:	f023 0303 	bic.w	r3, r3, #3
 8010bca:	f043 0302 	orr.w	r3, r3, #2
 8010bce:	81a3      	strh	r3, [r4, #12]
 8010bd0:	e7e2      	b.n	8010b98 <__smakebuf_r+0xc>
 8010bd2:	89a3      	ldrh	r3, [r4, #12]
 8010bd4:	6020      	str	r0, [r4, #0]
 8010bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bda:	81a3      	strh	r3, [r4, #12]
 8010bdc:	9b01      	ldr	r3, [sp, #4]
 8010bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010be2:	b15b      	cbz	r3, 8010bfc <__smakebuf_r+0x70>
 8010be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010be8:	4630      	mov	r0, r6
 8010bea:	f000 f81d 	bl	8010c28 <_isatty_r>
 8010bee:	b128      	cbz	r0, 8010bfc <__smakebuf_r+0x70>
 8010bf0:	89a3      	ldrh	r3, [r4, #12]
 8010bf2:	f023 0303 	bic.w	r3, r3, #3
 8010bf6:	f043 0301 	orr.w	r3, r3, #1
 8010bfa:	81a3      	strh	r3, [r4, #12]
 8010bfc:	89a3      	ldrh	r3, [r4, #12]
 8010bfe:	431d      	orrs	r5, r3
 8010c00:	81a5      	strh	r5, [r4, #12]
 8010c02:	e7cf      	b.n	8010ba4 <__smakebuf_r+0x18>

08010c04 <_fstat_r>:
 8010c04:	b538      	push	{r3, r4, r5, lr}
 8010c06:	4d07      	ldr	r5, [pc, #28]	@ (8010c24 <_fstat_r+0x20>)
 8010c08:	2300      	movs	r3, #0
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	4608      	mov	r0, r1
 8010c0e:	4611      	mov	r1, r2
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	f7f1 fc13 	bl	800243c <_fstat>
 8010c16:	1c43      	adds	r3, r0, #1
 8010c18:	d102      	bne.n	8010c20 <_fstat_r+0x1c>
 8010c1a:	682b      	ldr	r3, [r5, #0]
 8010c1c:	b103      	cbz	r3, 8010c20 <_fstat_r+0x1c>
 8010c1e:	6023      	str	r3, [r4, #0]
 8010c20:	bd38      	pop	{r3, r4, r5, pc}
 8010c22:	bf00      	nop
 8010c24:	20004cf8 	.word	0x20004cf8

08010c28 <_isatty_r>:
 8010c28:	b538      	push	{r3, r4, r5, lr}
 8010c2a:	4d06      	ldr	r5, [pc, #24]	@ (8010c44 <_isatty_r+0x1c>)
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	4604      	mov	r4, r0
 8010c30:	4608      	mov	r0, r1
 8010c32:	602b      	str	r3, [r5, #0]
 8010c34:	f7f1 fc12 	bl	800245c <_isatty>
 8010c38:	1c43      	adds	r3, r0, #1
 8010c3a:	d102      	bne.n	8010c42 <_isatty_r+0x1a>
 8010c3c:	682b      	ldr	r3, [r5, #0]
 8010c3e:	b103      	cbz	r3, 8010c42 <_isatty_r+0x1a>
 8010c40:	6023      	str	r3, [r4, #0]
 8010c42:	bd38      	pop	{r3, r4, r5, pc}
 8010c44:	20004cf8 	.word	0x20004cf8

08010c48 <_init>:
 8010c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c4a:	bf00      	nop
 8010c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c4e:	bc08      	pop	{r3}
 8010c50:	469e      	mov	lr, r3
 8010c52:	4770      	bx	lr

08010c54 <_fini>:
 8010c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c56:	bf00      	nop
 8010c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c5a:	bc08      	pop	{r3}
 8010c5c:	469e      	mov	lr, r3
 8010c5e:	4770      	bx	lr
