
STM Bench Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddc4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800dfa8  0800dfa8  0000efa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e608  0800e608  0001034c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e608  0800e608  0000f608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e610  0800e610  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e614  0800e614  0000f614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  0800e618  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000495c  2000034c  0800e964  0001034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ca8  0800e964  00010ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001756d  00000000  00000000  0001037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d81  00000000  00000000  000278e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0002b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ee1  00000000  00000000  0002da47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c52  00000000  00000000  00034928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7707  00000000  00000000  0004d57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00124c81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006640  00000000  00000000  00124cc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012b304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000034c 	.word	0x2000034c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800df8c 	.word	0x0800df8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000350 	.word	0x20000350
 800021c:	0800df8c 	.word	0x0800df8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f001 f9a7 	bl	8001f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 fd20 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 fe80 	bl	8001908 <MX_GPIO_Init>
  MX_RTC_Init();
 8000c08:	f000 fe48 	bl	800189c <MX_RTC_Init>
  MX_USB_Device_Init();
 8000c0c:	f009 fdd8 	bl	800a7c0 <MX_USB_Device_Init>
  MX_ADC1_Init();
 8000c10:	f000 fd66 	bl	80016e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c14:	f000 fddc 	bl	80017d0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_OTG_FS_Init();
 8000c18:	f000 fcd0 	bl	80015bc <MX_USB_OTG_FS_Init>
  getVref(4000);
 8000c1c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000c20:	f000 f9e8 	bl	8000ff4 <getVref>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
    /* USER CODE END WHILE */
	  /* USER CODE END WHILE */
	   	 if (VCP_retrieveInputData(hexBuf,&pos32) != 0)
 8000c24:	491a      	ldr	r1, [pc, #104]	@ (8000c90 <main+0x98>)
 8000c26:	481b      	ldr	r0, [pc, #108]	@ (8000c94 <main+0x9c>)
 8000c28:	f009 feac 	bl	800a984 <VCP_retrieveInputData>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d02a      	beq.n	8000c88 <main+0x90>
	   	 {
	   		 // you could do data processing here.
	   		 //by demo, i just send it back to PC
	   		 sprintf(strBuf,"%s", hexBuf);
 8000c32:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <main+0x9c>)
 8000c34:	4918      	ldr	r1, [pc, #96]	@ (8000c98 <main+0xa0>)
 8000c36:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <main+0xa4>)
 8000c38:	f00b f850 	bl	800bcdc <siprintf>
	   		 nullint8(hexBuf,255);
 8000c3c:	21ff      	movs	r1, #255	@ 0xff
 8000c3e:	4815      	ldr	r0, [pc, #84]	@ (8000c94 <main+0x9c>)
 8000c40:	f000 f94c 	bl	8000edc <nullint8>
	   		 // combine the new chars with the old
	   		 sprintf(strOutBuf, "%s%s", SerialStr, strBuf);
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <main+0xa4>)
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <main+0xa8>)
 8000c48:	4916      	ldr	r1, [pc, #88]	@ (8000ca4 <main+0xac>)
 8000c4a:	4817      	ldr	r0, [pc, #92]	@ (8000ca8 <main+0xb0>)
 8000c4c:	f00b f846 	bl	800bcdc <siprintf>
	   		 strcpy(SerialStr, strOutBuf);
 8000c50:	4915      	ldr	r1, [pc, #84]	@ (8000ca8 <main+0xb0>)
 8000c52:	4813      	ldr	r0, [pc, #76]	@ (8000ca0 <main+0xa8>)
 8000c54:	f00b f947 	bl	800bee6 <strcpy>
	   		 nullstr(strOutBuf,1024);
 8000c58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c5c:	4812      	ldr	r0, [pc, #72]	@ (8000ca8 <main+0xb0>)
 8000c5e:	f000 f921 	bl	8000ea4 <nullstr>
	   		 nullstr(strBuf,1024);
 8000c62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c66:	480d      	ldr	r0, [pc, #52]	@ (8000c9c <main+0xa4>)
 8000c68:	f000 f91c 	bl	8000ea4 <nullstr>
	   		 // loopback raw
	   		 //sprintf(strOutBuf,"data ='%s' (%d)\n\r", strBuf, strlen(strBuf));
	   		 //SendStrToUSB(strOutBuf);
	   		 // loopback current cmd

	   		 nullstr(strOutBuf,1024);
 8000c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c70:	480d      	ldr	r0, [pc, #52]	@ (8000ca8 <main+0xb0>)
 8000c72:	f000 f917 	bl	8000ea4 <nullstr>
	   		 if (containsChar('\n', SerialStr) >= 0){
 8000c76:	490a      	ldr	r1, [pc, #40]	@ (8000ca0 <main+0xa8>)
 8000c78:	200a      	movs	r0, #10
 8000c7a:	f000 fc33 	bl	80014e4 <containsChar>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db01      	blt.n	8000c88 <main+0x90>
	   			 HandleCmd();
 8000c84:	f000 f812 	bl	8000cac <HandleCmd>
	   		 }
	   	 }
	   	 HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f001 f9d1 	bl	8002030 <HAL_Delay>
	   	 if (VCP_retrieveInputData(hexBuf,&pos32) != 0)
 8000c8e:	e7c9      	b.n	8000c24 <main+0x2c>
 8000c90:	20001168 	.word	0x20001168
 8000c94:	20001068 	.word	0x20001068
 8000c98:	0800dfa8 	.word	0x0800dfa8
 8000c9c:	20000468 	.word	0x20000468
 8000ca0:	20000868 	.word	0x20000868
 8000ca4:	0800dfac 	.word	0x0800dfac
 8000ca8:	20000c68 	.word	0x20000c68

08000cac <HandleCmd>:
  * MEAS:VOLT:[X]
  * MEAS:CURR:[X]
  * CTRL:[X] <OFF|ON>
  * OVP:[X]
  * */
 void HandleCmd(){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af02      	add	r7, sp, #8
	if (containsStr("MEAS:", SerialStr) >= 0){
 8000cb2:	4969      	ldr	r1, [pc, #420]	@ (8000e58 <HandleCmd+0x1ac>)
 8000cb4:	4869      	ldr	r0, [pc, #420]	@ (8000e5c <HandleCmd+0x1b0>)
 8000cb6:	f000 fc34 	bl	8001522 <containsStr>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db76      	blt.n	8000dae <HandleCmd+0x102>
		 // Get Mode
		 // 0 = Current
		 // 1 = Voltage
		 // 2 = Internal Ref
		 int8_t Mode = -1;
 8000cc0:	23ff      	movs	r3, #255	@ 0xff
 8000cc2:	73fb      	strb	r3, [r7, #15]
		 if (containsStr("VOLT:", SerialStr) == 5){
 8000cc4:	4964      	ldr	r1, [pc, #400]	@ (8000e58 <HandleCmd+0x1ac>)
 8000cc6:	4866      	ldr	r0, [pc, #408]	@ (8000e60 <HandleCmd+0x1b4>)
 8000cc8:	f000 fc2b 	bl	8001522 <containsStr>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d102      	bne.n	8000cd8 <HandleCmd+0x2c>
			 Mode = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
 8000cd6:	e023      	b.n	8000d20 <HandleCmd+0x74>
		 }else if (containsStr("CURR:", SerialStr) == 5){
 8000cd8:	495f      	ldr	r1, [pc, #380]	@ (8000e58 <HandleCmd+0x1ac>)
 8000cda:	4862      	ldr	r0, [pc, #392]	@ (8000e64 <HandleCmd+0x1b8>)
 8000cdc:	f000 fc21 	bl	8001522 <containsStr>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d102      	bne.n	8000cec <HandleCmd+0x40>
			 Mode = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	73fb      	strb	r3, [r7, #15]
 8000cea:	e019      	b.n	8000d20 <HandleCmd+0x74>
		 }else if (containsStr("VREF", SerialStr) == 5){
 8000cec:	495a      	ldr	r1, [pc, #360]	@ (8000e58 <HandleCmd+0x1ac>)
 8000cee:	485e      	ldr	r0, [pc, #376]	@ (8000e68 <HandleCmd+0x1bc>)
 8000cf0:	f000 fc17 	bl	8001522 <containsStr>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b05      	cmp	r3, #5
 8000cf8:	d109      	bne.n	8000d0e <HandleCmd+0x62>
			 getVref(4000);
 8000cfa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000cfe:	f000 f979 	bl	8000ff4 <getVref>
			 nullstr(SerialStr, 1024);
 8000d02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d06:	4854      	ldr	r0, [pc, #336]	@ (8000e58 <HandleCmd+0x1ac>)
 8000d08:	f000 f8cc 	bl	8000ea4 <nullstr>
			 return;
 8000d0c:	e0a0      	b.n	8000e50 <HandleCmd+0x1a4>
		 }else{
			SendStrToUSB("INVALID COMMAND\r\nERROR:-3\r\n");
 8000d0e:	4857      	ldr	r0, [pc, #348]	@ (8000e6c <HandleCmd+0x1c0>)
 8000d10:	f000 fc27 	bl	8001562 <SendStrToUSB>
			nullstr(SerialStr, 1024);
 8000d14:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d18:	484f      	ldr	r0, [pc, #316]	@ (8000e58 <HandleCmd+0x1ac>)
 8000d1a:	f000 f8c3 	bl	8000ea4 <nullstr>
			return;
 8000d1e:	e097      	b.n	8000e50 <HandleCmd+0x1a4>
		 }
		 sprintf(strOutBuf,"Mode: %d\n\r", Mode);
 8000d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4952      	ldr	r1, [pc, #328]	@ (8000e70 <HandleCmd+0x1c4>)
 8000d28:	4852      	ldr	r0, [pc, #328]	@ (8000e74 <HandleCmd+0x1c8>)
 8000d2a:	f00a ffd7 	bl	800bcdc <siprintf>
		 SendStrToUSB(strOutBuf);
 8000d2e:	4851      	ldr	r0, [pc, #324]	@ (8000e74 <HandleCmd+0x1c8>)
 8000d30:	f000 fc17 	bl	8001562 <SendStrToUSB>

		 // Output Line
		 if (strlen(SerialStr) >= 11){
 8000d34:	4848      	ldr	r0, [pc, #288]	@ (8000e58 <HandleCmd+0x1ac>)
 8000d36:	f7ff fac3 	bl	80002c0 <strlen>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b0a      	cmp	r3, #10
 8000d3e:	d92d      	bls.n	8000d9c <HandleCmd+0xf0>
			 uint8_t OutputChannel = SerialStr[10] - 48;
 8000d40:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <HandleCmd+0x1ac>)
 8000d42:	7a9b      	ldrb	r3, [r3, #10]
 8000d44:	3b30      	subs	r3, #48	@ 0x30
 8000d46:	737b      	strb	r3, [r7, #13]
			 if (OutputChannel >= 0 && OutputChannel <= 3){
 8000d48:	7b7b      	ldrb	r3, [r7, #13]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d81d      	bhi.n	8000d8a <HandleCmd+0xde>
				 float value = Measure(Mode, OutputChannel);
 8000d4e:	7b7a      	ldrb	r2, [r7, #13]
 8000d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f9ec 	bl	8001134 <Measure>
 8000d5c:	ed87 0a02 	vstr	s0, [r7, #8]
				 sprintf(strOutBuf, "%0.6f%s\r\n", value, Mode == 1 ? "A" : "V");
 8000d60:	68b8      	ldr	r0, [r7, #8]
 8000d62:	f7ff fc19 	bl	8000598 <__aeabi_f2d>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8000d6e:	2901      	cmp	r1, #1
 8000d70:	d101      	bne.n	8000d76 <HandleCmd+0xca>
 8000d72:	4941      	ldr	r1, [pc, #260]	@ (8000e78 <HandleCmd+0x1cc>)
 8000d74:	e000      	b.n	8000d78 <HandleCmd+0xcc>
 8000d76:	4941      	ldr	r1, [pc, #260]	@ (8000e7c <HandleCmd+0x1d0>)
 8000d78:	9100      	str	r1, [sp, #0]
 8000d7a:	4941      	ldr	r1, [pc, #260]	@ (8000e80 <HandleCmd+0x1d4>)
 8000d7c:	483d      	ldr	r0, [pc, #244]	@ (8000e74 <HandleCmd+0x1c8>)
 8000d7e:	f00a ffad 	bl	800bcdc <siprintf>
				 SendStrToUSB(strOutBuf);
 8000d82:	483c      	ldr	r0, [pc, #240]	@ (8000e74 <HandleCmd+0x1c8>)
 8000d84:	f000 fbed 	bl	8001562 <SendStrToUSB>
 8000d88:	e011      	b.n	8000dae <HandleCmd+0x102>
			 }else{
				SendStrToUSB("INVALID COMMAND\r\nERROR:-1\r\n");
 8000d8a:	483e      	ldr	r0, [pc, #248]	@ (8000e84 <HandleCmd+0x1d8>)
 8000d8c:	f000 fbe9 	bl	8001562 <SendStrToUSB>
				nullstr(SerialStr, 1024);
 8000d90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d94:	4830      	ldr	r0, [pc, #192]	@ (8000e58 <HandleCmd+0x1ac>)
 8000d96:	f000 f885 	bl	8000ea4 <nullstr>
				return;
 8000d9a:	e059      	b.n	8000e50 <HandleCmd+0x1a4>
			 }
		 }else{
			SendStrToUSB("INVALID COMMAND\r\nERROR:-2\r\n");
 8000d9c:	483a      	ldr	r0, [pc, #232]	@ (8000e88 <HandleCmd+0x1dc>)
 8000d9e:	f000 fbe0 	bl	8001562 <SendStrToUSB>
			nullstr(SerialStr, 1024);
 8000da2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000da6:	482c      	ldr	r0, [pc, #176]	@ (8000e58 <HandleCmd+0x1ac>)
 8000da8:	f000 f87c 	bl	8000ea4 <nullstr>
			return;
 8000dac:	e050      	b.n	8000e50 <HandleCmd+0x1a4>
		 }

	 }

	if (containsStr("CTRL:", SerialStr) >= 0){
 8000dae:	492a      	ldr	r1, [pc, #168]	@ (8000e58 <HandleCmd+0x1ac>)
 8000db0:	4836      	ldr	r0, [pc, #216]	@ (8000e8c <HandleCmd+0x1e0>)
 8000db2:	f000 fbb6 	bl	8001522 <containsStr>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db44      	blt.n	8000e46 <HandleCmd+0x19a>
		 if (strlen(SerialStr) >= 6){
 8000dbc:	4826      	ldr	r0, [pc, #152]	@ (8000e58 <HandleCmd+0x1ac>)
 8000dbe:	f7ff fa7f 	bl	80002c0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d935      	bls.n	8000e34 <HandleCmd+0x188>
			 // Channel
			uint8_t OutputChannel = SerialStr[5] - 48;
 8000dc8:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <HandleCmd+0x1ac>)
 8000dca:	795b      	ldrb	r3, [r3, #5]
 8000dcc:	3b30      	subs	r3, #48	@ 0x30
 8000dce:	71fb      	strb	r3, [r7, #7]
			 if (!(OutputChannel >= 0 && OutputChannel <= 3)){
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	d908      	bls.n	8000de8 <HandleCmd+0x13c>
				 SendStrToUSB("INVALID COMMAND\r\nERROR:-7\r\n");
 8000dd6:	482e      	ldr	r0, [pc, #184]	@ (8000e90 <HandleCmd+0x1e4>)
 8000dd8:	f000 fbc3 	bl	8001562 <SendStrToUSB>
					nullstr(SerialStr, 1024);
 8000ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de0:	481d      	ldr	r0, [pc, #116]	@ (8000e58 <HandleCmd+0x1ac>)
 8000de2:	f000 f85f 	bl	8000ea4 <nullstr>
				 return;
 8000de6:	e033      	b.n	8000e50 <HandleCmd+0x1a4>
			 }
			 // New State
			 uint8_t State = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]
			 if (containsStr(" ON", SerialStr)){
 8000dec:	491a      	ldr	r1, [pc, #104]	@ (8000e58 <HandleCmd+0x1ac>)
 8000dee:	4829      	ldr	r0, [pc, #164]	@ (8000e94 <HandleCmd+0x1e8>)
 8000df0:	f000 fb97 	bl	8001522 <containsStr>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HandleCmd+0x154>
				 State = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	e012      	b.n	8000e26 <HandleCmd+0x17a>
			 }else if (containsStr(" OFF", SerialStr)){
 8000e00:	4915      	ldr	r1, [pc, #84]	@ (8000e58 <HandleCmd+0x1ac>)
 8000e02:	4825      	ldr	r0, [pc, #148]	@ (8000e98 <HandleCmd+0x1ec>)
 8000e04:	f000 fb8d 	bl	8001522 <containsStr>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d002      	beq.n	8000e14 <HandleCmd+0x168>
				 State = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73bb      	strb	r3, [r7, #14]
 8000e12:	e008      	b.n	8000e26 <HandleCmd+0x17a>
			 }else{
				 SendStrToUSB("INVALID COMMAND\r\nERROR:-9\r\n");
 8000e14:	4821      	ldr	r0, [pc, #132]	@ (8000e9c <HandleCmd+0x1f0>)
 8000e16:	f000 fba4 	bl	8001562 <SendStrToUSB>
					nullstr(SerialStr, 1024);
 8000e1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1e:	480e      	ldr	r0, [pc, #56]	@ (8000e58 <HandleCmd+0x1ac>)
 8000e20:	f000 f840 	bl	8000ea4 <nullstr>
				 return;
 8000e24:	e014      	b.n	8000e50 <HandleCmd+0x1a4>
			 }

			 Output(OutputChannel, State);
 8000e26:	7bba      	ldrb	r2, [r7, #14]
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 f871 	bl	8000f14 <Output>
 8000e32:	e008      	b.n	8000e46 <HandleCmd+0x19a>

		 }else{
			SendStrToUSB("INVALID COMMAND\r\nERROR:-8\r\n");
 8000e34:	481a      	ldr	r0, [pc, #104]	@ (8000ea0 <HandleCmd+0x1f4>)
 8000e36:	f000 fb94 	bl	8001562 <SendStrToUSB>
			nullstr(SerialStr, 1024);
 8000e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <HandleCmd+0x1ac>)
 8000e40:	f000 f830 	bl	8000ea4 <nullstr>
			return;
 8000e44:	e004      	b.n	8000e50 <HandleCmd+0x1a4>
		 }

	 }
	nullstr(SerialStr, 1024);
 8000e46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e4a:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <HandleCmd+0x1ac>)
 8000e4c:	f000 f82a 	bl	8000ea4 <nullstr>
 }
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000868 	.word	0x20000868
 8000e5c:	0800dfb4 	.word	0x0800dfb4
 8000e60:	0800dfbc 	.word	0x0800dfbc
 8000e64:	0800dfc4 	.word	0x0800dfc4
 8000e68:	0800dfcc 	.word	0x0800dfcc
 8000e6c:	0800dfd4 	.word	0x0800dfd4
 8000e70:	0800dff0 	.word	0x0800dff0
 8000e74:	20000c68 	.word	0x20000c68
 8000e78:	0800dffc 	.word	0x0800dffc
 8000e7c:	0800e000 	.word	0x0800e000
 8000e80:	0800e004 	.word	0x0800e004
 8000e84:	0800e010 	.word	0x0800e010
 8000e88:	0800e02c 	.word	0x0800e02c
 8000e8c:	0800e048 	.word	0x0800e048
 8000e90:	0800e050 	.word	0x0800e050
 8000e94:	0800e06c 	.word	0x0800e06c
 8000e98:	0800e070 	.word	0x0800e070
 8000e9c:	0800e078 	.word	0x0800e078
 8000ea0:	0800e094 	.word	0x0800e094

08000ea4 <nullstr>:

 void nullstr(char* str, uint16_t size){
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < size; i++){
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e007      	b.n	8000ec6 <nullstr+0x22>
		str[i] = '\0';
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf3      	blt.n	8000eb6 <nullstr+0x12>
	}
 }
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <nullint8>:
 void nullint8(uint8_t* pointer, uint16_t size){
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < size; i++){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e007      	b.n	8000efe <nullint8+0x22>
		pointer[i] = 0;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++){
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbf3      	blt.n	8000eee <nullint8+0x12>
	}
 }
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <Output>:

 void Output(uint8_t Channel, uint8_t State){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0c4      	sub	sp, #272	@ 0x110
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f20:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f2a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f2e:	460a      	mov	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
	GPIO_TypeDef* port;
	uint8_t pin = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
	switch(Channel){
 8000f38:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f3c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d828      	bhi.n	8000f98 <Output+0x84>
 8000f46:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <Output+0x38>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	08000f6d 	.word	0x08000f6d
 8000f54:	08000f7d 	.word	0x08000f7d
 8000f58:	08000f8b 	.word	0x08000f8b
		case Vadj:
			port = RelayPort0;
 8000f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			pin = RelayPin0;
 8000f64:	2309      	movs	r3, #9
 8000f66:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
			break;
 8000f6a:	e019      	b.n	8000fa0 <Output+0x8c>
		case TwelveV:
			port = RelayPort1;
 8000f6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			pin = RelayPin1;
 8000f74:	230b      	movs	r3, #11
 8000f76:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
			break;
 8000f7a:	e011      	b.n	8000fa0 <Output+0x8c>
		case FiveV:
			port = RelayPort2;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <Output+0xd0>)
 8000f7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			pin = RelayPin2;
 8000f82:	230b      	movs	r3, #11
 8000f84:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
			break;
 8000f88:	e00a      	b.n	8000fa0 <Output+0x8c>
		case ThreeV3:
			port = RelayPort3;
 8000f8a:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <Output+0xd4>)
 8000f8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			pin = RelayPin3;
 8000f90:	2304      	movs	r3, #4
 8000f92:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
			break;
 8000f96:	e003      	b.n	8000fa0 <Output+0x8c>
		default:
			SendStrToUSB("INVALID COMMAND\r\nERROR:-10\r\n");
 8000f98:	4814      	ldr	r0, [pc, #80]	@ (8000fec <Output+0xd8>)
 8000f9a:	f000 fae2 	bl	8001562 <SendStrToUSB>
 8000f9e:	e01d      	b.n	8000fdc <Output+0xc8>
			return;
	}
	HAL_GPIO_WritePin(port, pin, State);
 8000fa0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000faa:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000fb6:	f002 fdcd 	bl	8003b54 <HAL_GPIO_WritePin>
	char output[255];
	sprintf(output, "Set Pin: %d to %d\r\n", pin, State);
 8000fba:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f107 000c 	add.w	r0, r7, #12
 8000fcc:	4908      	ldr	r1, [pc, #32]	@ (8000ff0 <Output+0xdc>)
 8000fce:	f00a fe85 	bl	800bcdc <siprintf>
	SendStrToUSB(output);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fac3 	bl	8001562 <SendStrToUSB>
 }
 8000fdc:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	0800e0b0 	.word	0x0800e0b0
 8000ff0:	0800e0d0 	.word	0x0800e0d0

08000ff4 <getVref>:

 float getVref(uint16_t Samples){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]


	ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	2220      	movs	r2, #32
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00a fecb 	bl	800bda2 <memset>

	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800100c:	4b39      	ldr	r3, [pc, #228]	@ (80010f4 <getVref+0x100>)
 800100e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001010:	2306      	movs	r3, #6
 8001012:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001018:	237f      	movs	r3, #127	@ 0x7f
 800101a:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101c:	2304      	movs	r3, #4
 800101e:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]

	float adcAvg = 0UL;
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
		for(uint16_t i = 0; i < Samples; i++){
 800102a:	2300      	movs	r3, #0
 800102c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800102e:	e027      	b.n	8001080 <getVref+0x8c>

			// Take reading
			// Start ADC Conversion
			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001030:	f107 0308 	add.w	r3, r7, #8
 8001034:	4619      	mov	r1, r3
 8001036:	4830      	ldr	r0, [pc, #192]	@ (80010f8 <getVref+0x104>)
 8001038:	f001 fdba 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <getVref+0x52>
			{
				Error_Handler();
 8001042:	f000 fd01 	bl	8001a48 <Error_Handler>
			}
			if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001046:	482c      	ldr	r0, [pc, #176]	@ (80010f8 <getVref+0x104>)
 8001048:	f001 fc10 	bl	800286c <HAL_ADC_Start>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <getVref+0x62>
			{
				Error_Handler();
 8001052:	f000 fcf9 	bl	8001a48 <Error_Handler>
			}
			 // Wait for conversion to complete
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001056:	f04f 31ff 	mov.w	r1, #4294967295
 800105a:	4827      	ldr	r0, [pc, #156]	@ (80010f8 <getVref+0x104>)
 800105c:	f001 fcc2 	bl	80029e4 <HAL_ADC_PollForConversion>

			// Get ADC reading
			// Assuming Vref is 3.3V and 12-bit resolution

			adcAvg += (float)HAL_ADC_GetValue(&hadc1);
 8001060:	4825      	ldr	r0, [pc, #148]	@ (80010f8 <getVref+0x104>)
 8001062:	f001 fd97 	bl	8002b94 <HAL_ADC_GetValue>
 8001066:	ee07 0a90 	vmov	s15, r0
 800106a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800106e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		for(uint16_t i = 0; i < Samples; i++){
 800107a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800107c:	3301      	adds	r3, #1
 800107e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001080:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3d3      	bcc.n	8001030 <getVref+0x3c>

		}
		adcAvg /= Samples;
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// VREFINT CAL
	sprintf(strOutBuf, "VREFINT Cal: %0.6f \r\n", (float)*getVrefCalData(0));
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f832 	bl	8001108 <getVrefCalData>
 80010a4:	4603      	mov	r3, r0
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b0:	ee17 0a90 	vmov	r0, s15
 80010b4:	f7ff fa70 	bl	8000598 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	490f      	ldr	r1, [pc, #60]	@ (80010fc <getVref+0x108>)
 80010be:	4810      	ldr	r0, [pc, #64]	@ (8001100 <getVref+0x10c>)
 80010c0:	f00a fe0c 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 80010c4:	480e      	ldr	r0, [pc, #56]	@ (8001100 <getVref+0x10c>)
 80010c6:	f000 fa4c 	bl	8001562 <SendStrToUSB>

	sprintf(strOutBuf, "Reference Voltage: %0.6f \r\n", (float)adcAvg);
 80010ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010cc:	f7ff fa64 	bl	8000598 <__aeabi_f2d>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	490b      	ldr	r1, [pc, #44]	@ (8001104 <getVref+0x110>)
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <getVref+0x10c>)
 80010d8:	f00a fe00 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <getVref+0x10c>)
 80010de:	f000 fa40 	bl	8001562 <SendStrToUSB>
	return adcAvg;
 80010e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e4:	ee07 3a90 	vmov	s15, r3
 }
 80010e8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ec:	3730      	adds	r7, #48	@ 0x30
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	cb840000 	.word	0xcb840000
 80010f8:	20000368 	.word	0x20000368
 80010fc:	0800e0e4 	.word	0x0800e0e4
 8001100:	20000c68 	.word	0x20000c68
 8001104:	0800e0fc 	.word	0x0800e0fc

08001108 <getVrefCalData>:
 // gets the calibration data from the memory location selected by Index 0 to 1
 uint16_t* getVrefCalData(int Index){
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	 uint16_t* refAddress = (uint16_t*)(Index == 0 ? 0x1FFF75AA : 0x1FFF75AB);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <getVrefCalData+0x12>
 8001116:	4b05      	ldr	r3, [pc, #20]	@ (800112c <getVrefCalData+0x24>)
 8001118:	e000      	b.n	800111c <getVrefCalData+0x14>
 800111a:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <getVrefCalData+0x28>)
 800111c:	60fb      	str	r3, [r7, #12]
	return (uint16_t*)refAddress;
 800111e:	68fb      	ldr	r3, [r7, #12]
 }
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	1fff75aa 	.word	0x1fff75aa
 8001130:	1fff75ab 	.word	0x1fff75ab

08001134 <Measure>:


 float Measure(int8_t Mode, uint8_t Channel)
 {
 8001134:	b580      	push	{r7, lr}
 8001136:	ed2d 8b02 	vpush	{d8}
 800113a:	b092      	sub	sp, #72	@ 0x48
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]

	// Set ADC Channel
	ADC_ChannelConfTypeDef sConfig = {0};
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f00a fe26 	bl	800bda2 <memset>
	// Set Channel
	// 0 = Voltage
	// 1 = Current
	uint32_t adcChannel;
	ADC_HandleTypeDef* hadc;
	sprintf(strOutBuf,"Channel: %d\n\r", Channel);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	461a      	mov	r2, r3
 800115a:	49b6      	ldr	r1, [pc, #728]	@ (8001434 <Measure+0x300>)
 800115c:	48b6      	ldr	r0, [pc, #728]	@ (8001438 <Measure+0x304>)
 800115e:	f00a fdbd 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 8001162:	48b5      	ldr	r0, [pc, #724]	@ (8001438 <Measure+0x304>)
 8001164:	f000 f9fd 	bl	8001562 <SendStrToUSB>
	switch(Mode){
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <Measure+0x42>
 8001170:	2b01      	cmp	r3, #1
 8001172:	d029      	beq.n	80011c8 <Measure+0x94>
 8001174:	e050      	b.n	8001218 <Measure+0xe4>
		case 0:
			switch(Channel){
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b03      	cmp	r3, #3
 800117a:	d81f      	bhi.n	80011bc <Measure+0x88>
 800117c:	a201      	add	r2, pc, #4	@ (adr r2, 8001184 <Measure+0x50>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119f 	.word	0x0800119f
 800118c:	080011a9 	.word	0x080011a9
 8001190:	080011b3 	.word	0x080011b3
				case Vadj:
					// B12
					adcChannel = ADC_CHANNEL_11;
 8001194:	4ba9      	ldr	r3, [pc, #676]	@ (800143c <Measure+0x308>)
 8001196:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc1;
 8001198:	4ba9      	ldr	r3, [pc, #676]	@ (8001440 <Measure+0x30c>)
 800119a:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800119c:	e013      	b.n	80011c6 <Measure+0x92>
				case TwelveV:
					// B1
					adcChannel = ADC_CHANNEL_12;
 800119e:	4ba9      	ldr	r3, [pc, #676]	@ (8001444 <Measure+0x310>)
 80011a0:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc1;
 80011a2:	4ba7      	ldr	r3, [pc, #668]	@ (8001440 <Measure+0x30c>)
 80011a4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80011a6:	e00e      	b.n	80011c6 <Measure+0x92>
				case FiveV:
					// B14
					adcChannel = ADC_CHANNEL_15;
 80011a8:	4ba7      	ldr	r3, [pc, #668]	@ (8001448 <Measure+0x314>)
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc1;
 80011ac:	4ba4      	ldr	r3, [pc, #656]	@ (8001440 <Measure+0x30c>)
 80011ae:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80011b0:	e009      	b.n	80011c6 <Measure+0x92>
				case ThreeV3:
					// B11
					adcChannel = ADC_CHANNEL_14;
 80011b2:	4ba6      	ldr	r3, [pc, #664]	@ (800144c <Measure+0x318>)
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc2;
 80011b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001450 <Measure+0x31c>)
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80011ba:	e004      	b.n	80011c6 <Measure+0x92>
				default:
					SendStrToUSB("INVALID COMMAND\r\nERROR:-4\r\n");
 80011bc:	48a5      	ldr	r0, [pc, #660]	@ (8001454 <Measure+0x320>)
 80011be:	f000 f9d0 	bl	8001562 <SendStrToUSB>
					return -4;
 80011c2:	4ba5      	ldr	r3, [pc, #660]	@ (8001458 <Measure+0x324>)
 80011c4:	e17d      	b.n	80014c2 <Measure+0x38e>
			}
			break;
 80011c6:	e02c      	b.n	8001222 <Measure+0xee>
		case 1:
			switch(Channel){
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d81e      	bhi.n	800120c <Measure+0xd8>
 80011ce:	a201      	add	r2, pc, #4	@ (adr r2, 80011d4 <Measure+0xa0>)
 80011d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011ef 	.word	0x080011ef
 80011dc:	080011f9 	.word	0x080011f9
 80011e0:	08001203 	.word	0x08001203
				case Vadj:
					// C4
					adcChannel = ADC_CHANNEL_5;
 80011e4:	4b9d      	ldr	r3, [pc, #628]	@ (800145c <Measure+0x328>)
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc2;
 80011e8:	4b99      	ldr	r3, [pc, #612]	@ (8001450 <Measure+0x31c>)
 80011ea:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80011ec:	e013      	b.n	8001216 <Measure+0xe2>
				case TwelveV:
					// B2
					adcChannel = ADC_CHANNEL_12;
 80011ee:	4b95      	ldr	r3, [pc, #596]	@ (8001444 <Measure+0x310>)
 80011f0:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc2;
 80011f2:	4b97      	ldr	r3, [pc, #604]	@ (8001450 <Measure+0x31c>)
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80011f6:	e00e      	b.n	8001216 <Measure+0xe2>
				case FiveV:
					// B0
					adcChannel = ADC_CHANNEL_15;
 80011f8:	4b93      	ldr	r3, [pc, #588]	@ (8001448 <Measure+0x314>)
 80011fa:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc1;
 80011fc:	4b90      	ldr	r3, [pc, #576]	@ (8001440 <Measure+0x30c>)
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8001200:	e009      	b.n	8001216 <Measure+0xe2>
				case ThreeV3:
					// A7
					adcChannel = ADC_CHANNEL_4;
 8001202:	4b97      	ldr	r3, [pc, #604]	@ (8001460 <Measure+0x32c>)
 8001204:	647b      	str	r3, [r7, #68]	@ 0x44
					hadc = &hadc2;
 8001206:	4b92      	ldr	r3, [pc, #584]	@ (8001450 <Measure+0x31c>)
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800120a:	e004      	b.n	8001216 <Measure+0xe2>
				default:
					SendStrToUSB("INVALID COMMAND\r\nERROR:-5\r\n");
 800120c:	4895      	ldr	r0, [pc, #596]	@ (8001464 <Measure+0x330>)
 800120e:	f000 f9a8 	bl	8001562 <SendStrToUSB>
					return -5;
 8001212:	4b95      	ldr	r3, [pc, #596]	@ (8001468 <Measure+0x334>)
 8001214:	e155      	b.n	80014c2 <Measure+0x38e>
			}
			break;
 8001216:	e004      	b.n	8001222 <Measure+0xee>
		default:
			SendStrToUSB("INVALID COMMAND\r\nERROR:-6\r\n");
 8001218:	4894      	ldr	r0, [pc, #592]	@ (800146c <Measure+0x338>)
 800121a:	f000 f9a2 	bl	8001562 <SendStrToUSB>
			return -6;
 800121e:	4b94      	ldr	r3, [pc, #592]	@ (8001470 <Measure+0x33c>)
 8001220:	e14f      	b.n	80014c2 <Measure+0x38e>
	}
	sConfig.Channel = adcChannel;
 8001222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001224:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001226:	2306      	movs	r3, #6
 8001228:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122e:	237f      	movs	r3, #127	@ 0x7f
 8001230:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001232:	2304      	movs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]

	// Take reading
	// Start ADC Conversion
	// 4k Samples
	float adcAvg = 0UL;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	@ 0x40
	for(uint16_t i = 0; i < 4000; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001244:	e027      	b.n	8001296 <Measure+0x162>

		// Take reading
		// Start ADC Conversion
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001246:	f107 0308 	add.w	r3, r7, #8
 800124a:	4619      	mov	r1, r3
 800124c:	487c      	ldr	r0, [pc, #496]	@ (8001440 <Measure+0x30c>)
 800124e:	f001 fcaf 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <Measure+0x128>
		{
			Error_Handler();
 8001258:	f000 fbf6 	bl	8001a48 <Error_Handler>
		}
		if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800125c:	4878      	ldr	r0, [pc, #480]	@ (8001440 <Measure+0x30c>)
 800125e:	f001 fb05 	bl	800286c <HAL_ADC_Start>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <Measure+0x138>
		{
			Error_Handler();
 8001268:	f000 fbee 	bl	8001a48 <Error_Handler>
		}
		 // Wait for conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	4873      	ldr	r0, [pc, #460]	@ (8001440 <Measure+0x30c>)
 8001272:	f001 fbb7 	bl	80029e4 <HAL_ADC_PollForConversion>

		// Get ADC reading

		adcAvg += HAL_ADC_GetValue(&hadc1);
 8001276:	4872      	ldr	r0, [pc, #456]	@ (8001440 <Measure+0x30c>)
 8001278:	f001 fc8c 	bl	8002b94 <HAL_ADC_GetValue>
 800127c:	ee07 0a90 	vmov	s15, r0
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	for(uint16_t i = 0; i < 4000; i++){
 8001290:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001292:	3301      	adds	r3, #1
 8001294:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001296:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001298:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800129c:	d3d3      	bcc.n	8001246 <Measure+0x112>

	}
	adcAvg /= 4000;
 800129e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80012a2:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8001474 <Measure+0x340>
 80012a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012aa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	sprintf(strOutBuf,"adcAvg: %0.6f \n\r", adcAvg);
 80012ae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80012b0:	f7ff f972 	bl	8000598 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	496f      	ldr	r1, [pc, #444]	@ (8001478 <Measure+0x344>)
 80012ba:	485f      	ldr	r0, [pc, #380]	@ (8001438 <Measure+0x304>)
 80012bc:	f00a fd0e 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 80012c0:	485d      	ldr	r0, [pc, #372]	@ (8001438 <Measure+0x304>)
 80012c2:	f000 f94e 	bl	8001562 <SendStrToUSB>
	nullstr(strOutBuf, 1024);
 80012c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012ca:	485b      	ldr	r0, [pc, #364]	@ (8001438 <Measure+0x304>)
 80012cc:	f7ff fdea 	bl	8000ea4 <nullstr>

	// Convert ADC reading to voltage/current

	float VoltageReference = (float)1.212 * ((float)getVref(4000)) / (float)*getVrefCalData(0);
 80012d0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80012d4:	f7ff fe8e 	bl	8000ff4 <getVref>
 80012d8:	eef0 7a40 	vmov.f32	s15, s0
 80012dc:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800147c <Measure+0x348>
 80012e0:	ee27 8a87 	vmul.f32	s16, s15, s14
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ff0f 	bl	8001108 <getVrefCalData>
 80012ea:	4603      	mov	r3, r0
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80012fa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	sprintf(strOutBuf,"VoltageReference: %0.6f \n\r", VoltageReference);
 80012fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001300:	f7ff f94a 	bl	8000598 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	495d      	ldr	r1, [pc, #372]	@ (8001480 <Measure+0x34c>)
 800130a:	484b      	ldr	r0, [pc, #300]	@ (8001438 <Measure+0x304>)
 800130c:	f00a fce6 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 8001310:	4849      	ldr	r0, [pc, #292]	@ (8001438 <Measure+0x304>)
 8001312:	f000 f926 	bl	8001562 <SendStrToUSB>
	nullstr(strOutBuf, 1024);
 8001316:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800131a:	4847      	ldr	r0, [pc, #284]	@ (8001438 <Measure+0x304>)
 800131c:	f7ff fdc2 	bl	8000ea4 <nullstr>

		//Channel Voltage = Vref+_Charac * VREFINT_CAL * ADC_DATA / ( VREFINT_DATA * FULL_SCALE )
	float Vchannel = (VoltageReference * adcAvg) / (float)3.3;
 8001320:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001324:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132c:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001484 <Measure+0x350>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c


	sprintf(strOutBuf,"adcAvg: %0.6f \n\r", adcAvg);
 8001338:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800133a:	f7ff f92d 	bl	8000598 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	494d      	ldr	r1, [pc, #308]	@ (8001478 <Measure+0x344>)
 8001344:	483c      	ldr	r0, [pc, #240]	@ (8001438 <Measure+0x304>)
 8001346:	f00a fcc9 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 800134a:	483b      	ldr	r0, [pc, #236]	@ (8001438 <Measure+0x304>)
 800134c:	f000 f909 	bl	8001562 <SendStrToUSB>
	nullstr(strOutBuf, 1024);
 8001350:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001354:	4838      	ldr	r0, [pc, #224]	@ (8001438 <Measure+0x304>)
 8001356:	f7ff fda5 	bl	8000ea4 <nullstr>

	float ChannelVoltage = ((float)3.3 * (float)adcAvg) / 4095;; // Assuming Vref is 3.3V and 12-bit resolution
 800135a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800135e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001484 <Measure+0x350>
 8001362:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001488 <Measure+0x354>
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

	// Convert ADC reading to voltage/current
	sprintf(strOutBuf,"Calibrated Channel Voltage(ref): %0.6f\n\r", Vchannel);
 8001372:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001374:	f7ff f910 	bl	8000598 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4943      	ldr	r1, [pc, #268]	@ (800148c <Measure+0x358>)
 800137e:	482e      	ldr	r0, [pc, #184]	@ (8001438 <Measure+0x304>)
 8001380:	f00a fcac 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 8001384:	482c      	ldr	r0, [pc, #176]	@ (8001438 <Measure+0x304>)
 8001386:	f000 f8ec 	bl	8001562 <SendStrToUSB>
	nullstr(strOutBuf, 1024);
 800138a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800138e:	482a      	ldr	r0, [pc, #168]	@ (8001438 <Measure+0x304>)
 8001390:	f7ff fd88 	bl	8000ea4 <nullstr>

	// Convert ADC reading to voltage/current
	sprintf(strOutBuf,"General Channel Voltage(ref): %0.6f\n\r", ChannelVoltage);
 8001394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001396:	f7ff f8ff 	bl	8000598 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	493c      	ldr	r1, [pc, #240]	@ (8001490 <Measure+0x35c>)
 80013a0:	4825      	ldr	r0, [pc, #148]	@ (8001438 <Measure+0x304>)
 80013a2:	f00a fc9b 	bl	800bcdc <siprintf>
	SendStrToUSB(strOutBuf);
 80013a6:	4824      	ldr	r0, [pc, #144]	@ (8001438 <Measure+0x304>)
 80013a8:	f000 f8db 	bl	8001562 <SendStrToUSB>
	nullstr(strOutBuf, 1024);
 80013ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013b0:	4821      	ldr	r0, [pc, #132]	@ (8001438 <Measure+0x304>)
 80013b2:	f7ff fd77 	bl	8000ea4 <nullstr>
	// Convert to Current reading or attenuated voltage reading
	float Reading = 0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	switch(Mode){
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <Measure+0x296>
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d06d      	beq.n	80014a4 <Measure+0x370>
 80013c8:	e075      	b.n	80014b6 <Measure+0x382>
		case 0:
			switch(Channel){
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d023      	beq.n	8001418 <Measure+0x2e4>
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	dc61      	bgt.n	8001498 <Measure+0x364>
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	dc02      	bgt.n	80013de <Measure+0x2aa>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da03      	bge.n	80013e4 <Measure+0x2b0>
 80013dc:	e05c      	b.n	8001498 <Measure+0x364>
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d00d      	beq.n	80013fe <Measure+0x2ca>
 80013e2:	e059      	b.n	8001498 <Measure+0x364>
				case Vadj:
				case TwelveV:
					// B12
					// B1
					Reading = ChannelVoltage * ( 34 + 10 ) / 10;
 80013e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001494 <Measure+0x360>
 80013ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					break;
 80013fc:	e051      	b.n	80014a2 <Measure+0x36e>
				case FiveV:
					// B14
					Reading = ChannelVoltage * ( 15 + 10 ) / 10;
 80013fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001402:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					break;
 8001416:	e044      	b.n	80014a2 <Measure+0x36e>
				case ThreeV3:
					// B11
					Reading = ChannelVoltage * ( 5 + 10 ) / 10;
 8001418:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800141c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001420:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001424:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
					break;
 8001430:	e037      	b.n	80014a2 <Measure+0x36e>
 8001432:	bf00      	nop
 8001434:	0800e118 	.word	0x0800e118
 8001438:	20000c68 	.word	0x20000c68
 800143c:	2e300800 	.word	0x2e300800
 8001440:	20000368 	.word	0x20000368
 8001444:	32601000 	.word	0x32601000
 8001448:	3ef08000 	.word	0x3ef08000
 800144c:	3ac04000 	.word	0x3ac04000
 8001450:	200003d4 	.word	0x200003d4
 8001454:	0800e128 	.word	0x0800e128
 8001458:	c0800000 	.word	0xc0800000
 800145c:	14f00020 	.word	0x14f00020
 8001460:	10c00010 	.word	0x10c00010
 8001464:	0800e144 	.word	0x0800e144
 8001468:	c0a00000 	.word	0xc0a00000
 800146c:	0800e160 	.word	0x0800e160
 8001470:	c0c00000 	.word	0xc0c00000
 8001474:	457a0000 	.word	0x457a0000
 8001478:	0800e17c 	.word	0x0800e17c
 800147c:	3f9b22d1 	.word	0x3f9b22d1
 8001480:	0800e190 	.word	0x0800e190
 8001484:	40533333 	.word	0x40533333
 8001488:	457ff000 	.word	0x457ff000
 800148c:	0800e1ac 	.word	0x0800e1ac
 8001490:	0800e1d8 	.word	0x0800e1d8
 8001494:	42300000 	.word	0x42300000
				default:
					SendStrToUSB("INVALID COMMAND\r\nERROR:-11\r\n");
 8001498:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <Measure+0x3a0>)
 800149a:	f000 f862 	bl	8001562 <SendStrToUSB>
					return -11;
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <Measure+0x3a4>)
 80014a0:	e00f      	b.n	80014c2 <Measure+0x38e>
			}
			break;
 80014a2:	e00d      	b.n	80014c0 <Measure+0x38c>
		case 1:
			// C4
			// B2
			// B0
			// A7
			Reading = ChannelVoltage / (2500 * 0.01);
 80014a4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014a8:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
			break;
 80014b4:	e004      	b.n	80014c0 <Measure+0x38c>
		default:
			SendStrToUSB("INVALID COMMAND\r\nERROR:-12\r\n");
 80014b6:	4809      	ldr	r0, [pc, #36]	@ (80014dc <Measure+0x3a8>)
 80014b8:	f000 f853 	bl	8001562 <SendStrToUSB>
			return -12;
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <Measure+0x3ac>)
 80014be:	e000      	b.n	80014c2 <Measure+0x38e>
	}

	return Reading;
 80014c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 }
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3748      	adds	r7, #72	@ 0x48
 80014cc:	46bd      	mov	sp, r7
 80014ce:	ecbd 8b02 	vpop	{d8}
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	0800e200 	.word	0x0800e200
 80014d8:	c1300000 	.word	0xc1300000
 80014dc:	0800e220 	.word	0x0800e220
 80014e0:	c1400000 	.word	0xc1400000

080014e4 <containsChar>:
 ssize_t containsChar(char needle, const char *haystack)
 {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
	 if (!haystack)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <containsChar+0x18>
		 return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	e00e      	b.n	800151a <containsChar+0x36>

	 const char *needle_in_haystack = strchr(haystack, needle);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4619      	mov	r1, r3
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f00a fc56 	bl	800bdb2 <strchr>
 8001506:	60f8      	str	r0, [r7, #12]
	 return needle_in_haystack ? needle_in_haystack - haystack : -1;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <containsChar+0x32>
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	e001      	b.n	800151a <containsChar+0x36>
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <containsStr>:
 ssize_t containsStr(const char * needle, const char *haystack)
 {
 8001522:	b580      	push	{r7, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
	 char *needle_in_haystack;
	 if(!needle || !haystack) return -1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <containsStr+0x16>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <containsStr+0x1c>
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	e00d      	b.n	800155a <containsStr+0x38>
	 needle_in_haystack = strstr(haystack, needle);
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	6838      	ldr	r0, [r7, #0]
 8001542:	f00a fc43 	bl	800bdcc <strstr>
 8001546:	60f8      	str	r0, [r7, #12]
	 return needle_in_haystack ? needle_in_haystack - haystack : -1;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <containsStr+0x34>
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	e001      	b.n	800155a <containsStr+0x38>
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 }
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <SendStrToUSB>:

 void SendStrToUSB(char* buf){
 8001562:	b580      	push	{r7, lr}
 8001564:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	f843 0c04 	str.w	r0, [r3, #-4]
	char outbuffer[4096];
	strcpy (outbuffer, buf);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	461a      	mov	r2, r3
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8001582:	4618      	mov	r0, r3
 8001584:	f00a fcaf 	bl	800bee6 <strcpy>
	CDC_Transmit_FS((uint8_t *)outbuffer, (uint16_t)strlen(outbuffer));
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fe97 	bl	80002c0 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f009 fa37 	bl	800aa10 <CDC_Transmit_FS>

	nullstr(outbuffer,4096);
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fc7a 	bl	8000ea4 <nullstr>
 }
 80015b0:	bf00      	nop
 80015b2:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <MX_USB_OTG_FS_Init>:

 static void MX_USB_OTG_FS_Init(void)
 {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
   hUsbDeviceFS.pData = NULL;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
   hUsbDeviceFS.pClassData = NULL;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
   hUsbDeviceFS.pClass = NULL;
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
   hUsbDeviceFS.dev_state = USBD_STATE_DEFAULT;
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
   hUsbDeviceFS.id = 204;
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015e2:	22cc      	movs	r2, #204	@ 0xcc
 80015e4:	701a      	strb	r2, [r3, #0]

   /* Init Device Library, add supported class and start the library. */
   if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 80015e6:	2200      	movs	r2, #0
 80015e8:	4913      	ldr	r1, [pc, #76]	@ (8001638 <MX_USB_OTG_FS_Init+0x7c>)
 80015ea:	4812      	ldr	r0, [pc, #72]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015ec:	f007 ffc8 	bl	8009580 <USBD_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USB_OTG_FS_Init+0x3e>
   {
	 Error_Handler();
 80015f6:	f000 fa27 	bl	8001a48 <Error_Handler>
   }
   if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80015fa:	4910      	ldr	r1, [pc, #64]	@ (800163c <MX_USB_OTG_FS_Init+0x80>)
 80015fc:	480d      	ldr	r0, [pc, #52]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 80015fe:	f007 ffef 	bl	80095e0 <USBD_RegisterClass>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USB_OTG_FS_Init+0x50>
   {
	 Error_Handler();
 8001608:	f000 fa1e 	bl	8001a48 <Error_Handler>
   }
   if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <MX_USB_OTG_FS_Init+0x84>)
 800160e:	4809      	ldr	r0, [pc, #36]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 8001610:	f007 ff10 	bl	8009434 <USBD_CDC_RegisterInterface>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USB_OTG_FS_Init+0x62>
   {
	 Error_Handler();
 800161a:	f000 fa15 	bl	8001a48 <Error_Handler>
   }
   if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <MX_USB_OTG_FS_Init+0x78>)
 8001620:	f008 f805 	bl	800962e <USBD_Start>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USB_OTG_FS_Init+0x72>
   {
	 Error_Handler();
 800162a:	f000 fa0d 	bl	8001a48 <Error_Handler>
   }
 }
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000117c 	.word	0x2000117c
 8001638:	20000130 	.word	0x20000130
 800163c:	20000018 	.word	0x20000018
 8001640:	2000011c 	.word	0x2000011c

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2238      	movs	r2, #56	@ 0x38
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00a fba5 	bl	800bda2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166a:	f003 ffbf 	bl	80055ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800166e:	230a      	movs	r3, #10
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001678:	2340      	movs	r3, #64	@ 0x40
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001680:	2302      	movs	r3, #2
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001684:	2302      	movs	r3, #2
 8001686:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001688:	2301      	movs	r3, #1
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800168c:	230c      	movs	r3, #12
 800168e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001690:	2302      	movs	r3, #2
 8001692:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001694:	2304      	movs	r3, #4
 8001696:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001698:	2302      	movs	r3, #2
 800169a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 f857 	bl	8005754 <HAL_RCC_OscConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80016ac:	f000 f9cc 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b0:	230f      	movs	r3, #15
 80016b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fb55 	bl	8005d78 <HAL_RCC_ClockConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016d4:	f000 f9b8 	bl	8001a48 <Error_Handler>
  }
}
 80016d8:	bf00      	nop
 80016da:	3750      	adds	r7, #80	@ 0x50
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2220      	movs	r2, #32
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a fb52 	bl	800bda2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001700:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001706:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001708:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800170c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800170e:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800171a:	4b2b      	ldr	r3, [pc, #172]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001720:	4b29      	ldr	r3, [pc, #164]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001726:	4b28      	ldr	r3, [pc, #160]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001728:	2204      	movs	r2, #4
 800172a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001732:	4b25      	ldr	r3, [pc, #148]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001738:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800173a:	2201      	movs	r2, #1
 800173c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001748:	2200      	movs	r2, #0
 800174a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174c:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800175a:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001760:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 800176a:	f000 fefb 	bl	8002564 <HAL_ADC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001774:	f000 f968 	bl	8001a48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800177c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 8001784:	f001 feb0 	bl	80034e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800178e:	f000 f95b 	bl	8001a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_ADC1_Init+0xec>)
 8001794:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001796:	2306      	movs	r3, #6
 8001798:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800179e:	237f      	movs	r3, #127	@ 0x7f
 80017a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017a2:	2304      	movs	r3, #4
 80017a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <MX_ADC1_Init+0xe8>)
 80017b0:	f001 f9fe 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017ba:	f000 f945 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3730      	adds	r7, #48	@ 0x30
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000368 	.word	0x20000368
 80017cc:	3ef08000 	.word	0x3ef08000

080017d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d6:	463b      	mov	r3, r7
 80017d8:	2220      	movs	r2, #32
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a fae0 	bl	800bda2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <MX_ADC2_Init+0xc0>)
 80017e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001894 <MX_ADC2_Init+0xc4>)
 80017e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <MX_ADC2_Init+0xc0>)
 80017ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <MX_ADC2_Init+0xc0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f6:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <MX_ADC2_Init+0xc0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <MX_ADC2_Init+0xc0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001808:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_ADC2_Init+0xc0>)
 800180a:	2204      	movs	r2, #4
 800180c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001810:	2200      	movs	r2, #0
 8001812:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001816:	2200      	movs	r2, #0
 8001818:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_ADC2_Init+0xc0>)
 800181c:	2201      	movs	r2, #1
 800181e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <MX_ADC2_Init+0xc0>)
 800182a:	2200      	movs	r2, #0
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800183c:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <MX_ADC2_Init+0xc0>)
 800183e:	2200      	movs	r2, #0
 8001840:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001842:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800184a:	4811      	ldr	r0, [pc, #68]	@ (8001890 <MX_ADC2_Init+0xc0>)
 800184c:	f000 fe8a 	bl	8002564 <HAL_ADC_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001856:	f000 f8f7 	bl	8001a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_ADC2_Init+0xc8>)
 800185c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800185e:	2306      	movs	r3, #6
 8001860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001866:	237f      	movs	r3, #127	@ 0x7f
 8001868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800186a:	2304      	movs	r3, #4
 800186c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <MX_ADC2_Init+0xc0>)
 8001878:	f001 f99a 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001882:	f000 f8e1 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200003d4 	.word	0x200003d4
 8001894:	50000100 	.word	0x50000100
 8001898:	10c00010 	.word	0x10c00010

0800189c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_RTC_Init+0x64>)
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <MX_RTC_Init+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018a6:	4b16      	ldr	r3, [pc, #88]	@ (8001900 <MX_RTC_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018ac:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_RTC_Init+0x64>)
 80018ae:	227f      	movs	r2, #127	@ 0x7f
 80018b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_RTC_Init+0x64>)
 80018b4:	22ff      	movs	r2, #255	@ 0xff
 80018b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_RTC_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <MX_RTC_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_RTC_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <MX_RTC_Init+0x64>)
 80018cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <MX_RTC_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018d8:	4809      	ldr	r0, [pc, #36]	@ (8001900 <MX_RTC_Init+0x64>)
 80018da:	f004 fe21 	bl	8006520 <HAL_RTC_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f000 f8b0 	bl	8001a48 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	4804      	ldr	r0, [pc, #16]	@ (8001900 <MX_RTC_Init+0x64>)
 80018ee:	f004 ff34 	bl	800675a <HAL_RTCEx_SetWakeUpTimer>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80018f8:	f000 f8a6 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000440 	.word	0x20000440
 8001904:	40002800 	.word	0x40002800

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	4b47      	ldr	r3, [pc, #284]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	4a46      	ldr	r2, [pc, #280]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192a:	4b44      	ldr	r3, [pc, #272]	@ (8001a3c <MX_GPIO_Init+0x134>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	4a40      	ldr	r2, [pc, #256]	@ (8001a3c <MX_GPIO_Init+0x134>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001942:	4b3e      	ldr	r3, [pc, #248]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a3a      	ldr	r2, [pc, #232]	@ (8001a3c <MX_GPIO_Init+0x134>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <MX_GPIO_Init+0x134>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f244 4140 	movw	r1, #17472	@ 0x4440
 800196c:	4834      	ldr	r0, [pc, #208]	@ (8001a40 <MX_GPIO_Init+0x138>)
 800196e:	f002 f8f1 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 8001972:	2200      	movs	r2, #0
 8001974:	f24c 112a 	movw	r1, #49450	@ 0xc12a
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f002 f8ea 	bl	8003b54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8001980:	2200      	movs	r2, #0
 8001982:	21a0      	movs	r1, #160	@ 0xa0
 8001984:	482f      	ldr	r0, [pc, #188]	@ (8001a44 <MX_GPIO_Init+0x13c>)
 8001986:	f002 f8e5 	bl	8003b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC15 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_11;
 800198a:	f44f 4328 	mov.w	r3, #43008	@ 0xa800
 800198e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <MX_GPIO_Init+0x138>)
 80019a0:	f001 ff56 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC6 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_10;
 80019a4:	f244 4340 	movw	r3, #17472	@ 0x4440
 80019a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4619      	mov	r1, r3
 80019bc:	4820      	ldr	r0, [pc, #128]	@ (8001a40 <MX_GPIO_Init+0x138>)
 80019be:	f001 ff47 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 80019c2:	f240 2301 	movw	r3, #513	@ 0x201
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019da:	f001 ff39 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 PA5 PA8
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_8
 80019de:	f24c 132a 	movw	r3, #49450	@ 0xc12a
 80019e2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019fa:	f001 ff29 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fe:	2310      	movs	r3, #16
 8001a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <MX_GPIO_Init+0x13c>)
 8001a12:	f001 ff1d 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001a16:	23a0      	movs	r3, #160	@ 0xa0
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	@ (8001a44 <MX_GPIO_Init+0x13c>)
 8001a2e:	f001 ff0f 	bl	8003850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a32:	bf00      	nop
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000400 	.word	0x48000400

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_MspInit+0x54>)
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f000 faf2 	bl	8002074 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8001a90:	f000 fb18 	bl	80020c4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 fb01 	bl	800209c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a9a:	f003 fe4b 	bl	8005734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09e      	sub	sp, #120	@ 0x78
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0320 	add.w	r3, r7, #32
 8001ac8:	2244      	movs	r2, #68	@ 0x44
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f00a f968 	bl	800bda2 <memset>
  if(hadc->Instance==ADC1)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ada:	d13e      	bne.n	8001b5a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ae0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001ae2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 fb27 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001af8:	f7ff ffa6 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001afc:	4b53      	ldr	r3, [pc, #332]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a52      	ldr	r2, [pc, #328]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001b04:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b06:	4b51      	ldr	r3, [pc, #324]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d10b      	bne.n	8001b26 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b0e:	4b50      	ldr	r3, [pc, #320]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a4f      	ldr	r2, [pc, #316]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	4b4a      	ldr	r3, [pc, #296]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b47      	ldr	r3, [pc, #284]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14;
 8001b3e:	f245 0303 	movw	r3, #20483	@ 0x5003
 8001b42:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b44:	2303      	movs	r3, #3
 8001b46:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b50:	4619      	mov	r1, r3
 8001b52:	4840      	ldr	r0, [pc, #256]	@ (8001c54 <HAL_ADC_MspInit+0x1a8>)
 8001b54:	f001 fe7c 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b58:	e073      	b.n	8001c42 <HAL_ADC_MspInit+0x196>
  else if(hadc->Instance==ADC2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <HAL_ADC_MspInit+0x1ac>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d16e      	bne.n	8001c42 <HAL_ADC_MspInit+0x196>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b6a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0320 	add.w	r3, r7, #32
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fae3 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8001b80:	f7ff ff62 	bl	8001a48 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b84:	4b31      	ldr	r3, [pc, #196]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001b8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <HAL_ADC_MspInit+0x1a0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10b      	bne.n	8001bae <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b96:	4b2e      	ldr	r3, [pc, #184]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001b9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ba0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	4a27      	ldr	r2, [pc, #156]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	4b22      	ldr	r3, [pc, #136]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bca:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bcc:	f043 0304 	orr.w	r3, r3, #4
 8001bd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	4b1c      	ldr	r3, [pc, #112]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_ADC_MspInit+0x1a4>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8001bf6:	2390      	movs	r3, #144	@ 0x90
 8001bf8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c0c:	f001 fe20 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c10:	2310      	movs	r3, #16
 8001c12:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c14:	2303      	movs	r3, #3
 8001c16:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c20:	4619      	mov	r1, r3
 8001c22:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <HAL_ADC_MspInit+0x1b0>)
 8001c24:	f001 fe14 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8001c28:	f640 0304 	movw	r3, #2052	@ 0x804
 8001c2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_ADC_MspInit+0x1a8>)
 8001c3e:	f001 fe07 	bl	8003850 <HAL_GPIO_Init>
}
 8001c42:	bf00      	nop
 8001c44:	3778      	adds	r7, #120	@ 0x78
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000116c 	.word	0x2000116c
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000400 	.word	0x48000400
 8001c58:	50000100 	.word	0x50000100
 8001c5c:	48000800 	.word	0x48000800

08001c60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b094      	sub	sp, #80	@ 0x50
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2244      	movs	r2, #68	@ 0x44
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00a f896 	bl	800bda2 <memset>
  if(hrtc->Instance==RTC)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a15      	ldr	r2, [pc, #84]	@ (8001cd0 <HAL_RTC_MspInit+0x70>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d123      	bne.n	8001cc8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001c84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4618      	mov	r0, r3
 8001c92:	f004 fa55 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001c9c:	f7ff fed4 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_RTC_MspInit+0x74>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd4 <HAL_RTC_MspInit+0x74>)
 8001ca8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <HAL_RTC_MspInit+0x74>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	4a07      	ldr	r2, [pc, #28]	@ (8001cd4 <HAL_RTC_MspInit+0x74>)
 8001cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RTC_MspInit+0x74>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3750      	adds	r7, #80	@ 0x50
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40002800 	.word	0x40002800
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <NMI_Handler+0x4>

08001ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <MemManage_Handler+0x4>

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <UsageFault_Handler+0x4>

08001d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2e:	f000 f961 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USB_LP_IRQHandler+0x10>)
 8001d3e:	f002 f811 	bl	8003d64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20004660 	.word	0x20004660

08001d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_kill>:

int _kill(int pid, int sig)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d66:	f00a f891 	bl	800be8c <__errno>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2216      	movs	r2, #22
 8001d6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_exit>:

void _exit (int status)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffe7 	bl	8001d5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8e:	bf00      	nop
 8001d90:	e7fd      	b.n	8001d8e <_exit+0x12>

08001d92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e00a      	b.n	8001dba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da4:	f3af 8000 	nop.w
 8001da8:	4601      	mov	r1, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbf0      	blt.n	8001da4 <_read+0x12>
  }

  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e009      	b.n	8001df2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf1      	blt.n	8001dde <_write+0x12>
  }
  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_close>:

int _close(int file)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_isatty>:

int _isatty(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f009 fff6 	bl	800be8c <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20008000 	.word	0x20008000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	20001170 	.word	0x20001170
 8001ed4:	20004ca8 	.word	0x20004ca8

08001ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001efc:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f00:	f7ff ffea 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	@ (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	@ (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f009 ffb5 	bl	800be98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7fe fe63 	bl	8000bf8 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   r0, =_estack
 8001f34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001f40:	0800e618 	.word	0x0800e618
  ldr r2, =_sbss
 8001f44:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001f48:	20004ca8 	.word	0x20004ca8

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>

08001f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f001 fc39 	bl	80037d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5e:	200f      	movs	r0, #15
 8001f60:	f000 f80e 	bl	8001f80 <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e001      	b.n	8001f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f70:	f7ff fd70 	bl	8001a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f74:	79fb      	ldrb	r3, [r7, #7]

}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f8c:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <HAL_InitTick+0x68>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d022      	beq.n	8001fda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <HAL_InitTick+0x6c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_InitTick+0x68>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 fc44 	bl	8003836 <HAL_SYSTICK_Config>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10f      	bne.n	8001fd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	d809      	bhi.n	8001fce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc2:	f001 fc10 	bl	80037e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff0 <HAL_InitTick+0x70>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e007      	b.n	8001fde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e004      	b.n	8001fde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_IncTick+0x1c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_IncTick+0x20>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4413      	add	r3, r2
 8002002:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <HAL_IncTick+0x1c>)
 8002004:	6013      	str	r3, [r2, #0]
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	20001174 	.word	0x20001174
 8002014:	20000008 	.word	0x20000008

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20001174 	.word	0x20001174

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d004      	beq.n	8002054 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_Delay+0x40>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002054:	bf00      	nop
 8002056:	f7ff ffdf 	bl	8002018 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	429a      	cmp	r2, r3
 8002064:	d8f7      	bhi.n	8002056 <HAL_Delay+0x26>
  {
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000008 	.word	0x20000008

08002074 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002084:	4904      	ldr	r1, [pc, #16]	@ (8002098 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40010030 	.word	0x40010030

0800209c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0202 	bic.w	r2, r3, #2
 80020ac:	4904      	ldr	r1, [pc, #16]	@ (80020c0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40010030 	.word	0x40010030

080020c4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002108 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020d6:	f7ff ff9f 	bl	8002018 <HAL_GetTick>
 80020da:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80020dc:	e008      	b.n	80020f0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80020de:	f7ff ff9b 	bl	8002018 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b0a      	cmp	r3, #10
 80020ea:	d901      	bls.n	80020f0 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e006      	b.n	80020fe <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40010030 	.word	0x40010030

0800210c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3360      	adds	r3, #96	@ 0x60
 8002186:	461a      	mov	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <LL_ADC_SetOffset+0x44>)
 8002196:	4013      	ands	r3, r2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	03fff000 	.word	0x03fff000

080021bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3360      	adds	r3, #96	@ 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3360      	adds	r3, #96	@ 0x60
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	431a      	orrs	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800221e:	b480      	push	{r7}
 8002220:	b087      	sub	sp, #28
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	3360      	adds	r3, #96	@ 0x60
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	431a      	orrs	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3360      	adds	r3, #96	@ 0x60
 8002264:	461a      	mov	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	431a      	orrs	r2, r3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	615a      	str	r2, [r3, #20]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3330      	adds	r3, #48	@ 0x30
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	211f      	movs	r1, #31
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 011f 	and.w	r1, r3, #31
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	431a      	orrs	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800232e:	b480      	push	{r7}
 8002330:	b087      	sub	sp, #28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3314      	adds	r3, #20
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	0e5b      	lsrs	r3, r3, #25
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	0d1b      	lsrs	r3, r3, #20
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	2107      	movs	r1, #7
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0d1b      	lsrs	r3, r3, #20
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	431a      	orrs	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002378:	bf00      	nop
 800237a:	371c      	adds	r7, #28
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0318 	and.w	r3, r3, #24
 80023a6:	4908      	ldr	r1, [pc, #32]	@ (80023c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023a8:	40d9      	lsrs	r1, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	400b      	ands	r3, r1
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	431a      	orrs	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	0007ffff 	.word	0x0007ffff

080023cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6093      	str	r3, [r2, #8]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800243c:	d101      	bne.n	8002442 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002464:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800248c:	d101      	bne.n	8002492 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <LL_ADC_IsEnabled+0x18>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_ADC_IsEnabled+0x1a>
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d101      	bne.n	800252e <LL_ADC_REG_IsConversionOngoing+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d101      	bne.n	8002554 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	@ 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e167      	b.n	800284e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff fa8d 	bl	8001aac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff3f 	bl	8002428 <LL_ADC_IsDeepPowerDownEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff25 	bl	8002404 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff5a 	bl	8002478 <LL_ADC_IsInternalRegulatorEnabled>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d115      	bne.n	80025f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff3e 	bl	8002450 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002858 <HAL_ADC_Init+0x2f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4aa0      	ldr	r2, [pc, #640]	@ (800285c <HAL_ADC_Init+0x2f8>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff3c 	bl	8002478 <LL_ADC_IsInternalRegulatorEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff75 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 800262c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8100 	bne.w	800283c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 80fc 	bne.w	800283c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800264c:	f043 0202 	orr.w	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff35 	bl	80024c8 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002664:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002668:	f7ff ff2e 	bl	80024c8 <LL_ADC_IsEnabled>
 800266c:	4604      	mov	r4, r0
 800266e:	487c      	ldr	r0, [pc, #496]	@ (8002860 <HAL_ADC_Init+0x2fc>)
 8002670:	f7ff ff2a 	bl	80024c8 <LL_ADC_IsEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	4323      	orrs	r3, r4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4619      	mov	r1, r3
 8002682:	4878      	ldr	r0, [pc, #480]	@ (8002864 <HAL_ADC_Init+0x300>)
 8002684:	f7ff fd42 	bl	800210c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7f5b      	ldrb	r3, [r3, #29]
 800268c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002692:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002698:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800269e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	045b      	lsls	r3, r3, #17
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b60      	ldr	r3, [pc, #384]	@ (8002868 <HAL_ADC_Init+0x304>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	69b9      	ldr	r1, [r7, #24]
 80026f0:	430b      	orrs	r3, r1
 80026f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff14 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002714:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d16d      	bne.n	80027f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d16a      	bne.n	80027f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002726:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800272e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800273e:	f023 0302 	bic.w	r3, r3, #2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	430b      	orrs	r3, r1
 800274a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d017      	beq.n	8002784 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002762:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800276c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6911      	ldr	r1, [r2, #16]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002782:	e013      	b.n	80027ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002792:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d118      	bne.n	80027e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027cc:	4311      	orrs	r1, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027d2:	4311      	orrs	r1, r2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027d8:	430a      	orrs	r2, r1
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e007      	b.n	80027f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d10c      	bne.n	800281a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	f023 010f 	bic.w	r1, r3, #15
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	1e5a      	subs	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	631a      	str	r2, [r3, #48]	@ 0x30
 8002818:	e007      	b.n	800282a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 020f 	bic.w	r2, r2, #15
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	f023 0303 	bic.w	r3, r3, #3
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	65da      	str	r2, [r3, #92]	@ 0x5c
 800283a:	e007      	b.n	800284c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800284c:	7ffb      	ldrb	r3, [r7, #31]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd90      	pop	{r4, r7, pc}
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000
 800285c:	053e2d63 	.word	0x053e2d63
 8002860:	50000100 	.word	0x50000100
 8002864:	50000300 	.word	0x50000300
 8002868:	fff04007 	.word	0xfff04007

0800286c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002874:	4859      	ldr	r0, [pc, #356]	@ (80029dc <HAL_ADC_Start+0x170>)
 8002876:	f7ff fda9 	bl	80023cc <LL_ADC_GetMultimode>
 800287a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fe48 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 809f 	bne.w	80029cc <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADC_Start+0x30>
 8002898:	2302      	movs	r3, #2
 800289a:	e09a      	b.n	80029d2 <HAL_ADC_Start+0x166>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fd73 	bl	8003390 <ADC_Enable>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8086 	bne.w	80029c2 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a44      	ldr	r2, [pc, #272]	@ (80029e0 <HAL_ADC_Start+0x174>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d002      	beq.n	80028da <HAL_ADC_Start+0x6e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	e001      	b.n	80028de <HAL_ADC_Start+0x72>
 80028da:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d002      	beq.n	80028ec <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002904:	d106      	bne.n	8002914 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290a:	f023 0206 	bic.w	r2, r3, #6
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	661a      	str	r2, [r3, #96]	@ 0x60
 8002912:	e002      	b.n	800291a <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	221c      	movs	r2, #28
 8002920:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2c      	ldr	r2, [pc, #176]	@ (80029e0 <HAL_ADC_Start+0x174>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d002      	beq.n	800293a <HAL_ADC_Start+0xce>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e001      	b.n	800293e <HAL_ADC_Start+0xd2>
 800293a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4293      	cmp	r3, r2
 8002944:	d008      	beq.n	8002958 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d002      	beq.n	8002958 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d114      	bne.n	8002982 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800296e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fdb7 	bl	80024ee <LL_ADC_REG_StartConversion>
 8002980:	e026      	b.n	80029d0 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002986:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a13      	ldr	r2, [pc, #76]	@ (80029e0 <HAL_ADC_Start+0x174>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d002      	beq.n	800299e <HAL_ADC_Start+0x132>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	e001      	b.n	80029a2 <HAL_ADC_Start+0x136>
 800299e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00f      	beq.n	80029d0 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029c0:	e006      	b.n	80029d0 <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80029ca:	e001      	b.n	80029d0 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
 80029ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	50000300 	.word	0x50000300
 80029e0:	50000100 	.word	0x50000100

080029e4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ee:	4867      	ldr	r0, [pc, #412]	@ (8002b8c <HAL_ADC_PollForConversion+0x1a8>)
 80029f0:	f7ff fcec 	bl	80023cc <LL_ADC_GetMultimode>
 80029f4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d102      	bne.n	8002a04 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029fe:	2308      	movs	r3, #8
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e02a      	b.n	8002a5a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d002      	beq.n	8002a16 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d111      	bne.n	8002a3a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0a6      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a34:	2304      	movs	r3, #4
 8002a36:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a38:	e00f      	b.n	8002a5a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a3a:	4854      	ldr	r0, [pc, #336]	@ (8002b8c <HAL_ADC_PollForConversion+0x1a8>)
 8002a3c:	f7ff fcd4 	bl	80023e8 <LL_ADC_GetMultiDMATransfer>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e095      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a56:	2304      	movs	r3, #4
 8002a58:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a5a:	f7ff fadd 	bl	8002018 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a60:	e021      	b.n	8002aa6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d01d      	beq.n	8002aa6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a6a:	f7ff fad5 	bl	8002018 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <HAL_ADC_PollForConversion+0x9c>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e06d      	b.n	8002b82 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0d6      	beq.n	8002a62 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fbf3 	bl	80022b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7f5b      	ldrb	r3, [r3, #29]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d118      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d111      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	@ (8002b90 <HAL_ADC_PollForConversion+0x1ac>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_PollForConversion+0x136>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	e001      	b.n	8002b1e <HAL_ADC_PollForConversion+0x13a>
 8002b1a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d008      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b09      	cmp	r3, #9
 8002b36:	d104      	bne.n	8002b42 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e00d      	b.n	8002b5e <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <HAL_ADC_PollForConversion+0x1ac>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d002      	beq.n	8002b52 <HAL_ADC_PollForConversion+0x16e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	e001      	b.n	8002b56 <HAL_ADC_PollForConversion+0x172>
 8002b52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b56:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d104      	bne.n	8002b6e <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e008      	b.n	8002b80 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	220c      	movs	r2, #12
 8002b7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	50000300 	.word	0x50000300
 8002b90:	50000100 	.word	0x50000100

08002b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0b6      	sub	sp, #216	@ 0xd8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x22>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e3c8      	b.n	8003364 <HAL_ADC_ConfigChannel+0x7b4>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc99 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 83ad 	bne.w	8003346 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6859      	ldr	r1, [r3, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f7ff fb6c 	bl	80022d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fc87 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002c08:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc93 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002c16:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 81d9 	bne.w	8002fd6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f040 81d4 	bne.w	8002fd6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c36:	d10f      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	4619      	mov	r1, r3
 8002c44:	f7ff fb73 	bl	800232e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fb1a 	bl	800228a <LL_ADC_SetSamplingTimeCommonConfig>
 8002c56:	e00e      	b.n	8002c76 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f7ff fb62 	bl	800232e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fb0a 	bl	800228a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d022      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6919      	ldr	r1, [r3, #16]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ca8:	f7ff fa64 	bl	8002174 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6919      	ldr	r1, [r3, #16]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f7ff fab0 	bl	800221e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x124>
 8002cce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x126>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f7ff fabc 	bl	8002254 <LL_ADC_SetOffsetSaturation>
 8002cdc:	e17b      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fa69 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x15a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa5e 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	0e9b      	lsrs	r3, r3, #26
 8002d04:	f003 021f 	and.w	r2, r3, #31
 8002d08:	e01e      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x198>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff fa53 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002d38:	2320      	movs	r3, #32
 8002d3a:	e004      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002d3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1b0>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	e018      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x1e2>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e004      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002d88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d106      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa22 	bl	80021e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa06 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10a      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x220>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f9fb 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	f003 021f 	and.w	r2, r3, #31
 8002dce:	e01e      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x25e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff f9f0 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e004      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x276>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	0e9b      	lsrs	r3, r3, #26
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	e018      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x2a8>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e004      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d106      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	2101      	movs	r1, #1
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f9bf 	bl	80021e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f9a3 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x2e6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f998 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	0e9b      	lsrs	r3, r3, #26
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	e01e      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x324>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff f98d 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e004      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ecc:	fab3 f383 	clz	r3, r3
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x33c>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	f003 031f 	and.w	r3, r3, #31
 8002eea:	e016      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x36a>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002efe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e004      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002f10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d106      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	2102      	movs	r1, #2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff f95e 	bl	80021e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2103      	movs	r1, #3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f942 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x3a8>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2103      	movs	r1, #3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff f937 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	f003 021f 	and.w	r2, r3, #31
 8002f56:	e017      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x3d8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2103      	movs	r1, #3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f92c 	bl	80021bc <LL_ADC_GetOffsetChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f72:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x3f0>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	e011      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x414>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d106      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2103      	movs	r1, #3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f909 	bl	80021e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fa74 	bl	80024c8 <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8140 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f7ff f9c5 	bl	8002384 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a8f      	ldr	r2, [pc, #572]	@ (800323c <HAL_ADC_ConfigChannel+0x68c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	f040 8131 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_ADC_ConfigChannel+0x47e>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	3301      	adds	r3, #1
 800301e:	f003 031f 	and.w	r3, r3, #31
 8003022:	2b09      	cmp	r3, #9
 8003024:	bf94      	ite	ls
 8003026:	2301      	movls	r3, #1
 8003028:	2300      	movhi	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e019      	b.n	8003062 <HAL_ADC_ConfigChannel+0x4b2>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800303c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800303e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003040:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003046:	2320      	movs	r3, #32
 8003048:	e003      	b.n	8003052 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800304a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800304c:	fab3 f383 	clz	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2b09      	cmp	r3, #9
 800305a:	bf94      	ite	ls
 800305c:	2301      	movls	r3, #1
 800305e:	2300      	movhi	r3, #0
 8003060:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003062:	2b00      	cmp	r3, #0
 8003064:	d079      	beq.n	800315a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d107      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x4d2>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	3301      	adds	r3, #1
 800307a:	069b      	lsls	r3, r3, #26
 800307c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003080:	e015      	b.n	80030ae <HAL_ADC_ConfigChannel+0x4fe>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800309e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	069b      	lsls	r3, r3, #26
 80030aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x51e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0e9b      	lsrs	r3, r3, #26
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	e017      	b.n	80030fe <HAL_ADC_ConfigChannel+0x54e>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d6:	fa93 f3a3 	rbit	r3, r3
 80030da:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80030dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80030e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80030e6:	2320      	movs	r3, #32
 80030e8:	e003      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80030ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	ea42 0103 	orr.w	r1, r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x574>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	3301      	adds	r3, #1
 8003116:	f003 021f 	and.w	r2, r3, #31
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	051b      	lsls	r3, r3, #20
 8003122:	e018      	b.n	8003156 <HAL_ADC_ConfigChannel+0x5a6>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800313c:	2320      	movs	r3, #32
 800313e:	e003      	b.n	8003148 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f003 021f 	and.w	r2, r3, #31
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003156:	430b      	orrs	r3, r1
 8003158:	e081      	b.n	800325e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x5c6>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0e9b      	lsrs	r3, r3, #26
 800316c:	3301      	adds	r3, #1
 800316e:	069b      	lsls	r3, r3, #26
 8003170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003174:	e015      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x5f2>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	3301      	adds	r3, #1
 800319c:	069b      	lsls	r3, r3, #26
 800319e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x612>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	0e9b      	lsrs	r3, r3, #26
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2101      	movs	r1, #1
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	e017      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x642>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	fa93 f3a3 	rbit	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
  return result;
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	fab3 f383 	clz	r3, r3
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	3301      	adds	r3, #1
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	ea42 0103 	orr.w	r1, r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <HAL_ADC_ConfigChannel+0x66e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	3301      	adds	r3, #1
 800320a:	f003 021f 	and.w	r2, r3, #31
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	3b1e      	subs	r3, #30
 8003216:	051b      	lsls	r3, r3, #20
 8003218:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800321c:	e01e      	b.n	800325c <HAL_ADC_ConfigChannel+0x6ac>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	613b      	str	r3, [r7, #16]
  return result;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e006      	b.n	8003248 <HAL_ADC_ConfigChannel+0x698>
 800323a:	bf00      	nop
 800323c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	3b1e      	subs	r3, #30
 8003256:	051b      	lsls	r3, r3, #20
 8003258:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003262:	4619      	mov	r1, r3
 8003264:	f7ff f863 	bl	800232e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b3f      	ldr	r3, [pc, #252]	@ (800336c <HAL_ADC_ConfigChannel+0x7bc>)
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d071      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003274:	483e      	ldr	r0, [pc, #248]	@ (8003370 <HAL_ADC_ConfigChannel+0x7c0>)
 8003276:	f7fe ff6f 	bl	8002158 <LL_ADC_GetCommonPathInternalCh>
 800327a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3c      	ldr	r2, [pc, #240]	@ (8003374 <HAL_ADC_ConfigChannel+0x7c4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x6e2>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a3a      	ldr	r2, [pc, #232]	@ (8003378 <HAL_ADC_ConfigChannel+0x7c8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d127      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003296:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d121      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032a6:	d157      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032b0:	4619      	mov	r1, r3
 80032b2:	482f      	ldr	r0, [pc, #188]	@ (8003370 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b4:	f7fe ff3d 	bl	8002132 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b8:	4b30      	ldr	r3, [pc, #192]	@ (800337c <HAL_ADC_ConfigChannel+0x7cc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	4a30      	ldr	r2, [pc, #192]	@ (8003380 <HAL_ADC_ConfigChannel+0x7d0>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d2:	e002      	b.n	80032da <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e0:	e03a      	b.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <HAL_ADC_ConfigChannel+0x7d4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d113      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10d      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	@ (8003388 <HAL_ADC_ConfigChannel+0x7d8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d02a      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800330a:	4619      	mov	r1, r3
 800330c:	4818      	ldr	r0, [pc, #96]	@ (8003370 <HAL_ADC_ConfigChannel+0x7c0>)
 800330e:	f7fe ff10 	bl	8002132 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003312:	e021      	b.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <HAL_ADC_ConfigChannel+0x7dc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d11c      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800331e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a16      	ldr	r2, [pc, #88]	@ (8003388 <HAL_ADC_ConfigChannel+0x7d8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d011      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003338:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800333c:	4619      	mov	r1, r3
 800333e:	480c      	ldr	r0, [pc, #48]	@ (8003370 <HAL_ADC_ConfigChannel+0x7c0>)
 8003340:	f7fe fef7 	bl	8002132 <LL_ADC_SetCommonPathInternalCh>
 8003344:	e008      	b.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	f043 0220 	orr.w	r2, r3, #32
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003360:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003364:	4618      	mov	r0, r3
 8003366:	37d8      	adds	r7, #216	@ 0xd8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	80080000 	.word	0x80080000
 8003370:	50000300 	.word	0x50000300
 8003374:	c3210000 	.word	0xc3210000
 8003378:	90c00010 	.word	0x90c00010
 800337c:	20000000 	.word	0x20000000
 8003380:	053e2d63 	.word	0x053e2d63
 8003384:	c7520000 	.word	0xc7520000
 8003388:	50000100 	.word	0x50000100
 800338c:	cb840000 	.word	0xcb840000

08003390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f891 	bl	80024c8 <LL_ADC_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d169      	bne.n	8003480 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	4b36      	ldr	r3, [pc, #216]	@ (800348c <ADC_Enable+0xfc>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f043 0210 	orr.w	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ca:	f043 0201 	orr.w	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e055      	b.n	8003482 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff f860 	bl	80024a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033e0:	482b      	ldr	r0, [pc, #172]	@ (8003490 <ADC_Enable+0x100>)
 80033e2:	f7fe feb9 	bl	8002158 <LL_ADC_GetCommonPathInternalCh>
 80033e6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d013      	beq.n	8003418 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033f0:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <ADC_Enable+0x104>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	4a28      	ldr	r2, [pc, #160]	@ (8003498 <ADC_Enable+0x108>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800340a:	e002      	b.n	8003412 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	3b01      	subs	r3, #1
 8003410:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f9      	bne.n	800340c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003418:	f7fe fdfe 	bl	8002018 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800341e:	e028      	b.n	8003472 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f84f 	bl	80024c8 <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff f833 	bl	80024a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800343a:	f7fe fded 	bl	8002018 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d914      	bls.n	8003472 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d00d      	beq.n	8003472 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d1cf      	bne.n	8003420 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	8000003f 	.word	0x8000003f
 8003490:	50000300 	.word	0x50000300
 8003494:	20000000 	.word	0x20000000
 8003498:	053e2d63 	.word	0x053e2d63

0800349c <LL_ADC_IsEnabled>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <LL_ADC_IsEnabled+0x18>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_ADC_IsEnabled+0x1a>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d101      	bne.n	80034da <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b0a1      	sub	sp, #132	@ 0x84
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003502:	2302      	movs	r3, #2
 8003504:	e08b      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800350e:	2300      	movs	r3, #0
 8003510:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003512:	2300      	movs	r3, #0
 8003514:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800351e:	d102      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003520:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	e001      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e06a      	b.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ffb9 	bl	80034c2 <LL_ADC_REG_IsConversionOngoing>
 8003550:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb3 	bl	80034c2 <LL_ADC_REG_IsConversionOngoing>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d14c      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003562:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003564:	2b00      	cmp	r3, #0
 8003566:	d149      	bne.n	80035fc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003568:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800356a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d028      	beq.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6859      	ldr	r1, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003586:	035b      	lsls	r3, r3, #13
 8003588:	430b      	orrs	r3, r1
 800358a:	431a      	orrs	r2, r3
 800358c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003590:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003594:	f7ff ff82 	bl	800349c <LL_ADC_IsEnabled>
 8003598:	4604      	mov	r4, r0
 800359a:	4823      	ldr	r0, [pc, #140]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800359c:	f7ff ff7e 	bl	800349c <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4323      	orrs	r3, r4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d133      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035b0:	f023 030f 	bic.w	r3, r3, #15
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6811      	ldr	r1, [r2, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	430a      	orrs	r2, r1
 80035be:	431a      	orrs	r2, r3
 80035c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035c4:	e024      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035d6:	f7ff ff61 	bl	800349c <LL_ADC_IsEnabled>
 80035da:	4604      	mov	r4, r0
 80035dc:	4812      	ldr	r0, [pc, #72]	@ (8003628 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80035de:	f7ff ff5d 	bl	800349c <LL_ADC_IsEnabled>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4323      	orrs	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d112      	bne.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035fa:	e009      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800360e:	e000      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800361e:	4618      	mov	r0, r3
 8003620:	3784      	adds	r7, #132	@ 0x84
 8003622:	46bd      	mov	sp, r7
 8003624:	bd90      	pop	{r4, r7, pc}
 8003626:	bf00      	nop
 8003628:	50000100 	.word	0x50000100
 800362c:	50000300 	.word	0x50000300

08003630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800364c:	4013      	ands	r3, r2
 800364e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003658:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800365c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003662:	4a04      	ldr	r2, [pc, #16]	@ (8003674 <__NVIC_SetPriorityGrouping+0x44>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	60d3      	str	r3, [r2, #12]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__NVIC_GetPriorityGrouping+0x18>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0a1b      	lsrs	r3, r3, #8
 8003682:	f003 0307 	and.w	r3, r3, #7
}
 8003686:	4618      	mov	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	db0b      	blt.n	80036be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	4907      	ldr	r1, [pc, #28]	@ (80036cc <__NVIC_EnableIRQ+0x38>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2001      	movs	r0, #1
 80036b6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	db0a      	blt.n	80036fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	490c      	ldr	r1, [pc, #48]	@ (800371c <__NVIC_SetPriority+0x4c>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	440b      	add	r3, r1
 80036f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f8:	e00a      	b.n	8003710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4908      	ldr	r1, [pc, #32]	@ (8003720 <__NVIC_SetPriority+0x50>)
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	3b04      	subs	r3, #4
 8003708:	0112      	lsls	r2, r2, #4
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	440b      	add	r3, r1
 800370e:	761a      	strb	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000e100 	.word	0xe000e100
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	@ 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	bf28      	it	cs
 8003742:	2304      	movcs	r3, #4
 8003744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	3304      	adds	r3, #4
 800374a:	2b06      	cmp	r3, #6
 800374c:	d902      	bls.n	8003754 <NVIC_EncodePriority+0x30>
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3b03      	subs	r3, #3
 8003752:	e000      	b.n	8003756 <NVIC_EncodePriority+0x32>
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	f04f 32ff 	mov.w	r2, #4294967295
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	401a      	ands	r2, r3
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800376c:	f04f 31ff 	mov.w	r1, #4294967295
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	43d9      	mvns	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	4313      	orrs	r3, r2
         );
}
 800377e:	4618      	mov	r0, r3
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3b01      	subs	r3, #1
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800379c:	d301      	bcc.n	80037a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800379e:	2301      	movs	r3, #1
 80037a0:	e00f      	b.n	80037c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037a2:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <SysTick_Config+0x40>)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037aa:	210f      	movs	r1, #15
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	f7ff ff8e 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <SysTick_Config+0x40>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ba:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <SysTick_Config+0x40>)
 80037bc:	2207      	movs	r2, #7
 80037be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	e000e010 	.word	0xe000e010

080037d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff29 	bl	8003630 <__NVIC_SetPriorityGrouping>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	4603      	mov	r3, r0
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037f4:	f7ff ff40 	bl	8003678 <__NVIC_GetPriorityGrouping>
 80037f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	6978      	ldr	r0, [r7, #20]
 8003800:	f7ff ff90 	bl	8003724 <NVIC_EncodePriority>
 8003804:	4602      	mov	r2, r0
 8003806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff5f 	bl	80036d0 <__NVIC_SetPriority>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff ff33 	bl	8003694 <__NVIC_EnableIRQ>
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ffa4 	bl	800378c <SysTick_Config>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800385e:	e15a      	b.n	8003b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2101      	movs	r1, #1
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 814c 	beq.w	8003b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d005      	beq.n	8003890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800388c:	2b02      	cmp	r3, #2
 800388e:	d130      	bne.n	80038f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4013      	ands	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c6:	2201      	movs	r2, #1
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0201 	and.w	r2, r3, #1
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d017      	beq.n	800392e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d123      	bne.n	8003982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	08da      	lsrs	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3208      	adds	r2, #8
 8003942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	691a      	ldr	r2, [r3, #16]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	08da      	lsrs	r2, r3, #3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3208      	adds	r2, #8
 800397c:	6939      	ldr	r1, [r7, #16]
 800397e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0203 	and.w	r2, r3, #3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80a6 	beq.w	8003b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b34 <HAL_GPIO_Init+0x2e4>)
 80039c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003b34 <HAL_GPIO_Init+0x2e4>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80039d0:	4b58      	ldr	r3, [pc, #352]	@ (8003b34 <HAL_GPIO_Init+0x2e4>)
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039dc:	4a56      	ldr	r2, [pc, #344]	@ (8003b38 <HAL_GPIO_Init+0x2e8>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3302      	adds	r3, #2
 80039e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	220f      	movs	r2, #15
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a06:	d01f      	beq.n	8003a48 <HAL_GPIO_Init+0x1f8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8003b3c <HAL_GPIO_Init+0x2ec>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d019      	beq.n	8003a44 <HAL_GPIO_Init+0x1f4>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a4b      	ldr	r2, [pc, #300]	@ (8003b40 <HAL_GPIO_Init+0x2f0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d013      	beq.n	8003a40 <HAL_GPIO_Init+0x1f0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003b44 <HAL_GPIO_Init+0x2f4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00d      	beq.n	8003a3c <HAL_GPIO_Init+0x1ec>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a49      	ldr	r2, [pc, #292]	@ (8003b48 <HAL_GPIO_Init+0x2f8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <HAL_GPIO_Init+0x1e8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a48      	ldr	r2, [pc, #288]	@ (8003b4c <HAL_GPIO_Init+0x2fc>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d101      	bne.n	8003a34 <HAL_GPIO_Init+0x1e4>
 8003a30:	2305      	movs	r3, #5
 8003a32:	e00a      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a34:	2306      	movs	r3, #6
 8003a36:	e008      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e006      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e004      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e002      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	f002 0203 	and.w	r2, r2, #3
 8003a50:	0092      	lsls	r2, r2, #2
 8003a52:	4093      	lsls	r3, r2
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a5a:	4937      	ldr	r1, [pc, #220]	@ (8003b38 <HAL_GPIO_Init+0x2e8>)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a68:	4b39      	ldr	r3, [pc, #228]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a8c:	4a30      	ldr	r2, [pc, #192]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a92:	4b2f      	ldr	r3, [pc, #188]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ab6:	4a26      	ldr	r2, [pc, #152]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003abc:	4b24      	ldr	r3, [pc, #144]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b0a:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <HAL_GPIO_Init+0x300>)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	3301      	adds	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f ae9d 	bne.w	8003860 <HAL_GPIO_Init+0x10>
  }
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	48000400 	.word	0x48000400
 8003b40:	48000800 	.word	0x48000800
 8003b44:	48000c00 	.word	0x48000c00
 8003b48:	48001000 	.word	0x48001000
 8003b4c:	48001400 	.word	0x48001400
 8003b50:	40010400 	.word	0x40010400

08003b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
 8003b60:	4613      	mov	r3, r2
 8003b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b64:	787b      	ldrb	r3, [r7, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b70:	e002      	b.n	8003b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0c0      	b.n	8003d18 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f007 f878 	bl	800aca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 fe57 	bl	8006870 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e03e      	b.n	8003c46 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3311      	adds	r3, #17
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	3310      	adds	r3, #16
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3313      	adds	r3, #19
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	440b      	add	r3, r1
 8003c12:	3320      	adds	r3, #32
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	3324      	adds	r3, #36	@ 0x24
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	3301      	adds	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	791b      	ldrb	r3, [r3, #4]
 8003c4a:	7bfa      	ldrb	r2, [r7, #15]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3bb      	bcc.n	8003bc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e044      	b.n	8003ce0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	440b      	add	r3, r1
 8003c64:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	440b      	add	r3, r1
 8003c7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	73fb      	strb	r3, [r7, #15]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	791b      	ldrb	r3, [r3, #4]
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3b5      	bcc.n	8003c56 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003cf6:	f002 fdd6 	bl	80068a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7a9b      	ldrb	r3, [r3, #10]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f001 fc40 	bl	8005596 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_PCD_Start+0x16>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e012      	b.n	8003d5c <HAL_PCD_Start+0x3c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f002 fd7d 	bl	8006842 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f005 f83e 	bl	8008dce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f005 f843 	bl	8008dfc <USB_ReadInterrupts>
 8003d76:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fb04 	bl	8004390 <PCD_EP_ISR_Handler>

    return;
 8003d88:	e110      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da6:	b292      	uxth	r2, r2
 8003da8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f007 f808 	bl	800adc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003db2:	2100      	movs	r1, #0
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8fc 	bl	8003fb2 <HAL_PCD_SetAddress>

    return;
 8003dba:	e0f7      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003dd8:	b292      	uxth	r2, r2
 8003dda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003dde:	e0e5      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00c      	beq.n	8003e04 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e02:	e0d3      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d034      	beq.n	8003e78 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0204 	bic.w	r2, r2, #4
 8003e20:	b292      	uxth	r2, r2
 8003e22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0208 	bic.w	r2, r2, #8
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e50:	2100      	movs	r1, #0
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f007 f9a8 	bl	800b1a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f006 ffeb 	bl	800ae34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e70:	b292      	uxth	r2, r2
 8003e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003e76:	e099      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d027      	beq.n	8003ed2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0208 	orr.w	r2, r2, #8
 8003e94:	b292      	uxth	r2, r2
 8003e96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eac:	b292      	uxth	r2, r2
 8003eae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0204 	orr.w	r2, r2, #4
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f006 ff98 	bl	800ae00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ed0:	e06c      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d040      	beq.n	8003f5e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d12b      	bne.n	8003f56 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0204 	orr.w	r2, r2, #4
 8003f10:	b292      	uxth	r2, r2
 8003f12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f007 f92a 	bl	800b1a8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003f54:	e02a      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f006 ff52 	bl	800ae00 <HAL_PCD_SuspendCallback>
    return;
 8003f5c:	e026      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00f      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f006 ff10 	bl	800ada6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f86:	e011      	b.n	8003fac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003faa:	bf00      	nop
  }
}
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_PCD_SetAddress+0x1a>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e012      	b.n	8003ff2 <HAL_PCD_SetAddress+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f004 fedf 	bl	8008da6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	4608      	mov	r0, r1
 8004004:	4611      	mov	r1, r2
 8004006:	461a      	mov	r2, r3
 8004008:	4603      	mov	r3, r0
 800400a:	70fb      	strb	r3, [r7, #3]
 800400c:	460b      	mov	r3, r1
 800400e:	803b      	strh	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800401c:	2b00      	cmp	r3, #0
 800401e:	da0e      	bge.n	800403e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	3310      	adds	r3, #16
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	4413      	add	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2201      	movs	r2, #1
 800403a:	705a      	strb	r2, [r3, #1]
 800403c:	e00e      	b.n	800405c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	f003 0207 	and.w	r2, r3, #7
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	4413      	add	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004068:	883a      	ldrh	r2, [r7, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	78ba      	ldrb	r2, [r7, #2]
 8004072:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004074:	78bb      	ldrb	r3, [r7, #2]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d102      	bne.n	8004080 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_PCD_EP_Open+0x94>
 800408a:	2302      	movs	r3, #2
 800408c:	e00e      	b.n	80040ac <HAL_PCD_EP_Open+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68f9      	ldr	r1, [r7, #12]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 fc21 	bl	80068e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80040aa:	7afb      	ldrb	r3, [r7, #11]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	da0e      	bge.n	80040e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	f003 0207 	and.w	r2, r3, #7
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	3310      	adds	r3, #16
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	705a      	strb	r2, [r3, #1]
 80040e4:	e00e      	b.n	8004104 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	f003 0207 	and.w	r2, r3, #7
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	b2da      	uxtb	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_PCD_EP_Close+0x6a>
 800411a:	2302      	movs	r3, #2
 800411c:	e00e      	b.n	800413c <HAL_PCD_EP_Close+0x88>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68f9      	ldr	r1, [r7, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f002 ff9d 	bl	800706c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	460b      	mov	r3, r1
 8004152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 0207 	and.w	r2, r3, #7
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2200      	movs	r2, #0
 8004182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	b2da      	uxtb	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	4618      	mov	r0, r3
 8004198:	f003 f955 	bl	8007446 <USB_EPStartXfer>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 0207 	and.w	r2, r3, #7
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80041c8:	681b      	ldr	r3, [r3, #0]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	460b      	mov	r3, r1
 80041e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f003 0207 	and.w	r2, r3, #7
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	3310      	adds	r3, #16
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2200      	movs	r2, #0
 800421a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2201      	movs	r2, #1
 8004220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004222:	7afb      	ldrb	r3, [r7, #11]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	b2da      	uxtb	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6979      	ldr	r1, [r7, #20]
 8004234:	4618      	mov	r0, r3
 8004236:	f003 f906 	bl	8007446 <USB_EPStartXfer>

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	7912      	ldrb	r2, [r2, #4]
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03e      	b.n	80042e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da0e      	bge.n	8004288 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 0207 	and.w	r2, r3, #7
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	3310      	adds	r3, #16
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	705a      	strb	r2, [r3, #1]
 8004286:	e00c      	b.n	80042a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	4413      	add	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_PCD_EP_SetStall+0x7e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e00e      	b.n	80042e0 <HAL_PCD_EP_SetStall+0x9c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f004 fc69 	bl	8008ba8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	7912      	ldrb	r2, [r2, #4]
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e040      	b.n	8004388 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	da0e      	bge.n	800432c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	f003 0207 	and.w	r2, r3, #7
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	3310      	adds	r3, #16
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	705a      	strb	r2, [r3, #1]
 800432a:	e00e      	b.n	800434a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 0207 	and.w	r2, r3, #7
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	b2da      	uxtb	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004362:	2b01      	cmp	r3, #1
 8004364:	d101      	bne.n	800436a <HAL_PCD_EP_ClrStall+0x82>
 8004366:	2302      	movs	r3, #2
 8004368:	e00e      	b.n	8004388 <HAL_PCD_EP_ClrStall+0xa0>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	4618      	mov	r0, r3
 800437a:	f004 fc66 	bl	8008c4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b096      	sub	sp, #88	@ 0x58
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004398:	e3ad      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80043a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80043b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 816f 	bne.w	800469c <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d14c      	bne.n	8004464 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	81fb      	strh	r3, [r7, #14]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	89fb      	ldrh	r3, [r7, #14]
 80043e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3310      	adds	r3, #16
 80043f2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	4413      	add	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	4413      	add	r3, r2
 800440e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800441c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	441a      	add	r2, r3
 8004426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004428:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800442a:	2100      	movs	r1, #0
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f006 fca0 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 835c 	beq.w	8004af6 <PCD_EP_ISR_Handler+0x766>
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 8357 	bne.w	8004af6 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	7b1b      	ldrb	r3, [r3, #12]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004452:	b2da      	uxtb	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	731a      	strb	r2, [r3, #12]
 8004462:	e348      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800446a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004476:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800447a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800447e:	2b00      	cmp	r3, #0
 8004480:	d032      	beq.n	80044e8 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	4413      	add	r3, r2
 800449c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80044b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044bc:	b29b      	uxth	r3, r3
 80044be:	f004 fcef 	bl	8008ea0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044ce:	4013      	ands	r3, r2
 80044d0:	823b      	strh	r3, [r7, #16]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	8a3a      	ldrh	r2, [r7, #16]
 80044d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f006 fc19 	bl	800ad18 <HAL_PCD_SetupStageCallback>
 80044e6:	e306      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f280 8302 	bge.w	8004af6 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044fe:	4013      	ands	r3, r2
 8004500:	83fb      	strh	r3, [r7, #30]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	8bfa      	ldrh	r2, [r7, #30]
 8004508:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800450c:	b292      	uxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004518:	b29b      	uxth	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6812      	ldr	r2, [r2, #0]
 8004528:	4413      	add	r3, r2
 800452a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004536:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d019      	beq.n	8004574 <PCD_EP_ISR_Handler+0x1e4>
 8004540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454e:	6959      	ldr	r1, [r3, #20]
 8004550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004552:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004556:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004558:	b29b      	uxth	r3, r3
 800455a:	f004 fca1 	bl	8008ea0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800455e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	441a      	add	r2, r3
 8004568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800456a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800456c:	2100      	movs	r1, #0
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f006 fbe4 	bl	800ad3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800457e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004586:	2b00      	cmp	r3, #0
 8004588:	f040 82b5 	bne.w	8004af6 <PCD_EP_ISR_Handler+0x766>
 800458c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004590:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004598:	f000 82ad 	beq.w	8004af6 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	461a      	mov	r2, r3
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80045d2:	d91d      	bls.n	8004610 <PCD_EP_ISR_Handler+0x280>
 80045d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	647b      	str	r3, [r7, #68]	@ 0x44
 80045dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d102      	bne.n	80045ee <PCD_EP_ISR_Handler+0x25e>
 80045e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ea:	3b01      	subs	r3, #1
 80045ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	029b      	lsls	r3, r3, #10
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4313      	orrs	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004608:	b29a      	uxth	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	801a      	strh	r2, [r3, #0]
 800460e:	e026      	b.n	800465e <PCD_EP_ISR_Handler+0x2ce>
 8004610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10a      	bne.n	800462e <PCD_EP_ISR_Handler+0x29e>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004626:	b29a      	uxth	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e017      	b.n	800465e <PCD_EP_ISR_Handler+0x2ce>
 800462e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
 8004636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <PCD_EP_ISR_Handler+0x2b8>
 8004642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004644:	3301      	adds	r3, #1
 8004646:	647b      	str	r3, [r7, #68]	@ 0x44
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29a      	uxth	r2, r3
 800464e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004650:	b29b      	uxth	r3, r3
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	b29b      	uxth	r3, r3
 8004656:	4313      	orrs	r3, r2
 8004658:	b29a      	uxth	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	827b      	strh	r3, [r7, #18]
 8004670:	8a7b      	ldrh	r3, [r7, #18]
 8004672:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004676:	827b      	strh	r3, [r7, #18]
 8004678:	8a7b      	ldrh	r3, [r7, #18]
 800467a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800467e:	827b      	strh	r3, [r7, #18]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	8a7b      	ldrh	r3, [r7, #18]
 8004686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800468a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800468e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004696:	b29b      	uxth	r3, r3
 8004698:	8013      	strh	r3, [r2, #0]
 800469a:	e22c      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f280 80f6 	bge.w	80048a6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80046d0:	4013      	ands	r3, r2
 80046d2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80046e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046ec:	b292      	uxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046f0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004708:	7b1b      	ldrb	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d123      	bne.n	8004756 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	4413      	add	r3, r2
 8004728:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004732:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004736:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 808e 	beq.w	800485c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004746:	6959      	ldr	r1, [r3, #20]
 8004748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474a:	88da      	ldrh	r2, [r3, #6]
 800474c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004750:	f004 fba6 	bl	8008ea0 <USB_ReadPMA>
 8004754:	e082      	b.n	800485c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d10a      	bne.n	8004774 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800475e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004762:	461a      	mov	r2, r3
 8004764:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9d3 	bl	8004b12 <HAL_PCD_EP_DB_Receive>
 800476c:	4603      	mov	r3, r0
 800476e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004772:	e073      	b.n	800485c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800478e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	461a      	mov	r2, r3
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d022      	beq.n	8004818 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80047fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d02c      	beq.n	800485c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004808:	6959      	ldr	r1, [r3, #20]
 800480a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480c:	891a      	ldrh	r2, [r3, #8]
 800480e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004812:	f004 fb45 	bl	8008ea0 <USB_ReadPMA>
 8004816:	e021      	b.n	800485c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004820:	b29b      	uxth	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4413      	add	r3, r2
 8004832:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004840:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484e:	6959      	ldr	r1, [r3, #20]
 8004850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004852:	895a      	ldrh	r2, [r3, #10]
 8004854:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004858:	f004 fb22 	bl	8008ea0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800485c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004864:	441a      	add	r2, r3
 8004866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004868:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800486a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486c:	695a      	ldr	r2, [r3, #20]
 800486e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004872:	441a      	add	r2, r3
 8004874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004876:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <PCD_EP_ISR_Handler+0x4fc>
 8004880:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d206      	bcs.n	800489a <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800488c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f006 fa52 	bl	800ad3c <HAL_PCD_DataOutStageCallback>
 8004898:	e005      	b.n	80048a6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 fdd0 	bl	8007446 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80048a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8121 	beq.w	8004af6 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80048b4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	3310      	adds	r3, #16
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4413      	add	r3, r2
 80048c6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80048de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80048f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004900:	b29b      	uxth	r3, r3
 8004902:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004906:	78db      	ldrb	r3, [r3, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	f040 80a2 	bne.w	8004a52 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004916:	7b1b      	ldrb	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8093 	beq.w	8004a44 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800491e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d046      	beq.n	80049b8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d126      	bne.n	8004980 <PCD_EP_ISR_Handler+0x5f0>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004940:	b29b      	uxth	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	4413      	add	r3, r2
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
 800494a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	00da      	lsls	r2, r3, #3
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	4413      	add	r3, r2
 8004954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004964:	b29a      	uxth	r2, r3
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004978:	b29a      	uxth	r2, r3
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	e061      	b.n	8004a44 <PCD_EP_ISR_Handler+0x6b4>
 8004980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d15d      	bne.n	8004a44 <PCD_EP_ISR_Handler+0x6b4>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499c:	4413      	add	r3, r2
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	00da      	lsls	r2, r3, #3
 80049a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a8:	4413      	add	r3, r2
 80049aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	2200      	movs	r2, #0
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e045      	b.n	8004a44 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c0:	785b      	ldrb	r3, [r3, #1]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d126      	bne.n	8004a14 <PCD_EP_ISR_Handler+0x684>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049da:	4413      	add	r3, r2
 80049dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80049de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	e017      	b.n	8004a44 <PCD_EP_ISR_Handler+0x6b4>
 8004a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d113      	bne.n	8004a44 <PCD_EP_ISR_Handler+0x6b4>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2a:	4413      	add	r3, r2
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	00da      	lsls	r2, r3, #3
 8004a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a36:	4413      	add	r3, r2
 8004a38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	2200      	movs	r2, #0
 8004a42:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f006 f991 	bl	800ad72 <HAL_PCD_DataInStageCallback>
 8004a50:	e051      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d144      	bne.n	8004ae8 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d907      	bls.n	8004aa2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	e002      	b.n	8004aa8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d106      	bne.n	8004abe <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f006 f95b 	bl	800ad72 <HAL_PCD_DataInStageCallback>
 8004abc:	e01b      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac0:	695a      	ldr	r2, [r3, #20]
 8004ac2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ac6:	441a      	add	r2, r3
 8004ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ad4:	441a      	add	r2, r3
 8004ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 fcb0 	bl	8007446 <USB_EPStartXfer>
 8004ae6:	e006      	b.n	8004af6 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ae8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004aec:	461a      	mov	r2, r3
 8004aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f917 	bl	8004d24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f6ff ac49 	blt.w	800439a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3758      	adds	r7, #88	@ 0x58
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b088      	sub	sp, #32
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d07c      	beq.n	8004c24 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	6812      	ldr	r2, [r2, #0]
 8004b42:	4413      	add	r3, r2
 8004b44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	8b7b      	ldrh	r3, [r7, #26]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d306      	bcc.n	8004b68 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	8b7b      	ldrh	r3, [r7, #26]
 8004b60:	1ad2      	subs	r2, r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	619a      	str	r2, [r3, #24]
 8004b66:	e002      	b.n	8004b6e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d123      	bne.n	8004bbe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b90:	833b      	strh	r3, [r7, #24]
 8004b92:	8b3b      	ldrh	r3, [r7, #24]
 8004b94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004b98:	833b      	strh	r3, [r7, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8b3b      	ldrh	r3, [r7, #24]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01f      	beq.n	8004c08 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be2:	82fb      	strh	r3, [r7, #22]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	441a      	add	r2, r3
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004c08:	8b7b      	ldrh	r3, [r7, #26]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 8085 	beq.w	8004d1a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6959      	ldr	r1, [r3, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	891a      	ldrh	r2, [r3, #8]
 8004c1c:	8b7b      	ldrh	r3, [r7, #26]
 8004c1e:	f004 f93f 	bl	8008ea0 <USB_ReadPMA>
 8004c22:	e07a      	b.n	8004d1a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	8b7b      	ldrh	r3, [r7, #26]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d306      	bcc.n	8004c62 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	699a      	ldr	r2, [r3, #24]
 8004c58:	8b7b      	ldrh	r3, [r7, #26]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	619a      	str	r2, [r3, #24]
 8004c60:	e002      	b.n	8004c68 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2200      	movs	r2, #0
 8004c66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d123      	bne.n	8004cb8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	83fb      	strh	r3, [r7, #30]
 8004c8c:	8bfb      	ldrh	r3, [r7, #30]
 8004c8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c92:	83fb      	strh	r3, [r7, #30]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	441a      	add	r2, r3
 8004ca2:	8bfb      	ldrh	r3, [r7, #30]
 8004ca4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11f      	bne.n	8004d02 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	83bb      	strh	r3, [r7, #28]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8bbb      	ldrh	r3, [r7, #28]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d02:	8b7b      	ldrh	r3, [r7, #26]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6959      	ldr	r1, [r3, #20]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	895a      	ldrh	r2, [r3, #10]
 8004d14:	8b7b      	ldrh	r3, [r7, #26]
 8004d16:	f004 f8c3 	bl	8008ea0 <USB_ReadPMA>
    }
  }

  return count;
 8004d1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b0a4      	sub	sp, #144	@ 0x90
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 81db 	beq.w	80050f4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	4413      	add	r3, r2
 8004d58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d907      	bls.n	8004d82 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	619a      	str	r2, [r3, #24]
 8004d80:	e002      	b.n	8004d88 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 80b9 	bne.w	8004f04 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d126      	bne.n	8004de8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	4413      	add	r3, r2
 8004db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	00da      	lsls	r2, r3, #3
 8004db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dba:	4413      	add	r3, r2
 8004dbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e01a      	b.n	8004e1e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d116      	bne.n	8004e1e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	4413      	add	r3, r2
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	00da      	lsls	r2, r3, #3
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e10:	4413      	add	r3, r2
 8004e12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d126      	bne.n	8004e7a <HAL_PCD_EP_DB_Transmit+0x156>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	00da      	lsls	r2, r3, #3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	801a      	strh	r2, [r3, #0]
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	e017      	b.n	8004eaa <HAL_PCD_EP_DB_Transmit+0x186>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d113      	bne.n	8004eaa <HAL_PCD_EP_DB_Transmit+0x186>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	4413      	add	r3, r2
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	00da      	lsls	r2, r3, #3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ea2:	623b      	str	r3, [r7, #32]
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f005 ff5e 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004eb6:	88fb      	ldrh	r3, [r7, #6]
 8004eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 82fa 	beq.w	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004edc:	82fb      	strh	r3, [r7, #22]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ef6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]
 8004f02:	e2d8      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d021      	beq.n	8004f52 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 82ac 	bne.w	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f66:	441a      	add	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f74:	441a      	add	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6a1a      	ldr	r2, [r3, #32]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d30b      	bcc.n	8004f9e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f96:	1ad2      	subs	r2, r2, r3
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	621a      	str	r2, [r3, #32]
 8004f9c:	e017      	b.n	8004fce <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004fa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004faa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004fb6:	e00a      	b.n	8004fce <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d165      	bne.n	80050a2 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fea:	4413      	add	r3, r2
 8004fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	00da      	lsls	r2, r3, #3
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005008:	b29a      	uxth	r2, r3
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005012:	2b3e      	cmp	r3, #62	@ 0x3e
 8005014:	d91d      	bls.n	8005052 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005016:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800501e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_PCD_EP_DB_Transmit+0x30c>
 800502a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502c:	3b01      	subs	r3, #1
 800502e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29a      	uxth	r2, r3
 8005036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005038:	b29b      	uxth	r3, r3
 800503a:	029b      	lsls	r3, r3, #10
 800503c:	b29b      	uxth	r3, r3
 800503e:	4313      	orrs	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504a:	b29a      	uxth	r2, r3
 800504c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	e044      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <HAL_PCD_EP_DB_Transmit+0x34c>
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005068:	b29a      	uxth	r2, r3
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e035      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_PCD_EP_DB_Transmit+0x366>
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	3301      	adds	r3, #1
 8005088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29a      	uxth	r2, r3
 8005090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005092:	b29b      	uxth	r3, r3
 8005094:	029b      	lsls	r3, r3, #10
 8005096:	b29b      	uxth	r3, r3
 8005098:	4313      	orrs	r3, r2
 800509a:	b29a      	uxth	r2, r3
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e01c      	b.n	80050dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	785b      	ldrb	r3, [r3, #1]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d118      	bne.n	80050dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	461a      	mov	r2, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050be:	4413      	add	r3, r2
 80050c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00da      	lsls	r2, r3, #3
 80050c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ca:	4413      	add	r3, r2
 80050cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6818      	ldr	r0, [r3, #0]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	6959      	ldr	r1, [r3, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	891a      	ldrh	r2, [r3, #8]
 80050e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f003 fe95 	bl	8008e1c <USB_WritePMA>
 80050f2:	e1e0      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	4413      	add	r3, r2
 800510e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005112:	881b      	ldrh	r3, [r3, #0]
 8005114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005118:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005124:	429a      	cmp	r2, r3
 8005126:	d307      	bcc.n	8005138 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005130:	1ad2      	subs	r2, r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	619a      	str	r2, [r3, #24]
 8005136:	e002      	b.n	800513e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	f040 80c0 	bne.w	80052c8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d126      	bne.n	800519e <HAL_PCD_EP_DB_Transmit+0x47a>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515e:	b29b      	uxth	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005164:	4413      	add	r3, r2
 8005166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	00da      	lsls	r2, r3, #3
 800516e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005170:	4413      	add	r3, r2
 8005172:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005176:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29b      	uxth	r3, r3
 800517e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005182:	b29a      	uxth	r2, r3
 8005184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005196:	b29a      	uxth	r2, r3
 8005198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e01a      	b.n	80051d4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d116      	bne.n	80051d4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051ba:	4413      	add	r3, r2
 80051bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051d0:	2200      	movs	r2, #0
 80051d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d12b      	bne.n	800523a <HAL_PCD_EP_DB_Transmit+0x516>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f6:	4413      	add	r3, r2
 80051f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	00da      	lsls	r2, r3, #3
 8005200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005202:	4413      	add	r3, r2
 8005204:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800520c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005218:	b29a      	uxth	r2, r3
 800521a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005230:	b29a      	uxth	r2, r3
 8005232:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	e017      	b.n	800526a <HAL_PCD_EP_DB_Transmit+0x546>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d113      	bne.n	800526a <HAL_PCD_EP_DB_Transmit+0x546>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005250:	4413      	add	r3, r2
 8005252:	677b      	str	r3, [r7, #116]	@ 0x74
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	00da      	lsls	r2, r3, #3
 800525a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800525c:	4413      	add	r3, r2
 800525e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005262:	673b      	str	r3, [r7, #112]	@ 0x70
 8005264:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005266:	2200      	movs	r2, #0
 8005268:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f005 fd7e 	bl	800ad72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 811a 	bne.w	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	461a      	mov	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]
 80052c6:	e0f6      	b.n	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d121      	bne.n	8005316 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800530a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800530e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800531c:	2b01      	cmp	r3, #1
 800531e:	f040 80ca 	bne.w	80054b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800532a:	441a      	add	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005338:	441a      	add	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	429a      	cmp	r2, r3
 8005348:	d30b      	bcc.n	8005362 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	621a      	str	r2, [r3, #32]
 8005360:	e017      	b.n	8005392 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d108      	bne.n	800537c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800536a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800536e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800537a:	e00a      	b.n	8005392 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	657b      	str	r3, [r7, #84]	@ 0x54
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d165      	bne.n	800546c <HAL_PCD_EP_DB_Transmit+0x748>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	461a      	mov	r2, r3
 80053b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053b4:	4413      	add	r3, r2
 80053b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	00da      	lsls	r2, r3, #3
 80053be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053c0:	4413      	add	r3, r2
 80053c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80053de:	d91d      	bls.n	800541c <HAL_PCD_EP_DB_Transmit+0x6f8>
 80053e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <HAL_PCD_EP_DB_Transmit+0x6d6>
 80053f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053f6:	3b01      	subs	r3, #1
 80053f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005402:	b29b      	uxth	r3, r3
 8005404:	029b      	lsls	r3, r3, #10
 8005406:	b29b      	uxth	r3, r3
 8005408:	4313      	orrs	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29a      	uxth	r2, r3
 8005416:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	e041      	b.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_PCD_EP_DB_Transmit+0x716>
 8005424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005432:	b29a      	uxth	r2, r3
 8005434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e032      	b.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800543a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_PCD_EP_DB_Transmit+0x730>
 800544e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005450:	3301      	adds	r3, #1
 8005452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	b29a      	uxth	r2, r3
 800545a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800545c:	b29b      	uxth	r3, r3
 800545e:	029b      	lsls	r3, r3, #10
 8005460:	b29b      	uxth	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	b29a      	uxth	r2, r3
 8005466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e019      	b.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d115      	bne.n	80054a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005482:	4413      	add	r3, r2
 8005484:	657b      	str	r3, [r7, #84]	@ 0x54
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	00da      	lsls	r2, r3, #3
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	4413      	add	r3, r2
 8005490:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005494:	653b      	str	r3, [r7, #80]	@ 0x50
 8005496:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800549a:	b29a      	uxth	r2, r3
 800549c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800549e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6959      	ldr	r1, [r3, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	895a      	ldrh	r2, [r3, #10]
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	f003 fcb3 	bl	8008e1c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d0:	82bb      	strh	r3, [r7, #20]
 80054d2:	8abb      	ldrh	r3, [r7, #20]
 80054d4:	f083 0310 	eor.w	r3, r3, #16
 80054d8:	82bb      	strh	r3, [r7, #20]
 80054da:	8abb      	ldrh	r3, [r7, #20]
 80054dc:	f083 0320 	eor.w	r3, r3, #32
 80054e0:	82bb      	strh	r3, [r7, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	8abb      	ldrh	r3, [r7, #20]
 80054f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005502:	b29b      	uxth	r3, r3
 8005504:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3790      	adds	r7, #144	@ 0x90
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	460b      	mov	r3, r1
 800551c:	817b      	strh	r3, [r7, #10]
 800551e:	4613      	mov	r3, r2
 8005520:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800552e:	897b      	ldrh	r3, [r7, #10]
 8005530:	f003 0207 	and.w	r2, r3, #7
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3310      	adds	r3, #16
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e009      	b.n	800555a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005546:	897a      	ldrh	r2, [r7, #10]
 8005548:	4613      	mov	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d107      	bne.n	8005570 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	b29a      	uxth	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	80da      	strh	r2, [r3, #6]
 800556e:	e00b      	b.n	8005588 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2201      	movs	r2, #1
 8005574:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	b29a      	uxth	r2, r3
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0c1b      	lsrs	r3, r3, #16
 8005582:	b29a      	uxth	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f043 0302 	orr.w	r3, r3, #2
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d141      	bne.n	800567e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055fa:	4b4b      	ldr	r3, [pc, #300]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005606:	d131      	bne.n	800566c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005608:	4b47      	ldr	r3, [pc, #284]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800560a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800560e:	4a46      	ldr	r2, [pc, #280]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005618:	4b43      	ldr	r3, [pc, #268]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005620:	4a41      	ldr	r2, [pc, #260]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005628:	4b40      	ldr	r3, [pc, #256]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2232      	movs	r2, #50	@ 0x32
 800562e:	fb02 f303 	mul.w	r3, r2, r3
 8005632:	4a3f      	ldr	r2, [pc, #252]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005634:	fba2 2303 	umull	r2, r3, r2, r3
 8005638:	0c9b      	lsrs	r3, r3, #18
 800563a:	3301      	adds	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800563e:	e002      	b.n	8005646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005646:	4b38      	ldr	r3, [pc, #224]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005652:	d102      	bne.n	800565a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f2      	bne.n	8005640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800565a:	4b33      	ldr	r3, [pc, #204]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005666:	d158      	bne.n	800571a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e057      	b.n	800571c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566c:	4b2e      	ldr	r3, [pc, #184]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800566e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005672:	4a2d      	ldr	r2, [pc, #180]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800567c:	e04d      	b.n	800571a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005684:	d141      	bne.n	800570a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005686:	4b28      	ldr	r3, [pc, #160]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800568e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005692:	d131      	bne.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800569a:	4a23      	ldr	r2, [pc, #140]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056a4:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056b4:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2232      	movs	r2, #50	@ 0x32
 80056ba:	fb02 f303 	mul.w	r3, r2, r3
 80056be:	4a1c      	ldr	r2, [pc, #112]	@ (8005730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80056c0:	fba2 2303 	umull	r2, r3, r2, r3
 80056c4:	0c9b      	lsrs	r3, r3, #18
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ca:	e002      	b.n	80056d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056de:	d102      	bne.n	80056e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1f2      	bne.n	80056cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056e6:	4b10      	ldr	r3, [pc, #64]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f2:	d112      	bne.n	800571a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e011      	b.n	800571c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005708:	e007      	b.n	800571a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800570a:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005712:	4a05      	ldr	r2, [pc, #20]	@ (8005728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005718:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	40007000 	.word	0x40007000
 800572c:	20000000 	.word	0x20000000
 8005730:	431bde83 	.word	0x431bde83

08005734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005738:	4b05      	ldr	r3, [pc, #20]	@ (8005750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4a04      	ldr	r2, [pc, #16]	@ (8005750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800573e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005742:	6093      	str	r3, [r2, #8]
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40007000 	.word	0x40007000

08005754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e2fe      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d075      	beq.n	800585e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005772:	4b97      	ldr	r3, [pc, #604]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 030c 	and.w	r3, r3, #12
 800577a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800577c:	4b94      	ldr	r3, [pc, #592]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d102      	bne.n	8005792 <HAL_RCC_OscConfig+0x3e>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d002      	beq.n	8005798 <HAL_RCC_OscConfig+0x44>
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d10b      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005798:	4b8d      	ldr	r3, [pc, #564]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d05b      	beq.n	800585c <HAL_RCC_OscConfig+0x108>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d157      	bne.n	800585c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e2d9      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b8:	d106      	bne.n	80057c8 <HAL_RCC_OscConfig+0x74>
 80057ba:	4b85      	ldr	r3, [pc, #532]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a84      	ldr	r2, [pc, #528]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e01d      	b.n	8005804 <HAL_RCC_OscConfig+0xb0>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d0:	d10c      	bne.n	80057ec <HAL_RCC_OscConfig+0x98>
 80057d2:	4b7f      	ldr	r3, [pc, #508]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a7e      	ldr	r2, [pc, #504]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	4b7c      	ldr	r3, [pc, #496]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a7b      	ldr	r2, [pc, #492]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e00b      	b.n	8005804 <HAL_RCC_OscConfig+0xb0>
 80057ec:	4b78      	ldr	r3, [pc, #480]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a77      	ldr	r2, [pc, #476]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b75      	ldr	r3, [pc, #468]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a74      	ldr	r2, [pc, #464]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d013      	beq.n	8005834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fc fc04 	bl	8002018 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005814:	f7fc fc00 	bl	8002018 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b64      	cmp	r3, #100	@ 0x64
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e29e      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005826:	4b6a      	ldr	r3, [pc, #424]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0xc0>
 8005832:	e014      	b.n	800585e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fc fbf0 	bl	8002018 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800583c:	f7fc fbec 	bl	8002018 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	@ 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e28a      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584e:	4b60      	ldr	r3, [pc, #384]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f0      	bne.n	800583c <HAL_RCC_OscConfig+0xe8>
 800585a:	e000      	b.n	800585e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d075      	beq.n	8005956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800586a:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005874:	4b56      	ldr	r3, [pc, #344]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	d102      	bne.n	800588a <HAL_RCC_OscConfig+0x136>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d002      	beq.n	8005890 <HAL_RCC_OscConfig+0x13c>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11f      	bne.n	80058d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	4b4f      	ldr	r3, [pc, #316]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x154>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e25d      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b49      	ldr	r3, [pc, #292]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	4946      	ldr	r1, [pc, #280]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058bc:	4b45      	ldr	r3, [pc, #276]	@ (80059d4 <HAL_RCC_OscConfig+0x280>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fc fb5d 	bl	8001f80 <HAL_InitTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d043      	beq.n	8005954 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e249      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d023      	beq.n	8005920 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d8:	4b3d      	ldr	r3, [pc, #244]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3c      	ldr	r2, [pc, #240]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e4:	f7fc fb98 	bl	8002018 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ec:	f7fc fb94 	bl	8002018 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e232      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058fe:	4b34      	ldr	r3, [pc, #208]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590a:	4b31      	ldr	r3, [pc, #196]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	492d      	ldr	r1, [pc, #180]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	604b      	str	r3, [r1, #4]
 800591e:	e01a      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005920:	4b2b      	ldr	r3, [pc, #172]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2a      	ldr	r2, [pc, #168]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fc fb74 	bl	8002018 <HAL_GetTick>
 8005930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005932:	e008      	b.n	8005946 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005934:	f7fc fb70 	bl	8002018 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e20e      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005946:	4b22      	ldr	r3, [pc, #136]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f0      	bne.n	8005934 <HAL_RCC_OscConfig+0x1e0>
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d041      	beq.n	80059e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01c      	beq.n	80059a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596a:	4b19      	ldr	r3, [pc, #100]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 800596c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005970:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597a:	f7fc fb4d 	bl	8002018 <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005982:	f7fc fb49 	bl	8002018 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e1e7      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005994:	4b0e      	ldr	r3, [pc, #56]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 8005996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ef      	beq.n	8005982 <HAL_RCC_OscConfig+0x22e>
 80059a2:	e020      	b.n	80059e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a4:	4b0a      	ldr	r3, [pc, #40]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80059a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059aa:	4a09      	ldr	r2, [pc, #36]	@ (80059d0 <HAL_RCC_OscConfig+0x27c>)
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b4:	f7fc fb30 	bl	8002018 <HAL_GetTick>
 80059b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059ba:	e00d      	b.n	80059d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059bc:	f7fc fb2c 	bl	8002018 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d906      	bls.n	80059d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e1ca      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059d8:	4b8c      	ldr	r3, [pc, #560]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 80059da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ea      	bne.n	80059bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80a6 	beq.w	8005b40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059f4:	2300      	movs	r3, #0
 80059f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059f8:	4b84      	ldr	r3, [pc, #528]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 80059fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_OscConfig+0x2b4>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <HAL_RCC_OscConfig+0x2b6>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00d      	beq.n	8005a2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a12:	4a7e      	ldr	r2, [pc, #504]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005a26:	2301      	movs	r3, #1
 8005a28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2a:	4b79      	ldr	r3, [pc, #484]	@ (8005c10 <HAL_RCC_OscConfig+0x4bc>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d118      	bne.n	8005a68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a36:	4b76      	ldr	r3, [pc, #472]	@ (8005c10 <HAL_RCC_OscConfig+0x4bc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a75      	ldr	r2, [pc, #468]	@ (8005c10 <HAL_RCC_OscConfig+0x4bc>)
 8005a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a42:	f7fc fae9 	bl	8002018 <HAL_GetTick>
 8005a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4a:	f7fc fae5 	bl	8002018 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e183      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c10 <HAL_RCC_OscConfig+0x4bc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f0      	beq.n	8005a4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d108      	bne.n	8005a82 <HAL_RCC_OscConfig+0x32e>
 8005a70:	4b66      	ldr	r3, [pc, #408]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a65      	ldr	r2, [pc, #404]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a80:	e024      	b.n	8005acc <HAL_RCC_OscConfig+0x378>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	2b05      	cmp	r3, #5
 8005a88:	d110      	bne.n	8005aac <HAL_RCC_OscConfig+0x358>
 8005a8a:	4b60      	ldr	r3, [pc, #384]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a90:	4a5e      	ldr	r2, [pc, #376]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005aaa:	e00f      	b.n	8005acc <HAL_RCC_OscConfig+0x378>
 8005aac:	4b57      	ldr	r3, [pc, #348]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	4a56      	ldr	r2, [pc, #344]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005abc:	4b53      	ldr	r3, [pc, #332]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac2:	4a52      	ldr	r2, [pc, #328]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005ac4:	f023 0304 	bic.w	r3, r3, #4
 8005ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d016      	beq.n	8005b02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fc faa0 	bl	8002018 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005adc:	f7fc fa9c 	bl	8002018 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e138      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af2:	4b46      	ldr	r3, [pc, #280]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ed      	beq.n	8005adc <HAL_RCC_OscConfig+0x388>
 8005b00:	e015      	b.n	8005b2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b02:	f7fc fa89 	bl	8002018 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b08:	e00a      	b.n	8005b20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b0a:	f7fc fa85 	bl	8002018 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e121      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b20:	4b3a      	ldr	r3, [pc, #232]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1ed      	bne.n	8005b0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b2e:	7ffb      	ldrb	r3, [r7, #31]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d105      	bne.n	8005b40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b34:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b38:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d03c      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d01c      	beq.n	8005b8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b54:	4b2d      	ldr	r3, [pc, #180]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b5c:	f043 0301 	orr.w	r3, r3, #1
 8005b60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fc fa58 	bl	8002018 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b6c:	f7fc fa54 	bl	8002018 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e0f2      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b7e:	4b23      	ldr	r3, [pc, #140]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ef      	beq.n	8005b6c <HAL_RCC_OscConfig+0x418>
 8005b8c:	e01b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9e:	f7fc fa3b 	bl	8002018 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ba6:	f7fc fa37 	bl	8002018 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e0d5      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bb8:	4b14      	ldr	r3, [pc, #80]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1ef      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80c9 	beq.w	8005d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 030c 	and.w	r3, r3, #12
 8005bd8:	2b0c      	cmp	r3, #12
 8005bda:	f000 8083 	beq.w	8005ce4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d15e      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be6:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <HAL_RCC_OscConfig+0x4b8>)
 8005bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf2:	f7fc fa11 	bl	8002018 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bf8:	e00c      	b.n	8005c14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fc fa0d 	bl	8002018 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d905      	bls.n	8005c14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e0ab      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c14:	4b55      	ldr	r3, [pc, #340]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1ec      	bne.n	8005bfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c20:	4b52      	ldr	r3, [pc, #328]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c22:	68da      	ldr	r2, [r3, #12]
 8005c24:	4b52      	ldr	r3, [pc, #328]	@ (8005d70 <HAL_RCC_OscConfig+0x61c>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	6a11      	ldr	r1, [r2, #32]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c30:	3a01      	subs	r2, #1
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	4311      	orrs	r1, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005c3a:	0212      	lsls	r2, r2, #8
 8005c3c:	4311      	orrs	r1, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c42:	0852      	lsrs	r2, r2, #1
 8005c44:	3a01      	subs	r2, #1
 8005c46:	0552      	lsls	r2, r2, #21
 8005c48:	4311      	orrs	r1, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c4e:	0852      	lsrs	r2, r2, #1
 8005c50:	3a01      	subs	r2, #1
 8005c52:	0652      	lsls	r2, r2, #25
 8005c54:	4311      	orrs	r1, r2
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c5a:	06d2      	lsls	r2, r2, #27
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	4943      	ldr	r1, [pc, #268]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c64:	4b41      	ldr	r3, [pc, #260]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a40      	ldr	r2, [pc, #256]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c70:	4b3e      	ldr	r3, [pc, #248]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	4a3d      	ldr	r2, [pc, #244]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c7c:	f7fc f9cc 	bl	8002018 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c84:	f7fc f9c8 	bl	8002018 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e066      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c96:	4b35      	ldr	r3, [pc, #212]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x530>
 8005ca2:	e05e      	b.n	8005d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca4:	4b31      	ldr	r3, [pc, #196]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a30      	ldr	r2, [pc, #192]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fc f9b2 	bl	8002018 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fc f9ae 	bl	8002018 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e04c      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cca:	4b28      	ldr	r3, [pc, #160]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005cd6:	4b25      	ldr	r3, [pc, #148]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	4924      	ldr	r1, [pc, #144]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005cdc:	4b25      	ldr	r3, [pc, #148]	@ (8005d74 <HAL_RCC_OscConfig+0x620>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60cb      	str	r3, [r1, #12]
 8005ce2:	e03e      	b.n	8005d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e039      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d6c <HAL_RCC_OscConfig+0x618>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f003 0203 	and.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d12c      	bne.n	8005d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d123      	bne.n	8005d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d11b      	bne.n	8005d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d113      	bne.n	8005d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	3b01      	subs	r3, #1
 8005d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d109      	bne.n	8005d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	3b01      	subs	r3, #1
 8005d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	019f800c 	.word	0x019f800c
 8005d74:	feeefffc 	.word	0xfeeefffc

08005d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e11e      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d90:	4b91      	ldr	r3, [pc, #580]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d910      	bls.n	8005dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b8e      	ldr	r3, [pc, #568]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 020f 	bic.w	r2, r3, #15
 8005da6:	498c      	ldr	r1, [pc, #560]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b8a      	ldr	r3, [pc, #552]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e106      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d073      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d129      	bne.n	8005e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd4:	4b81      	ldr	r3, [pc, #516]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0f4      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005de4:	f000 f966 	bl	80060b4 <RCC_GetSysClockFreqFromPLLSource>
 8005de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe0 <HAL_RCC_ClockConfig+0x268>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d93f      	bls.n	8005e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005df2:	4b7a      	ldr	r3, [pc, #488]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d033      	beq.n	8005e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d12f      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e12:	4b72      	ldr	r3, [pc, #456]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1a:	4a70      	ldr	r2, [pc, #448]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e22:	2380      	movs	r3, #128	@ 0x80
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e024      	b.n	8005e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e30:	4b6a      	ldr	r3, [pc, #424]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d109      	bne.n	8005e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0c6      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e40:	4b66      	ldr	r3, [pc, #408]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0be      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005e50:	f000 f8ce 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4a61      	ldr	r2, [pc, #388]	@ (8005fe0 <HAL_RCC_ClockConfig+0x268>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d909      	bls.n	8005e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e66:	4a5d      	ldr	r2, [pc, #372]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e6e:	2380      	movs	r3, #128	@ 0x80
 8005e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e72:	4b5a      	ldr	r3, [pc, #360]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f023 0203 	bic.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	4957      	ldr	r1, [pc, #348]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e84:	f7fc f8c8 	bl	8002018 <HAL_GetTick>
 8005e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8a:	e00a      	b.n	8005ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e8c:	f7fc f8c4 	bl	8002018 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e095      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 020c 	and.w	r2, r3, #12
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d1eb      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d023      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ecc:	4b43      	ldr	r3, [pc, #268]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a42      	ldr	r2, [pc, #264]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005ed2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eec:	4a3b      	ldr	r2, [pc, #236]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef4:	4b39      	ldr	r3, [pc, #228]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4936      	ldr	r1, [pc, #216]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b80      	cmp	r3, #128	@ 0x80
 8005f0c:	d105      	bne.n	8005f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f0e:	4b33      	ldr	r3, [pc, #204]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	4a32      	ldr	r2, [pc, #200]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d21d      	bcs.n	8005f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f28:	4b2b      	ldr	r3, [pc, #172]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f023 020f 	bic.w	r2, r3, #15
 8005f30:	4929      	ldr	r1, [pc, #164]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f38:	f7fc f86e 	bl	8002018 <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f40:	f7fc f86a 	bl	8002018 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e03b      	b.n	8005fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b20      	ldr	r3, [pc, #128]	@ (8005fd8 <HAL_RCC_ClockConfig+0x260>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d1ed      	bne.n	8005f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f70:	4b1a      	ldr	r3, [pc, #104]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	4917      	ldr	r1, [pc, #92]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d009      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f8e:	4b13      	ldr	r3, [pc, #76]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	490f      	ldr	r1, [pc, #60]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fa2:	f000 f825 	bl	8005ff0 <HAL_RCC_GetSysClockFreq>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <HAL_RCC_ClockConfig+0x264>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	490c      	ldr	r1, [pc, #48]	@ (8005fe4 <HAL_RCC_ClockConfig+0x26c>)
 8005fb4:	5ccb      	ldrb	r3, [r1, r3]
 8005fb6:	f003 031f 	and.w	r3, r3, #31
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <HAL_RCC_ClockConfig+0x270>)
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <HAL_RCC_ClockConfig+0x274>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fb ffda 	bl	8001f80 <HAL_InitTick>
 8005fcc:	4603      	mov	r3, r0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40022000 	.word	0x40022000
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	04c4b400 	.word	0x04c4b400
 8005fe4:	0800e288 	.word	0x0800e288
 8005fe8:	20000000 	.word	0x20000000
 8005fec:	20000004 	.word	0x20000004

08005ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d102      	bne.n	8006008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006002:	4b2a      	ldr	r3, [pc, #168]	@ (80060ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e047      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006008:	4b27      	ldr	r3, [pc, #156]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b08      	cmp	r3, #8
 8006012:	d102      	bne.n	800601a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006014:	4b26      	ldr	r3, [pc, #152]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	e03e      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
 8006022:	2b0c      	cmp	r3, #12
 8006024:	d136      	bne.n	8006094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006026:	4b20      	ldr	r3, [pc, #128]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006030:	4b1d      	ldr	r3, [pc, #116]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	091b      	lsrs	r3, r3, #4
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b03      	cmp	r3, #3
 8006042:	d10c      	bne.n	800605e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006044:	4a1a      	ldr	r2, [pc, #104]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	fbb2 f3f3 	udiv	r3, r2, r3
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800604e:	68d2      	ldr	r2, [r2, #12]
 8006050:	0a12      	lsrs	r2, r2, #8
 8006052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	617b      	str	r3, [r7, #20]
      break;
 800605c:	e00c      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800605e:	4a13      	ldr	r2, [pc, #76]	@ (80060ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	fbb2 f3f3 	udiv	r3, r2, r3
 8006066:	4a10      	ldr	r2, [pc, #64]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006068:	68d2      	ldr	r2, [r2, #12]
 800606a:	0a12      	lsrs	r2, r2, #8
 800606c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006070:	fb02 f303 	mul.w	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]
      break;
 8006076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006078:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	0e5b      	lsrs	r3, r3, #25
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	3301      	adds	r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e001      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006098:	693b      	ldr	r3, [r7, #16]
}
 800609a:	4618      	mov	r0, r3
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000
 80060ac:	00f42400 	.word	0x00f42400
 80060b0:	007a1200 	.word	0x007a1200

080060b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060ba:	4b1e      	ldr	r3, [pc, #120]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d10c      	bne.n	80060f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060d8:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4a14      	ldr	r2, [pc, #80]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060e2:	68d2      	ldr	r2, [r2, #12]
 80060e4:	0a12      	lsrs	r2, r2, #8
 80060e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	617b      	str	r3, [r7, #20]
    break;
 80060f0:	e00c      	b.n	800610c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80060f2:	4a12      	ldr	r2, [pc, #72]	@ (800613c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fa:	4a0e      	ldr	r2, [pc, #56]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	0a12      	lsrs	r2, r2, #8
 8006100:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006104:	fb02 f303 	mul.w	r3, r2, r3
 8006108:	617b      	str	r3, [r7, #20]
    break;
 800610a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800610c:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	0e5b      	lsrs	r3, r3, #25
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006126:	687b      	ldr	r3, [r7, #4]
}
 8006128:	4618      	mov	r0, r3
 800612a:	371c      	adds	r7, #28
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40021000 	.word	0x40021000
 8006138:	007a1200 	.word	0x007a1200
 800613c:	00f42400 	.word	0x00f42400

08006140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006148:	2300      	movs	r3, #0
 800614a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800614c:	2300      	movs	r3, #0
 800614e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8098 	beq.w	800628e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b43      	ldr	r3, [pc, #268]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10d      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	4b40      	ldr	r3, [pc, #256]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006172:	4a3f      	ldr	r2, [pc, #252]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	@ 0x58
 800617a:	4b3d      	ldr	r3, [pc, #244]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006182:	60bb      	str	r3, [r7, #8]
 8006184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006186:	2301      	movs	r3, #1
 8006188:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800618a:	4b3a      	ldr	r3, [pc, #232]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a39      	ldr	r2, [pc, #228]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006196:	f7fb ff3f 	bl	8002018 <HAL_GetTick>
 800619a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800619c:	e009      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800619e:	f7fb ff3b 	bl	8002018 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d902      	bls.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	74fb      	strb	r3, [r7, #19]
        break;
 80061b0:	e005      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061b2:	4b30      	ldr	r3, [pc, #192]	@ (8006274 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0ef      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80061be:	7cfb      	ldrb	r3, [r7, #19]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d159      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d01e      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d019      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061e0:	4b23      	ldr	r3, [pc, #140]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ec:	4b20      	ldr	r3, [pc, #128]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006202:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800620c:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621e:	f7fb fefb 	bl	8002018 <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006224:	e00b      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006226:	f7fb fef7 	bl	8002018 <HAL_GetTick>
 800622a:	4602      	mov	r2, r0
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006234:	4293      	cmp	r3, r2
 8006236:	d902      	bls.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	74fb      	strb	r3, [r7, #19]
            break;
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800623e:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0ec      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006252:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006260:	4903      	ldr	r1, [pc, #12]	@ (8006270 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006268:	e008      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	74bb      	strb	r3, [r7, #18]
 800626e:	e005      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006270:	40021000 	.word	0x40021000
 8006274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006278:	7cfb      	ldrb	r3, [r7, #19]
 800627a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800627c:	7c7b      	ldrb	r3, [r7, #17]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d105      	bne.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006282:	4ba6      	ldr	r3, [pc, #664]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006286:	4aa5      	ldr	r2, [pc, #660]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800628c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800629a:	4ba0      	ldr	r3, [pc, #640]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a0:	f023 0203 	bic.w	r2, r3, #3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	499c      	ldr	r1, [pc, #624]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00a      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062bc:	4b97      	ldr	r3, [pc, #604]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c2:	f023 020c 	bic.w	r2, r3, #12
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4994      	ldr	r1, [pc, #592]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062de:	4b8f      	ldr	r3, [pc, #572]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	498b      	ldr	r1, [pc, #556]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0308 	and.w	r3, r3, #8
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006300:	4b86      	ldr	r3, [pc, #536]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006306:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	4983      	ldr	r1, [pc, #524]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00a      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006322:	4b7e      	ldr	r3, [pc, #504]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006328:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	497a      	ldr	r1, [pc, #488]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006344:	4b75      	ldr	r3, [pc, #468]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	4972      	ldr	r1, [pc, #456]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006366:	4b6d      	ldr	r3, [pc, #436]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	4969      	ldr	r1, [pc, #420]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006388:	4b64      	ldr	r3, [pc, #400]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800638a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	4961      	ldr	r1, [pc, #388]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006398:	4313      	orrs	r3, r2
 800639a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063aa:	4b5c      	ldr	r3, [pc, #368]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	4958      	ldr	r1, [pc, #352]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d015      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063cc:	4b53      	ldr	r3, [pc, #332]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	4950      	ldr	r1, [pc, #320]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063ea:	d105      	bne.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ec:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a4a      	ldr	r2, [pc, #296]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006404:	4b45      	ldr	r3, [pc, #276]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	4942      	ldr	r1, [pc, #264]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006422:	d105      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006424:	4b3d      	ldr	r3, [pc, #244]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4a3c      	ldr	r2, [pc, #240]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800642a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800642e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d015      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800643c:	4b37      	ldr	r3, [pc, #220]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	4934      	ldr	r1, [pc, #208]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800644c:	4313      	orrs	r3, r2
 800644e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645a:	d105      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800645c:	4b2f      	ldr	r3, [pc, #188]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	4a2e      	ldr	r2, [pc, #184]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006466:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d015      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006474:	4b29      	ldr	r3, [pc, #164]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800647a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006482:	4926      	ldr	r1, [pc, #152]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006484:	4313      	orrs	r3, r2
 8006486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800648e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006494:	4b21      	ldr	r3, [pc, #132]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a20      	ldr	r2, [pc, #128]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800649a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800649e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064ac:	4b1b      	ldr	r3, [pc, #108]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	4918      	ldr	r1, [pc, #96]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064ca:	d105      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064cc:	4b13      	ldr	r3, [pc, #76]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a12      	ldr	r2, [pc, #72]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d015      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064e4:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	490a      	ldr	r1, [pc, #40]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006502:	d105      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006504:	4b05      	ldr	r3, [pc, #20]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4a04      	ldr	r2, [pc, #16]	@ (800651c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800650a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006510:	7cbb      	ldrb	r3, [r7, #18]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d070      	beq.n	8006614 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb fb8a 	bl	8001c60 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0310 	and.w	r3, r3, #16
 800655e:	2b10      	cmp	r3, #16
 8006560:	d04f      	beq.n	8006602 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	22ca      	movs	r2, #202	@ 0xca
 8006568:	625a      	str	r2, [r3, #36]	@ 0x24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2253      	movs	r2, #83	@ 0x53
 8006570:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f878 	bl	8006668 <RTC_EnterInitMode>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d126      	bne.n	80065d0 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006590:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006594:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6999      	ldr	r1, [r3, #24]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68d9      	ldr	r1, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	041a      	lsls	r2, r3, #16
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f884 	bl	80066d4 <RTC_ExitInitMode>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d110      	bne.n	80065f8 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	22ff      	movs	r2, #255	@ 0xff
 80065fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8006600:	e001      	b.n	8006606 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d103      	bne.n	8006614 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a0d      	ldr	r2, [pc, #52]	@ (8006664 <HAL_RTC_WaitForSynchro+0x44>)
 800662e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006630:	f7fb fcf2 	bl	8002018 <HAL_GetTick>
 8006634:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006636:	e009      	b.n	800664c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006638:	f7fb fcee 	bl	8002018 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006646:	d901      	bls.n	800664c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e007      	b.n	800665c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ee      	beq.n	8006638 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	0001005f 	.word	0x0001005f

08006668 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d123      	bne.n	80066ca <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006690:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006692:	f7fb fcc1 	bl	8002018 <HAL_GetTick>
 8006696:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006698:	e00d      	b.n	80066b6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800669a:	f7fb fcbd 	bl	8002018 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066a8:	d905      	bls.n	80066b6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <RTC_EnterInitMode+0x62>
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d1e7      	bne.n	800669a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10c      	bne.n	8006718 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff ff8e 	bl	8006620 <HAL_RTC_WaitForSynchro>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d022      	beq.n	8006750 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2203      	movs	r2, #3
 800670e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	e01b      	b.n	8006750 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0220 	bic.w	r2, r2, #32
 8006726:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff79 	bl	8006620 <HAL_RTC_WaitForSynchro>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2203      	movs	r2, #3
 8006738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0220 	orr.w	r2, r2, #32
 800674e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800676c:	2b01      	cmp	r3, #1
 800676e:	d101      	bne.n	8006774 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006770:	2302      	movs	r3, #2
 8006772:	e062      	b.n	800683a <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	22ca      	movs	r2, #202	@ 0xca
 800678a:	625a      	str	r2, [r3, #36]	@ 0x24
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2253      	movs	r2, #83	@ 0x53
 8006792:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699a      	ldr	r2, [r3, #24]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a2:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d120      	bne.n	80067f4 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 80067b2:	f7fb fc31 	bl	8002018 <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80067b8:	e015      	b.n	80067e6 <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ba:	f7fb fc2d 	bl	8002018 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067c8:	d90d      	bls.n	80067e6 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2203      	movs	r2, #3
 80067d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e029      	b.n	800683a <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0e2      	beq.n	80067ba <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f023 0107 	bic.w	r1, r3, #7
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	430a      	orrs	r2, r1
 8006806:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800681e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	22ff      	movs	r2, #255	@ 0xff
 8006826:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006842:	b480      	push	{r7}
 8006844:	b085      	sub	sp, #20
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006852:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006856:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006870:	b480      	push	{r7}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006878:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800687c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	b29b      	uxth	r3, r3
 800688a:	43db      	mvns	r3, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	4013      	ands	r3, r2
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	1d3b      	adds	r3, r7, #4
 80068b0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b09d      	sub	sp, #116	@ 0x74
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4413      	add	r3, r2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	78db      	ldrb	r3, [r3, #3]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d81f      	bhi.n	8006956 <USB_ActivateEndpoint+0x72>
 8006916:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <USB_ActivateEndpoint+0x38>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	0800692d 	.word	0x0800692d
 8006920:	08006949 	.word	0x08006949
 8006924:	0800695f 	.word	0x0800695f
 8006928:	0800693b 	.word	0x0800693b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800692c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006934:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006938:	e012      	b.n	8006960 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800693a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800693e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006942:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006946:	e00b      	b.n	8006960 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006948:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800694c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006950:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006954:	e004      	b.n	8006960 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800695c:	e000      	b.n	8006960 <USB_ActivateEndpoint+0x7c>
      break;
 800695e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800696e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697e:	b29b      	uxth	r3, r3
 8006980:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	b21b      	sxth	r3, r3
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800699a:	b21a      	sxth	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b21b      	sxth	r3, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b21b      	sxth	r3, r3
 80069a6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	441a      	add	r2, r3
 80069b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80069b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	7b1b      	ldrb	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 8178 	bne.w	8006cc6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8084 	beq.w	8006ae8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	4413      	add	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	00da      	lsls	r2, r3, #3
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	88db      	ldrh	r3, [r3, #6]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	827b      	strh	r3, [r7, #18]
 8006a22:	8a7b      	ldrh	r3, [r7, #18]
 8006a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01b      	beq.n	8006a64 <USB_ActivateEndpoint+0x180>
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a42:	823b      	strh	r3, [r7, #16]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	8a3b      	ldrh	r3, [r7, #16]
 8006a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	78db      	ldrb	r3, [r3, #3]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d020      	beq.n	8006aae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a82:	81bb      	strh	r3, [r7, #12]
 8006a84:	89bb      	ldrh	r3, [r7, #12]
 8006a86:	f083 0320 	eor.w	r3, r3, #32
 8006a8a:	81bb      	strh	r3, [r7, #12]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	441a      	add	r2, r3
 8006a96:	89bb      	ldrh	r3, [r7, #12]
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
 8006aac:	e2d5      	b.n	800705a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac4:	81fb      	strh	r3, [r7, #14]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	8013      	strh	r3, [r2, #0]
 8006ae6:	e2b8      	b.n	800705a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	4413      	add	r3, r2
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	00da      	lsls	r2, r3, #3
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	4413      	add	r3, r2
 8006b06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	88db      	ldrh	r3, [r3, #6]
 8006b10:	085b      	lsrs	r3, r3, #1
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	4413      	add	r3, r2
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	00da      	lsls	r2, r3, #3
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	801a      	strh	r2, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b56:	d91d      	bls.n	8006b94 <USB_ActivateEndpoint+0x2b0>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	f003 031f 	and.w	r3, r3, #31
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <USB_ActivateEndpoint+0x28e>
 8006b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	4313      	orrs	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	e026      	b.n	8006be2 <USB_ActivateEndpoint+0x2fe>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d10a      	bne.n	8006bb2 <USB_ActivateEndpoint+0x2ce>
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e017      	b.n	8006be2 <USB_ActivateEndpoint+0x2fe>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <USB_ActivateEndpoint+0x2e8>
 8006bc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bc8:	3301      	adds	r3, #1
 8006bca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	029b      	lsls	r3, r3, #10
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <USB_ActivateEndpoint+0x34e>
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c10:	843b      	strh	r3, [r7, #32]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	8c3b      	ldrh	r3, [r7, #32]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d124      	bne.n	8006c84 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c50:	83bb      	strh	r3, [r7, #28]
 8006c52:	8bbb      	ldrh	r3, [r7, #28]
 8006c54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006c58:	83bb      	strh	r3, [r7, #28]
 8006c5a:	8bbb      	ldrh	r3, [r7, #28]
 8006c5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006c60:	83bb      	strh	r3, [r7, #28]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	441a      	add	r2, r3
 8006c6c:	8bbb      	ldrh	r3, [r7, #28]
 8006c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	8013      	strh	r3, [r2, #0]
 8006c82:	e1ea      	b.n	800705a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c9a:	83fb      	strh	r3, [r7, #30]
 8006c9c:	8bfb      	ldrh	r3, [r7, #30]
 8006c9e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ca2:	83fb      	strh	r3, [r7, #30]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	8bfb      	ldrh	r3, [r7, #30]
 8006cb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]
 8006cc4:	e1c9      	b.n	800705a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	78db      	ldrb	r3, [r3, #3]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d11e      	bne.n	8006d0c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	441a      	add	r2, r3
 8006cf2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cfe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]
 8006d0a:	e01d      	b.n	8006d48 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d22:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006d34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d58:	4413      	add	r3, r2
 8006d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	00da      	lsls	r2, r3, #3
 8006d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	891b      	ldrh	r3, [r3, #8]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	461a      	mov	r2, r3
 8006d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8c:	4413      	add	r3, r2
 8006d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	00da      	lsls	r2, r3, #3
 8006d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d98:	4413      	add	r3, r2
 8006d9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	895b      	ldrh	r3, [r3, #10]
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	785b      	ldrb	r3, [r3, #1]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 8093 	bne.w	8006ee0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006dca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01b      	beq.n	8006e0e <USB_ActivateEndpoint+0x52a>
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	441a      	add	r2, r3
 8006df8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006e1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d01b      	beq.n	8006e5e <USB_ActivateEndpoint+0x57a>
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	441a      	add	r2, r3
 8006e48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006e4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e74:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e7c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e7e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e84:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	441a      	add	r2, r3
 8006e90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ebc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	441a      	add	r2, r3
 8006ec8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]
 8006ede:	e0bc      	b.n	800705a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006ef0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01d      	beq.n	8006f38 <USB_ActivateEndpoint+0x654>
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f12:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006f24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006f48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01d      	beq.n	8006f90 <USB_ActivateEndpoint+0x6ac>
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	78db      	ldrb	r3, [r3, #3]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d024      	beq.n	8006fe2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006fb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006fb6:	f083 0320 	eor.w	r3, r3, #32
 8006fba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006fcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	8013      	strh	r3, [r2, #0]
 8006fe0:	e01d      	b.n	800701e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800700a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800700e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800701a:	b29b      	uxth	r3, r3
 800701c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007030:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007034:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	441a      	add	r2, r3
 8007042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800704a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800704e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007056:	b29b      	uxth	r3, r3
 8007058:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800705a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800705e:	4618      	mov	r0, r3
 8007060:	3774      	adds	r7, #116	@ 0x74
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop

0800706c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800706c:	b480      	push	{r7}
 800706e:	b08d      	sub	sp, #52	@ 0x34
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	7b1b      	ldrb	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	f040 808e 	bne.w	800719c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d044      	beq.n	8007112 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	81bb      	strh	r3, [r7, #12]
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01b      	beq.n	80070d8 <USB_DeactivateEndpoint+0x6c>
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b6:	817b      	strh	r3, [r7, #10]
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ee:	813b      	strh	r3, [r7, #8]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	441a      	add	r2, r3
 80070fa:	893b      	ldrh	r3, [r7, #8]
 80070fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710c:	b29b      	uxth	r3, r3
 800710e:	8013      	strh	r3, [r2, #0]
 8007110:	e192      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	827b      	strh	r3, [r7, #18]
 8007120:	8a7b      	ldrh	r3, [r7, #18]
 8007122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01b      	beq.n	8007162 <USB_DeactivateEndpoint+0xf6>
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800713c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007140:	823b      	strh	r3, [r7, #16]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	441a      	add	r2, r3
 800714c:	8a3b      	ldrh	r3, [r7, #16]
 800714e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800715a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800715e:	b29b      	uxth	r3, r3
 8007160:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007178:	81fb      	strh	r3, [r7, #14]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	441a      	add	r2, r3
 8007184:	89fb      	ldrh	r3, [r7, #14]
 8007186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800718a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800718e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007196:	b29b      	uxth	r3, r3
 8007198:	8013      	strh	r3, [r2, #0]
 800719a:	e14d      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	785b      	ldrb	r3, [r3, #1]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f040 80a5 	bne.w	80072f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	843b      	strh	r3, [r7, #32]
 80071b4:	8c3b      	ldrh	r3, [r7, #32]
 80071b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01b      	beq.n	80071f6 <USB_DeactivateEndpoint+0x18a>
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d4:	83fb      	strh	r3, [r7, #30]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	441a      	add	r2, r3
 80071e0:	8bfb      	ldrh	r3, [r7, #30]
 80071e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	83bb      	strh	r3, [r7, #28]
 8007204:	8bbb      	ldrh	r3, [r7, #28]
 8007206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01b      	beq.n	8007246 <USB_DeactivateEndpoint+0x1da>
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007224:	837b      	strh	r3, [r7, #26]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	441a      	add	r2, r3
 8007230:	8b7b      	ldrh	r3, [r7, #26]
 8007232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007242:	b29b      	uxth	r3, r3
 8007244:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800725c:	833b      	strh	r3, [r7, #24]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	441a      	add	r2, r3
 8007268:	8b3b      	ldrh	r3, [r7, #24]
 800726a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007276:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800727a:	b29b      	uxth	r3, r3
 800727c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	b29b      	uxth	r3, r3
 800728c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007294:	82fb      	strh	r3, [r7, #22]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	8afb      	ldrh	r3, [r7, #22]
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072cc:	82bb      	strh	r3, [r7, #20]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	8abb      	ldrh	r3, [r7, #20]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	e0a3      	b.n	8007438 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80072fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01b      	beq.n	8007340 <USB_DeactivateEndpoint+0x2d4>
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29b      	uxth	r3, r3
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800731a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800731e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	441a      	add	r2, r3
 800732a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800732c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007330:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007334:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733c:	b29b      	uxth	r3, r3
 800733e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800734e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01b      	beq.n	8007390 <USB_DeactivateEndpoint+0x324>
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800736e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007388:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	441a      	add	r2, r3
 80073b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	b29b      	uxth	r3, r3
 800740e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007416:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	441a      	add	r2, r3
 8007422:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007424:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007428:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007434:	b29b      	uxth	r3, r3
 8007436:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3734      	adds	r7, #52	@ 0x34
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b0c2      	sub	sp, #264	@ 0x108
 800744a:	af00      	add	r7, sp, #0
 800744c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007450:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007454:	6018      	str	r0, [r3, #0]
 8007456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007464:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b01      	cmp	r3, #1
 800746e:	f040 86b7 	bne.w	80081e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d908      	bls.n	80074a0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800748e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007492:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800749e:	e007      	b.n	80074b0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80074b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	7b1b      	ldrb	r3, [r3, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13a      	bne.n	8007536 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6959      	ldr	r1, [r3, #20]
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	88da      	ldrh	r2, [r3, #6]
 80074d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074e6:	6800      	ldr	r0, [r0, #0]
 80074e8:	f001 fc98 	bl	8008e1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80074ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007506:	b29b      	uxth	r3, r3
 8007508:	461a      	mov	r2, r3
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	00da      	lsls	r2, r3, #3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4413      	add	r3, r2
 8007522:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	801a      	strh	r2, [r3, #0]
 8007532:	f000 be1f 	b.w	8008174 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	78db      	ldrb	r3, [r3, #3]
 8007542:	2b02      	cmp	r3, #2
 8007544:	f040 8462 	bne.w	8007e0c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	f240 83df 	bls.w	8007d24 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	441a      	add	r2, r3
 80075aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80075ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80075ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075be:	b29b      	uxth	r3, r3
 80075c0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80075c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6a1a      	ldr	r2, [r3, #32]
 80075ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d2:	1ad2      	subs	r2, r2, r3
 80075d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 81c7 	beq.w	8007996 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	633b      	str	r3, [r7, #48]	@ 0x30
 8007614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	785b      	ldrb	r3, [r3, #1]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d177      	bne.n	8007714 <USB_EPStartXfer+0x2ce>
 8007624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800763e:	b29b      	uxth	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	4413      	add	r3, r2
 8007646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00da      	lsls	r2, r3, #3
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	4413      	add	r3, r2
 800765a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800765e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800766a:	b29a      	uxth	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	801a      	strh	r2, [r3, #0]
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	2b3e      	cmp	r3, #62	@ 0x3e
 8007676:	d921      	bls.n	80076bc <USB_EPStartXfer+0x276>
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800767c:	095b      	lsrs	r3, r3, #5
 800767e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2b00      	cmp	r3, #0
 800768c:	d104      	bne.n	8007698 <USB_EPStartXfer+0x252>
 800768e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007692:	3b01      	subs	r3, #1
 8007694:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769a:	881b      	ldrh	r3, [r3, #0]
 800769c:	b29a      	uxth	r2, r3
 800769e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4313      	orrs	r3, r2
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	e050      	b.n	800775e <USB_EPStartXfer+0x318>
 80076bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <USB_EPStartXfer+0x294>
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d2:	b29a      	uxth	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	801a      	strh	r2, [r3, #0]
 80076d8:	e041      	b.n	800775e <USB_EPStartXfer+0x318>
 80076da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d004      	beq.n	80076fa <USB_EPStartXfer+0x2b4>
 80076f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80076f4:	3301      	adds	r3, #1
 80076f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29a      	uxth	r2, r3
 8007700:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007704:	b29b      	uxth	r3, r3
 8007706:	029b      	lsls	r3, r3, #10
 8007708:	b29b      	uxth	r3, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	b29a      	uxth	r2, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	801a      	strh	r2, [r3, #0]
 8007712:	e024      	b.n	800775e <USB_EPStartXfer+0x318>
 8007714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d11c      	bne.n	800775e <USB_EPStartXfer+0x318>
 8007724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007728:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007732:	b29b      	uxth	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007738:	4413      	add	r3, r2
 800773a:	633b      	str	r3, [r7, #48]	@ 0x30
 800773c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	00da      	lsls	r2, r3, #3
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	4413      	add	r3, r2
 800774e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007758:	b29a      	uxth	r2, r3
 800775a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800775e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	895b      	ldrh	r3, [r3, #10]
 800776a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800776e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6959      	ldr	r1, [r3, #20]
 800777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800777e:	b29b      	uxth	r3, r3
 8007780:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007784:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007788:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f001 fb45 	bl	8008e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8007792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	695a      	ldr	r2, [r3, #20]
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a2:	441a      	add	r2, r3
 80077a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6a1a      	ldr	r2, [r3, #32]
 80077bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d90f      	bls.n	80077ec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6a1a      	ldr	r2, [r3, #32]
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077dc:	1ad2      	subs	r2, r2, r3
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	621a      	str	r2, [r3, #32]
 80077ea:	e00e      	b.n	800780a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d177      	bne.n	800790a <USB_EPStartXfer+0x4c4>
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007834:	b29b      	uxth	r3, r3
 8007836:	461a      	mov	r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	4413      	add	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	00da      	lsls	r2, r3, #3
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	4413      	add	r3, r2
 8007850:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007860:	b29a      	uxth	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800786a:	2b3e      	cmp	r3, #62	@ 0x3e
 800786c:	d921      	bls.n	80078b2 <USB_EPStartXfer+0x46c>
 800786e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <USB_EPStartXfer+0x448>
 8007884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007888:	3b01      	subs	r3, #1
 800788a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007898:	b29b      	uxth	r3, r3
 800789a:	029b      	lsls	r3, r3, #10
 800789c:	b29b      	uxth	r3, r3
 800789e:	4313      	orrs	r3, r2
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e056      	b.n	8007960 <USB_EPStartXfer+0x51a>
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <USB_EPStartXfer+0x48a>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	801a      	strh	r2, [r3, #0]
 80078ce:	e047      	b.n	8007960 <USB_EPStartXfer+0x51a>
 80078d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d004      	beq.n	80078f0 <USB_EPStartXfer+0x4aa>
 80078e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ea:	3301      	adds	r3, #1
 80078ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	b29b      	uxth	r3, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	b29a      	uxth	r2, r3
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e02a      	b.n	8007960 <USB_EPStartXfer+0x51a>
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d122      	bne.n	8007960 <USB_EPStartXfer+0x51a>
 800791a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800791e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800792a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007934:	b29b      	uxth	r3, r3
 8007936:	461a      	mov	r2, r3
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	4413      	add	r3, r2
 800793c:	623b      	str	r3, [r7, #32]
 800793e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	00da      	lsls	r2, r3, #3
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	4413      	add	r3, r2
 8007950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007954:	61fb      	str	r3, [r7, #28]
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795a:	b29a      	uxth	r2, r3
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	891b      	ldrh	r3, [r3, #8]
 800796c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6959      	ldr	r1, [r3, #20]
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	b29b      	uxth	r3, r3
 8007982:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007986:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800798a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800798e:	6800      	ldr	r0, [r0, #0]
 8007990:	f001 fa44 	bl	8008e1c <USB_WritePMA>
 8007994:	e3ee      	b.n	8008174 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d177      	bne.n	8007a96 <USB_EPStartXfer+0x650>
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c6:	4413      	add	r3, r2
 80079c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	00da      	lsls	r2, r3, #3
 80079d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079da:	4413      	add	r3, r2
 80079dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f0:	801a      	strh	r2, [r3, #0]
 80079f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80079f8:	d921      	bls.n	8007a3e <USB_EPStartXfer+0x5f8>
 80079fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <USB_EPStartXfer+0x5d4>
 8007a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a14:	3b01      	subs	r3, #1
 8007a16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a1c:	881b      	ldrh	r3, [r3, #0]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	029b      	lsls	r3, r3, #10
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a3a:	801a      	strh	r2, [r3, #0]
 8007a3c:	e056      	b.n	8007aec <USB_EPStartXfer+0x6a6>
 8007a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <USB_EPStartXfer+0x616>
 8007a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a58:	801a      	strh	r2, [r3, #0]
 8007a5a:	e047      	b.n	8007aec <USB_EPStartXfer+0x6a6>
 8007a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <USB_EPStartXfer+0x636>
 8007a72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a76:	3301      	adds	r3, #1
 8007a78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a92:	801a      	strh	r2, [r3, #0]
 8007a94:	e02a      	b.n	8007aec <USB_EPStartXfer+0x6a6>
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d122      	bne.n	8007aec <USB_EPStartXfer+0x6a6>
 8007aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ac6:	4413      	add	r3, r2
 8007ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	00da      	lsls	r2, r3, #3
 8007ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ada:	4413      	add	r3, r2
 8007adc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	891b      	ldrh	r3, [r3, #8]
 8007af8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6959      	ldr	r1, [r3, #20]
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007b12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007b16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007b1a:	6800      	ldr	r0, [r0, #0]
 8007b1c:	f001 f97e 	bl	8008e1c <USB_WritePMA>
            ep->xfer_buff += len;
 8007b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b30:	441a      	add	r2, r3
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6a1a      	ldr	r2, [r3, #32]
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d90f      	bls.n	8007b7a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6a1a      	ldr	r2, [r3, #32]
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	621a      	str	r2, [r3, #32]
 8007b78:	e00e      	b.n	8007b98 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2200      	movs	r2, #0
 8007b96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d177      	bne.n	8007ca4 <USB_EPStartXfer+0x85e>
 8007bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bce:	b29b      	uxth	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	4413      	add	r3, r2
 8007bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	00da      	lsls	r2, r3, #3
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	4413      	add	r3, r2
 8007bea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfe:	801a      	strh	r2, [r3, #0]
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c06:	d921      	bls.n	8007c4c <USB_EPStartXfer+0x806>
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d104      	bne.n	8007c28 <USB_EPStartXfer+0x7e2>
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c22:	3b01      	subs	r3, #1
 8007c24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	029b      	lsls	r3, r3, #10
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	e050      	b.n	8007cee <USB_EPStartXfer+0x8a8>
 8007c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <USB_EPStartXfer+0x824>
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c66:	801a      	strh	r2, [r3, #0]
 8007c68:	e041      	b.n	8007cee <USB_EPStartXfer+0x8a8>
 8007c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c6e:	085b      	lsrs	r3, r3, #1
 8007c70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <USB_EPStartXfer+0x844>
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c84:	3301      	adds	r3, #1
 8007c86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	029b      	lsls	r3, r3, #10
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	e024      	b.n	8007cee <USB_EPStartXfer+0x8a8>
 8007ca4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d11c      	bne.n	8007cee <USB_EPStartXfer+0x8a8>
 8007cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cc8:	4413      	add	r3, r2
 8007cca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	00da      	lsls	r2, r3, #3
 8007cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	895b      	ldrh	r3, [r3, #10]
 8007cfa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6959      	ldr	r1, [r3, #20]
 8007d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d14:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d18:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d1c:	6800      	ldr	r0, [r0, #0]
 8007d1e:	f001 f87d 	bl	8008e1c <USB_WritePMA>
 8007d22:	e227      	b.n	8008174 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a1b      	ldr	r3, [r3, #32]
 8007d30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d5a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	441a      	add	r2, r3
 8007d78:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007db0:	4413      	add	r3, r2
 8007db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	00da      	lsls	r2, r3, #3
 8007dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007dca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007dd4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	891b      	ldrh	r3, [r3, #8]
 8007de2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6959      	ldr	r1, [r3, #20]
 8007df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007dfc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e00:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e04:	6800      	ldr	r0, [r0, #0]
 8007e06:	f001 f809 	bl	8008e1c <USB_WritePMA>
 8007e0a:	e1b3      	b.n	8008174 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	1ad2      	subs	r2, r2, r3
 8007e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80c6 	beq.w	8007fde <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	785b      	ldrb	r3, [r3, #1]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d177      	bne.n	8007f5e <USB_EPStartXfer+0xb18>
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e8e:	4413      	add	r3, r2
 8007e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	00da      	lsls	r2, r3, #3
 8007ea0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ea8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007eb8:	801a      	strh	r2, [r3, #0]
 8007eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ebe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ec0:	d921      	bls.n	8007f06 <USB_EPStartXfer+0xac0>
 8007ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ed0:	f003 031f 	and.w	r3, r3, #31
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <USB_EPStartXfer+0xa9c>
 8007ed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007edc:	3b01      	subs	r3, #1
 8007ede:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	029b      	lsls	r3, r3, #10
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f02:	801a      	strh	r2, [r3, #0]
 8007f04:	e050      	b.n	8007fa8 <USB_EPStartXfer+0xb62>
 8007f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <USB_EPStartXfer+0xade>
 8007f0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e041      	b.n	8007fa8 <USB_EPStartXfer+0xb62>
 8007f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <USB_EPStartXfer+0xafe>
 8007f3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	029b      	lsls	r3, r3, #10
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e024      	b.n	8007fa8 <USB_EPStartXfer+0xb62>
 8007f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	785b      	ldrb	r3, [r3, #1]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d11c      	bne.n	8007fa8 <USB_EPStartXfer+0xb62>
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f82:	4413      	add	r3, r2
 8007f84:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	00da      	lsls	r2, r3, #3
 8007f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f96:	4413      	add	r3, r2
 8007f98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	895b      	ldrh	r3, [r3, #10]
 8007fb4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6959      	ldr	r1, [r3, #20]
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007fce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007fd2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fd6:	6800      	ldr	r0, [r0, #0]
 8007fd8:	f000 ff20 	bl	8008e1c <USB_WritePMA>
 8007fdc:	e0ca      	b.n	8008174 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d177      	bne.n	80080de <USB_EPStartXfer+0xc98>
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008008:	b29b      	uxth	r3, r3
 800800a:	461a      	mov	r2, r3
 800800c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800800e:	4413      	add	r3, r2
 8008010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	00da      	lsls	r2, r3, #3
 8008020:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008022:	4413      	add	r3, r2
 8008024:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800802a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	b29b      	uxth	r3, r3
 8008030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008034:	b29a      	uxth	r2, r3
 8008036:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008038:	801a      	strh	r2, [r3, #0]
 800803a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800803e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008040:	d921      	bls.n	8008086 <USB_EPStartXfer+0xc40>
 8008042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800804c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USB_EPStartXfer+0xc1c>
 8008058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800805c:	3b01      	subs	r3, #1
 800805e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800806c:	b29b      	uxth	r3, r3
 800806e:	029b      	lsls	r3, r3, #10
 8008070:	b29b      	uxth	r3, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800807a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800807e:	b29a      	uxth	r2, r3
 8008080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e05c      	b.n	8008140 <USB_EPStartXfer+0xcfa>
 8008086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <USB_EPStartXfer+0xc5e>
 800808e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809c:	b29a      	uxth	r2, r3
 800809e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a0:	801a      	strh	r2, [r3, #0]
 80080a2:	e04d      	b.n	8008140 <USB_EPStartXfer+0xcfa>
 80080a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080a8:	085b      	lsrs	r3, r3, #1
 80080aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d004      	beq.n	80080c4 <USB_EPStartXfer+0xc7e>
 80080ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80080c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	029b      	lsls	r3, r3, #10
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	e030      	b.n	8008140 <USB_EPStartXfer+0xcfa>
 80080de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	785b      	ldrb	r3, [r3, #1]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d128      	bne.n	8008140 <USB_EPStartXfer+0xcfa>
 80080ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80080fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800810a:	b29b      	uxth	r3, r3
 800810c:	461a      	mov	r2, r3
 800810e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008112:	4413      	add	r3, r2
 8008114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	00da      	lsls	r2, r3, #3
 8008126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800812a:	4413      	add	r3, r2
 800812c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008138:	b29a      	uxth	r2, r3
 800813a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800813e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	891b      	ldrh	r3, [r3, #8]
 800814c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	6959      	ldr	r1, [r3, #20]
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008160:	b29b      	uxth	r3, r3
 8008162:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008166:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800816a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800816e:	6800      	ldr	r0, [r0, #0]
 8008170:	f000 fe54 	bl	8008e1c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	881b      	ldrh	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800819a:	817b      	strh	r3, [r7, #10]
 800819c:	897b      	ldrh	r3, [r7, #10]
 800819e:	f083 0310 	eor.w	r3, r3, #16
 80081a2:	817b      	strh	r3, [r7, #10]
 80081a4:	897b      	ldrh	r3, [r7, #10]
 80081a6:	f083 0320 	eor.w	r3, r3, #32
 80081aa:	817b      	strh	r3, [r7, #10]
 80081ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	441a      	add	r2, r3
 80081c6:	897b      	ldrh	r3, [r7, #10]
 80081c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d8:	b29b      	uxth	r3, r3
 80081da:	8013      	strh	r3, [r2, #0]
 80081dc:	f000 bcde 	b.w	8008b9c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	7b1b      	ldrb	r3, [r3, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f040 80bb 	bne.w	8008368 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	d917      	bls.n	800823e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800820e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800821e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699a      	ldr	r2, [r3, #24]
 800822a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800822e:	1ad2      	subs	r2, r2, r3
 8008230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	619a      	str	r2, [r3, #24]
 800823c:	e00e      	b.n	800825c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800823e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2200      	movs	r2, #0
 800825a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800825c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800826a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008278:	b29b      	uxth	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008280:	4413      	add	r3, r2
 8008282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800828a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	00da      	lsls	r2, r3, #3
 8008294:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008298:	4413      	add	r3, r2
 800829a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800829e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082b4:	801a      	strh	r2, [r3, #0]
 80082b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80082bc:	d924      	bls.n	8008308 <USB_EPStartXfer+0xec2>
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c2:	095b      	lsrs	r3, r3, #5
 80082c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USB_EPStartXfer+0xe98>
 80082d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082d8:	3b01      	subs	r3, #1
 80082da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008302:	801a      	strh	r2, [r3, #0]
 8008304:	f000 bc10 	b.w	8008b28 <USB_EPStartXfer+0x16e2>
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10c      	bne.n	800832a <USB_EPStartXfer+0xee4>
 8008310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800831c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008320:	b29a      	uxth	r2, r3
 8008322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008326:	801a      	strh	r2, [r3, #0]
 8008328:	e3fe      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
 800832a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800832e:	085b      	lsrs	r3, r3, #1
 8008330:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d004      	beq.n	800834a <USB_EPStartXfer+0xf04>
 8008340:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008344:	3301      	adds	r3, #1
 8008346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800834a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29a      	uxth	r2, r3
 8008352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008356:	b29b      	uxth	r3, r3
 8008358:	029b      	lsls	r3, r3, #10
 800835a:	b29b      	uxth	r3, r3
 800835c:	4313      	orrs	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008364:	801a      	strh	r2, [r3, #0]
 8008366:	e3df      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800836c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	78db      	ldrb	r3, [r3, #3]
 8008374:	2b02      	cmp	r3, #2
 8008376:	f040 8218 	bne.w	80087aa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 809d 	bne.w	80084c6 <USB_EPStartXfer+0x1080>
 800838c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800839a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800839e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083b0:	4413      	add	r3, r2
 80083b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	00da      	lsls	r2, r3, #3
 80083c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083de:	b29a      	uxth	r2, r3
 80083e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80083f4:	d92b      	bls.n	800844e <USB_EPStartXfer+0x1008>
 80083f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	691b      	ldr	r3, [r3, #16]
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	f003 031f 	and.w	r3, r3, #31
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <USB_EPStartXfer+0xfe0>
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008420:	3b01      	subs	r3, #1
 8008422:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29a      	uxth	r2, r3
 800842e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008432:	b29b      	uxth	r3, r3
 8008434:	029b      	lsls	r3, r3, #10
 8008436:	b29b      	uxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b29b      	uxth	r3, r3
 800843c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008444:	b29a      	uxth	r2, r3
 8008446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800844a:	801a      	strh	r2, [r3, #0]
 800844c:	e070      	b.n	8008530 <USB_EPStartXfer+0x10ea>
 800844e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10c      	bne.n	8008478 <USB_EPStartXfer+0x1032>
 800845e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800846a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e05b      	b.n	8008530 <USB_EPStartXfer+0x10ea>
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800848a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d004      	beq.n	80084a8 <USB_EPStartXfer+0x1062>
 800849e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a2:	3301      	adds	r3, #1
 80084a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80084a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	029b      	lsls	r3, r3, #10
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4313      	orrs	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	e034      	b.n	8008530 <USB_EPStartXfer+0x10ea>
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d12c      	bne.n	8008530 <USB_EPStartXfer+0x10ea>
 80084d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80084e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80084fa:	4413      	add	r3, r2
 80084fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	00da      	lsls	r2, r3, #3
 800850e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008512:	4413      	add	r3, r2
 8008514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	b29a      	uxth	r2, r3
 800852a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800853e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 809d 	bne.w	800868a <USB_EPStartXfer+0x1244>
 8008550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800855e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800856c:	b29b      	uxth	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008574:	4413      	add	r3, r2
 8008576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800857a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	00da      	lsls	r2, r3, #3
 8008588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800858c:	4413      	add	r3, r2
 800858e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008592:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008596:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80085b8:	d92b      	bls.n	8008612 <USB_EPStartXfer+0x11cc>
 80085ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USB_EPStartXfer+0x11a4>
 80085e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e4:	3b01      	subs	r3, #1
 80085e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085ee:	881b      	ldrh	r3, [r3, #0]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	029b      	lsls	r3, r3, #10
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	4313      	orrs	r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008608:	b29a      	uxth	r2, r3
 800860a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	e069      	b.n	80086e6 <USB_EPStartXfer+0x12a0>
 8008612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10c      	bne.n	800863c <USB_EPStartXfer+0x11f6>
 8008622:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	b29b      	uxth	r3, r3
 800862a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008632:	b29a      	uxth	r2, r3
 8008634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	e054      	b.n	80086e6 <USB_EPStartXfer+0x12a0>
 800863c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800864e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <USB_EPStartXfer+0x1226>
 8008662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008666:	3301      	adds	r3, #1
 8008668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800866c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008678:	b29b      	uxth	r3, r3
 800867a:	029b      	lsls	r3, r3, #10
 800867c:	b29b      	uxth	r3, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e02d      	b.n	80086e6 <USB_EPStartXfer+0x12a0>
 800868a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d125      	bne.n	80086e6 <USB_EPStartXfer+0x12a0>
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	461a      	mov	r2, r3
 80086ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086b0:	4413      	add	r3, r2
 80086b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80086b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	00da      	lsls	r2, r3, #3
 80086c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80086c8:	4413      	add	r3, r2
 80086ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	b29a      	uxth	r2, r3
 80086e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086e4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 8218 	beq.w	8008b28 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80086f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008718:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800871c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <USB_EPStartXfer+0x12ea>
 8008724:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10d      	bne.n	800874c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008730:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008738:	2b00      	cmp	r3, #0
 800873a:	f040 81f5 	bne.w	8008b28 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800873e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	f040 81ee 	bne.w	8008b28 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800876e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008772:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	441a      	add	r2, r3
 8008790:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008794:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008798:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800879c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	8013      	strh	r3, [r2, #0]
 80087a8:	e1be      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	78db      	ldrb	r3, [r3, #3]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	f040 81b4 	bne.w	8008b24 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80087bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d917      	bls.n	8008808 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80087d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80087e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	619a      	str	r2, [r3, #24]
 8008806:	e00e      	b.n	8008826 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800881c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2200      	movs	r2, #0
 8008824:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f040 8085 	bne.w	8008942 <USB_EPStartXfer+0x14fc>
 8008838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800883c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800884a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008854:	b29b      	uxth	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800885c:	4413      	add	r3, r2
 800885e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	00da      	lsls	r2, r3, #3
 8008870:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008874:	4413      	add	r3, r2
 8008876:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800887a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800887e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008882:	881b      	ldrh	r3, [r3, #0]
 8008884:	b29b      	uxth	r3, r3
 8008886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800888a:	b29a      	uxth	r2, r3
 800888c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008896:	2b3e      	cmp	r3, #62	@ 0x3e
 8008898:	d923      	bls.n	80088e2 <USB_EPStartXfer+0x149c>
 800889a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <USB_EPStartXfer+0x1474>
 80088b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80088ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	029b      	lsls	r3, r3, #10
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d8:	b29a      	uxth	r2, r3
 80088da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	e060      	b.n	80089a4 <USB_EPStartXfer+0x155e>
 80088e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10c      	bne.n	8008904 <USB_EPStartXfer+0x14be>
 80088ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	e04f      	b.n	80089a4 <USB_EPStartXfer+0x155e>
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800890e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <USB_EPStartXfer+0x14de>
 800891a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891e:	3301      	adds	r3, #1
 8008920:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008930:	b29b      	uxth	r3, r3
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	b29b      	uxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b29a      	uxth	r2, r3
 800893a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800893e:	801a      	strh	r2, [r3, #0]
 8008940:	e030      	b.n	80089a4 <USB_EPStartXfer+0x155e>
 8008942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d128      	bne.n	80089a4 <USB_EPStartXfer+0x155e>
 8008952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008964:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800896e:	b29b      	uxth	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008976:	4413      	add	r3, r2
 8008978:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800897c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	00da      	lsls	r2, r3, #3
 800898a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800898e:	4413      	add	r3, r2
 8008990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008994:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	785b      	ldrb	r3, [r3, #1]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 8085 	bne.w	8008ace <USB_EPStartXfer+0x1688>
 80089c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80089d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80089e8:	4413      	add	r3, r2
 80089ea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80089ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	00da      	lsls	r2, r3, #3
 80089fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008a00:	4413      	add	r3, r2
 8008a02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a16:	b29a      	uxth	r2, r3
 8008a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a22:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a24:	d923      	bls.n	8008a6e <USB_EPStartXfer+0x1628>
 8008a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a2a:	095b      	lsrs	r3, r3, #5
 8008a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a34:	f003 031f 	and.w	r3, r3, #31
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <USB_EPStartXfer+0x1600>
 8008a3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a40:	3b01      	subs	r3, #1
 8008a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a4a:	881b      	ldrh	r3, [r3, #0]
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	029b      	lsls	r3, r3, #10
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a6a:	801a      	strh	r2, [r3, #0]
 8008a6c:	e05c      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <USB_EPStartXfer+0x164a>
 8008a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a8c:	801a      	strh	r2, [r3, #0]
 8008a8e:	e04b      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d004      	beq.n	8008ab0 <USB_EPStartXfer+0x166a>
 8008aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ab0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	029b      	lsls	r3, r3, #10
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008aca:	801a      	strh	r2, [r3, #0]
 8008acc:	e02c      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
 8008ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d124      	bne.n	8008b28 <USB_EPStartXfer+0x16e2>
 8008ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008af4:	4413      	add	r3, r2
 8008af6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	00da      	lsls	r2, r3, #3
 8008b08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b20:	801a      	strh	r2, [r3, #0]
 8008b22:	e001      	b.n	8008b28 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e03a      	b.n	8008b9e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b56:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b5a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b66:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	441a      	add	r2, r3
 8008b84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d020      	beq.n	8008bfc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd0:	81bb      	strh	r3, [r7, #12]
 8008bd2:	89bb      	ldrh	r3, [r7, #12]
 8008bd4:	f083 0310 	eor.w	r3, r3, #16
 8008bd8:	81bb      	strh	r3, [r7, #12]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	441a      	add	r2, r3
 8008be4:	89bb      	ldrh	r3, [r7, #12]
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
 8008bfa:	e01f      	b.n	8008c3c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c12:	81fb      	strh	r3, [r7, #14]
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c1a:	81fb      	strh	r3, [r7, #14]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	441a      	add	r2, r3
 8008c26:	89fb      	ldrh	r3, [r7, #14]
 8008c28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b087      	sub	sp, #28
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	7b1b      	ldrb	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f040 809d 	bne.w	8008d98 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d04c      	beq.n	8008d00 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	823b      	strh	r3, [r7, #16]
 8008c74:	8a3b      	ldrh	r3, [r7, #16]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d01b      	beq.n	8008cb6 <USB_EPClearStall+0x6c>
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c94:	81fb      	strh	r3, [r7, #14]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	441a      	add	r2, r3
 8008ca0:	89fb      	ldrh	r3, [r7, #14]
 8008ca2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ca6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	78db      	ldrb	r3, [r3, #3]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d06c      	beq.n	8008d98 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd4:	81bb      	strh	r3, [r7, #12]
 8008cd6:	89bb      	ldrh	r3, [r7, #12]
 8008cd8:	f083 0320 	eor.w	r3, r3, #32
 8008cdc:	81bb      	strh	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	441a      	add	r2, r3
 8008ce8:	89bb      	ldrh	r3, [r7, #12]
 8008cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	8013      	strh	r3, [r2, #0]
 8008cfe:	e04b      	b.n	8008d98 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	82fb      	strh	r3, [r7, #22]
 8008d0e:	8afb      	ldrh	r3, [r7, #22]
 8008d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d01b      	beq.n	8008d50 <USB_EPClearStall+0x106>
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2e:	82bb      	strh	r3, [r7, #20]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	441a      	add	r2, r3
 8008d3a:	8abb      	ldrh	r3, [r7, #20]
 8008d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d66:	827b      	strh	r3, [r7, #18]
 8008d68:	8a7b      	ldrh	r3, [r7, #18]
 8008d6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d6e:	827b      	strh	r3, [r7, #18]
 8008d70:	8a7b      	ldrh	r3, [r7, #18]
 8008d72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d76:	827b      	strh	r3, [r7, #18]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	441a      	add	r2, r3
 8008d82:	8a7b      	ldrh	r3, [r7, #18]
 8008d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	460b      	mov	r3, r1
 8008db0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2280      	movs	r2, #128	@ 0x80
 8008dbc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b08b      	sub	sp, #44	@ 0x2c
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	80fb      	strh	r3, [r7, #6]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e32:	88bb      	ldrh	r3, [r7, #4]
 8008e34:	3301      	adds	r3, #1
 8008e36:	085b      	lsrs	r3, r3, #1
 8008e38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e42:	88fa      	ldrh	r2, [r7, #6]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e52:	e01b      	b.n	8008e8c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	b21a      	sxth	r2, r3
 8008e64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	8a7a      	ldrh	r2, [r7, #18]
 8008e72:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	3302      	adds	r3, #2
 8008e78:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e0      	bne.n	8008e54 <USB_WritePMA+0x38>
  }
}
 8008e92:	bf00      	nop
 8008e94:	bf00      	nop
 8008e96:	372c      	adds	r7, #44	@ 0x2c
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b08b      	sub	sp, #44	@ 0x2c
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	461a      	mov	r2, r3
 8008eae:	460b      	mov	r3, r1
 8008eb0:	80fb      	strh	r3, [r7, #6]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008eb6:	88bb      	ldrh	r3, [r7, #4]
 8008eb8:	085b      	lsrs	r3, r3, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ed0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ed6:	e018      	b.n	8008f0a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	0a1b      	lsrs	r3, r3, #8
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	3301      	adds	r3, #1
 8008f02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	3b01      	subs	r3, #1
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e3      	bne.n	8008ed8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008f10:	88bb      	ldrh	r3, [r7, #4]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	b2da      	uxtb	r2, r3
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	701a      	strb	r2, [r3, #0]
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	372c      	adds	r7, #44	@ 0x2c
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f44:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f48:	f002 f964 	bl	800b214 <USBD_static_malloc>
 8008f4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e066      	b.n	800902e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7c1b      	ldrb	r3, [r3, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d119      	bne.n	8008fa4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f74:	2202      	movs	r2, #2
 8008f76:	2181      	movs	r1, #129	@ 0x81
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 fff2 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f88:	2202      	movs	r2, #2
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 ffe8 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2210      	movs	r2, #16
 8008f9e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8008fa2:	e016      	b.n	8008fd2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fa4:	2340      	movs	r3, #64	@ 0x40
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	2181      	movs	r1, #129	@ 0x81
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 ffd9 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008fb6:	2340      	movs	r3, #64	@ 0x40
 8008fb8:	2202      	movs	r2, #2
 8008fba:	2101      	movs	r1, #1
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 ffd0 	bl	800af62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2210      	movs	r2, #16
 8008fce:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fd2:	2308      	movs	r3, #8
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	2182      	movs	r1, #130	@ 0x82
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 ffc2 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7c1b      	ldrb	r3, [r3, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800900e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009012:	2101      	movs	r1, #1
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 f893 	bl	800b140 <USBD_LL_PrepareReceive>
 800901a:	e007      	b.n	800902c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009022:	2340      	movs	r3, #64	@ 0x40
 8009024:	2101      	movs	r1, #1
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f002 f88a 	bl	800b140 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009042:	2181      	movs	r1, #129	@ 0x81
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 ffb2 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009050:	2101      	movs	r1, #1
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 ffab 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009060:	2182      	movs	r1, #130	@ 0x82
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f001 ffa3 	bl	800afae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009092:	4618      	mov	r0, r3
 8009094:	f002 f8cc 	bl	800b230 <USBD_static_free>
    pdev->pClassData = NULL;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d101      	bne.n	80090d4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e0af      	b.n	8009234 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d03f      	beq.n	8009160 <USBD_CDC_Setup+0xb4>
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	f040 809f 	bne.w	8009224 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	88db      	ldrh	r3, [r3, #6]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d02e      	beq.n	800914c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	b25b      	sxtb	r3, r3
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	da16      	bge.n	8009126 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009104:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009106:	683a      	ldr	r2, [r7, #0]
 8009108:	88d2      	ldrh	r2, [r2, #6]
 800910a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	2b07      	cmp	r3, #7
 8009112:	bf28      	it	cs
 8009114:	2307      	movcs	r3, #7
 8009116:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	89fa      	ldrh	r2, [r7, #14]
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 facd 	bl	800a6be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009124:	e085      	b.n	8009232 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	785a      	ldrb	r2, [r3, #1]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	88db      	ldrh	r3, [r3, #6]
 8009134:	b2da      	uxtb	r2, r3
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800913c:	6939      	ldr	r1, [r7, #16]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	461a      	mov	r2, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 fae6 	bl	800a716 <USBD_CtlPrepareRx>
      break;
 800914a:	e072      	b.n	8009232 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	7850      	ldrb	r0, [r2, #1]
 8009158:	2200      	movs	r2, #0
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	4798      	blx	r3
      break;
 800915e:	e068      	b.n	8009232 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b0b      	cmp	r3, #11
 8009166:	d852      	bhi.n	800920e <USBD_CDC_Setup+0x162>
 8009168:	a201      	add	r2, pc, #4	@ (adr r2, 8009170 <USBD_CDC_Setup+0xc4>)
 800916a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916e:	bf00      	nop
 8009170:	080091a1 	.word	0x080091a1
 8009174:	0800921d 	.word	0x0800921d
 8009178:	0800920f 	.word	0x0800920f
 800917c:	0800920f 	.word	0x0800920f
 8009180:	0800920f 	.word	0x0800920f
 8009184:	0800920f 	.word	0x0800920f
 8009188:	0800920f 	.word	0x0800920f
 800918c:	0800920f 	.word	0x0800920f
 8009190:	0800920f 	.word	0x0800920f
 8009194:	0800920f 	.word	0x0800920f
 8009198:	080091cb 	.word	0x080091cb
 800919c:	080091f5 	.word	0x080091f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d107      	bne.n	80091bc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091ac:	f107 030a 	add.w	r3, r7, #10
 80091b0:	2202      	movs	r2, #2
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fa82 	bl	800a6be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091ba:	e032      	b.n	8009222 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fa0c 	bl	800a5dc <USBD_CtlError>
            ret = USBD_FAIL;
 80091c4:	2303      	movs	r3, #3
 80091c6:	75fb      	strb	r3, [r7, #23]
          break;
 80091c8:	e02b      	b.n	8009222 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d107      	bne.n	80091e6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80091d6:	f107 030d 	add.w	r3, r7, #13
 80091da:	2201      	movs	r2, #1
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fa6d 	bl	800a6be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091e4:	e01d      	b.n	8009222 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 f9f7 	bl	800a5dc <USBD_CtlError>
            ret = USBD_FAIL;
 80091ee:	2303      	movs	r3, #3
 80091f0:	75fb      	strb	r3, [r7, #23]
          break;
 80091f2:	e016      	b.n	8009222 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d00f      	beq.n	8009220 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009200:	6839      	ldr	r1, [r7, #0]
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 f9ea 	bl	800a5dc <USBD_CtlError>
            ret = USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800920c:	e008      	b.n	8009220 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 f9e3 	bl	800a5dc <USBD_CtlError>
          ret = USBD_FAIL;
 8009216:	2303      	movs	r3, #3
 8009218:	75fb      	strb	r3, [r7, #23]
          break;
 800921a:	e002      	b.n	8009222 <USBD_CDC_Setup+0x176>
          break;
 800921c:	bf00      	nop
 800921e:	e008      	b.n	8009232 <USBD_CDC_Setup+0x186>
          break;
 8009220:	bf00      	nop
      }
      break;
 8009222:	e006      	b.n	8009232 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 f9d8 	bl	800a5dc <USBD_CtlError>
      ret = USBD_FAIL;
 800922c:	2303      	movs	r3, #3
 800922e:	75fb      	strb	r3, [r7, #23]
      break;
 8009230:	bf00      	nop
  }

  return (uint8_t)ret;
 8009232:	7dfb      	ldrb	r3, [r7, #23]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800924e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800925a:	2303      	movs	r3, #3
 800925c:	e04f      	b.n	80092fe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009264:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	3318      	adds	r3, #24
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d029      	beq.n	80092d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4613      	mov	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	3318      	adds	r3, #24
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	78f9      	ldrb	r1, [r7, #3]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	460b      	mov	r3, r1
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4403      	add	r3, r0
 800929c:	3320      	adds	r3, #32
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d110      	bne.n	80092d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	3318      	adds	r3, #24
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80092c2:	78f9      	ldrb	r1, [r7, #3]
 80092c4:	2300      	movs	r3, #0
 80092c6:	2200      	movs	r2, #0
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ff18 	bl	800b0fe <USBD_LL_Transmit>
 80092ce:	e015      	b.n	80092fc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009318:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009324:	2303      	movs	r3, #3
 8009326:	e015      	b.n	8009354 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 ff28 	bl	800b182 <USBD_LL_GetRxDataSize>
 8009332:	4602      	mov	r2, r0
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800934e:	4611      	mov	r1, r2
 8009350:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800936a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009372:	2303      	movs	r3, #3
 8009374:	e01a      	b.n	80093ac <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d014      	beq.n	80093aa <USBD_CDC_EP0_RxReady+0x4e>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009386:	2bff      	cmp	r3, #255	@ 0xff
 8009388:	d00f      	beq.n	80093aa <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009398:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80093a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	22ff      	movs	r2, #255	@ 0xff
 80093a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2243      	movs	r2, #67	@ 0x43
 80093c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80093c2:	4b03      	ldr	r3, [pc, #12]	@ (80093d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	20000094 	.word	0x20000094

080093d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2243      	movs	r2, #67	@ 0x43
 80093e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80093e2:	4b03      	ldr	r3, [pc, #12]	@ (80093f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20000050 	.word	0x20000050

080093f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2243      	movs	r2, #67	@ 0x43
 8009400:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009402:	4b03      	ldr	r3, [pc, #12]	@ (8009410 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	200000d8 	.word	0x200000d8

08009414 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	220a      	movs	r2, #10
 8009420:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009422:	4b03      	ldr	r3, [pc, #12]	@ (8009430 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	2000000c 	.word	0x2000000c

08009434 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d101      	bne.n	8009448 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009444:	2303      	movs	r3, #3
 8009446:	e004      	b.n	8009452 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	370c      	adds	r7, #12
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800945e:	b480      	push	{r7}
 8009460:	b087      	sub	sp, #28
 8009462:	af00      	add	r7, sp, #0
 8009464:	60f8      	str	r0, [r7, #12]
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009470:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009478:	2303      	movs	r3, #3
 800947a:	e008      	b.n	800948e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800949a:	b480      	push	{r7}
 800949c:	b085      	sub	sp, #20
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e004      	b.n	80094c0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3714      	adds	r7, #20
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094da:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80094dc:	2301      	movs	r3, #1
 80094de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e01a      	b.n	8009524 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d114      	bne.n	8009522 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009516:	2181      	movs	r1, #129	@ 0x81
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 fdf0 	bl	800b0fe <USBD_LL_Transmit>

    ret = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800953a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009546:	2303      	movs	r3, #3
 8009548:	e016      	b.n	8009578 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7c1b      	ldrb	r3, [r3, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d109      	bne.n	8009566 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800955c:	2101      	movs	r1, #1
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fdee 	bl	800b140 <USBD_LL_PrepareReceive>
 8009564:	e007      	b.n	8009576 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800956c:	2340      	movs	r3, #64	@ 0x40
 800956e:	2101      	movs	r1, #1
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 fde5 	bl	800b140 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	e01f      	b.n	80095d8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	79fa      	ldrb	r2, [r7, #7]
 80095ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f001 fc4d 	bl	800ae6c <USBD_LL_Init>
 80095d2:	4603      	mov	r3, r0
 80095d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e016      	b.n	8009626 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00b      	beq.n	8009624 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009614:	f107 020e 	add.w	r2, r7, #14
 8009618:	4610      	mov	r0, r2
 800961a:	4798      	blx	r3
 800961c:	4602      	mov	r2, r0
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b082      	sub	sp, #8
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 fc78 	bl	800af2c <USBD_LL_Start>
 800963c:	4603      	mov	r3, r0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009668:	2303      	movs	r3, #3
 800966a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	4611      	mov	r1, r2
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	4798      	blx	r3
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	78fa      	ldrb	r2, [r7, #3]
 80096b4:	4611      	mov	r1, r2
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	4798      	blx	r3
  }

  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 ff46 	bl	800a568 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80096ea:	461a      	mov	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80096f8:	f003 031f 	and.w	r3, r3, #31
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d01a      	beq.n	8009736 <USBD_LL_SetupStage+0x72>
 8009700:	2b02      	cmp	r3, #2
 8009702:	d822      	bhi.n	800974a <USBD_LL_SetupStage+0x86>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <USBD_LL_SetupStage+0x4a>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d00a      	beq.n	8009722 <USBD_LL_SetupStage+0x5e>
 800970c:	e01d      	b.n	800974a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f9ee 	bl	8009af8 <USBD_StdDevReq>
 800971c:	4603      	mov	r3, r0
 800971e:	73fb      	strb	r3, [r7, #15]
      break;
 8009720:	e020      	b.n	8009764 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009728:	4619      	mov	r1, r3
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fa52 	bl	8009bd4 <USBD_StdItfReq>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]
      break;
 8009734:	e016      	b.n	8009764 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa91 	bl	8009c66 <USBD_StdEPReq>
 8009744:	4603      	mov	r3, r0
 8009746:	73fb      	strb	r3, [r7, #15]
      break;
 8009748:	e00c      	b.n	8009764 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009750:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 fc47 	bl	800afec <USBD_LL_StallEP>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]
      break;
 8009762:	bf00      	nop
  }

  return ret;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b086      	sub	sp, #24
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	460b      	mov	r3, r1
 8009778:	607a      	str	r2, [r7, #4]
 800977a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d138      	bne.n	80097f4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009788:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009790:	2b03      	cmp	r3, #3
 8009792:	d14a      	bne.n	800982a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	429a      	cmp	r2, r3
 800979e:	d913      	bls.n	80097c8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	1ad2      	subs	r2, r2, r3
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	4293      	cmp	r3, r2
 80097b8:	bf28      	it	cs
 80097ba:	4613      	movcs	r3, r2
 80097bc:	461a      	mov	r2, r3
 80097be:	6879      	ldr	r1, [r7, #4]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 ffc5 	bl	800a750 <USBD_CtlContinueRx>
 80097c6:	e030      	b.n	800982a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d10b      	bne.n	80097ec <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 ffc0 	bl	800a772 <USBD_CtlSendStatus>
 80097f2:	e01a      	b.n	800982a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d114      	bne.n	800982a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00e      	beq.n	800982a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	7afa      	ldrb	r2, [r7, #11]
 8009816:	4611      	mov	r1, r2
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	4798      	blx	r3
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	e000      	b.n	800982c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	460b      	mov	r3, r1
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d16b      	bne.n	8009920 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3314      	adds	r3, #20
 800984c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009854:	2b02      	cmp	r3, #2
 8009856:	d156      	bne.n	8009906 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	429a      	cmp	r2, r3
 8009862:	d914      	bls.n	800988e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	461a      	mov	r2, r3
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 ff3a 	bl	800a6f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009880:	2300      	movs	r3, #0
 8009882:	2200      	movs	r2, #0
 8009884:	2100      	movs	r1, #0
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f001 fc5a 	bl	800b140 <USBD_LL_PrepareReceive>
 800988c:	e03b      	b.n	8009906 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	68da      	ldr	r2, [r3, #12]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	d11c      	bne.n	80098d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	685a      	ldr	r2, [r3, #4]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d316      	bcc.n	80098d4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d20f      	bcs.n	80098d4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80098b4:	2200      	movs	r2, #0
 80098b6:	2100      	movs	r1, #0
 80098b8:	68f8      	ldr	r0, [r7, #12]
 80098ba:	f000 ff1b 	bl	800a6f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098c6:	2300      	movs	r3, #0
 80098c8:	2200      	movs	r2, #0
 80098ca:	2100      	movs	r1, #0
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f001 fc37 	bl	800b140 <USBD_LL_PrepareReceive>
 80098d2:	e018      	b.n	8009906 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d10b      	bne.n	80098f8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d005      	beq.n	80098f8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098f8:	2180      	movs	r1, #128	@ 0x80
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f001 fb76 	bl	800afec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f000 ff49 	bl	800a798 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800990c:	2b01      	cmp	r3, #1
 800990e:	d122      	bne.n	8009956 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f7ff fe98 	bl	8009646 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800991e:	e01a      	b.n	8009956 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b03      	cmp	r3, #3
 800992a:	d114      	bne.n	8009956 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00e      	beq.n	8009956 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	7afa      	ldrb	r2, [r7, #11]
 8009942:	4611      	mov	r1, r2
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	4798      	blx	r3
 8009948:	4603      	mov	r3, r0
 800994a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800994c:	7dfb      	ldrb	r3, [r7, #23]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009952:	7dfb      	ldrb	r3, [r7, #23]
 8009954:	e000      	b.n	8009958 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009990:	2303      	movs	r3, #3
 8009992:	e02f      	b.n	80099f4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00f      	beq.n	80099be <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d009      	beq.n	80099be <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	6852      	ldr	r2, [r2, #4]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	4611      	mov	r1, r2
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099be:	2340      	movs	r3, #64	@ 0x40
 80099c0:	2200      	movs	r2, #0
 80099c2:	2100      	movs	r1, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 facc 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2240      	movs	r2, #64	@ 0x40
 80099d6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099da:	2340      	movs	r3, #64	@ 0x40
 80099dc:	2200      	movs	r2, #0
 80099de:	2180      	movs	r1, #128	@ 0x80
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f001 fabe 	bl	800af62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2240      	movs	r2, #64	@ 0x40
 80099f0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	78fa      	ldrb	r2, [r7, #3]
 8009a0c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2204      	movs	r2, #4
 8009a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d106      	bne.n	8009a6a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e012      	b.n	8009ab4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d10b      	bne.n	8009ab2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d005      	beq.n	8009ab2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009ada:	8a3b      	ldrh	r3, [r7, #16]
 8009adc:	021b      	lsls	r3, r3, #8
 8009ade:	b21a      	sxth	r2, r3
 8009ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	b21b      	sxth	r3, r3
 8009ae8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009aea:	89fb      	ldrh	r3, [r7, #14]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	371c      	adds	r7, #28
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b0e:	2b40      	cmp	r3, #64	@ 0x40
 8009b10:	d005      	beq.n	8009b1e <USBD_StdDevReq+0x26>
 8009b12:	2b40      	cmp	r3, #64	@ 0x40
 8009b14:	d853      	bhi.n	8009bbe <USBD_StdDevReq+0xc6>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <USBD_StdDevReq+0x3a>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d14f      	bne.n	8009bbe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	4798      	blx	r3
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b30:	e04a      	b.n	8009bc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b09      	cmp	r3, #9
 8009b38:	d83b      	bhi.n	8009bb2 <USBD_StdDevReq+0xba>
 8009b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b40 <USBD_StdDevReq+0x48>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b95 	.word	0x08009b95
 8009b44:	08009ba9 	.word	0x08009ba9
 8009b48:	08009bb3 	.word	0x08009bb3
 8009b4c:	08009b9f 	.word	0x08009b9f
 8009b50:	08009bb3 	.word	0x08009bb3
 8009b54:	08009b73 	.word	0x08009b73
 8009b58:	08009b69 	.word	0x08009b69
 8009b5c:	08009bb3 	.word	0x08009bb3
 8009b60:	08009b8b 	.word	0x08009b8b
 8009b64:	08009b7d 	.word	0x08009b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f9de 	bl	8009f2c <USBD_GetDescriptor>
          break;
 8009b70:	e024      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fb6d 	bl	800a254 <USBD_SetAddress>
          break;
 8009b7a:	e01f      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fbac 	bl	800a2dc <USBD_SetConfig>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]
          break;
 8009b88:	e018      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fc4b 	bl	800a428 <USBD_GetConfig>
          break;
 8009b92:	e013      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fc7c 	bl	800a494 <USBD_GetStatus>
          break;
 8009b9c:	e00e      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fcab 	bl	800a4fc <USBD_SetFeature>
          break;
 8009ba6:	e009      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ba8:	6839      	ldr	r1, [r7, #0]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fcba 	bl	800a524 <USBD_ClrFeature>
          break;
 8009bb0:	e004      	b.n	8009bbc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fd11 	bl	800a5dc <USBD_CtlError>
          break;
 8009bba:	bf00      	nop
      }
      break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fd0b 	bl	800a5dc <USBD_CtlError>
      break;
 8009bc6:	bf00      	nop
  }

  return ret;
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop

08009bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bea:	2b40      	cmp	r3, #64	@ 0x40
 8009bec:	d005      	beq.n	8009bfa <USBD_StdItfReq+0x26>
 8009bee:	2b40      	cmp	r3, #64	@ 0x40
 8009bf0:	d82f      	bhi.n	8009c52 <USBD_StdItfReq+0x7e>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <USBD_StdItfReq+0x26>
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d12b      	bne.n	8009c52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d81d      	bhi.n	8009c44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	889b      	ldrh	r3, [r3, #4]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d813      	bhi.n	8009c3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	4798      	blx	r3
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	88db      	ldrh	r3, [r3, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d110      	bne.n	8009c4e <USBD_StdItfReq+0x7a>
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fd9d 	bl	800a772 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009c38:	e009      	b.n	8009c4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fccd 	bl	800a5dc <USBD_CtlError>
          break;
 8009c42:	e004      	b.n	8009c4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fcc8 	bl	800a5dc <USBD_CtlError>
          break;
 8009c4c:	e000      	b.n	8009c50 <USBD_StdItfReq+0x7c>
          break;
 8009c4e:	bf00      	nop
      }
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fcc1 	bl	800a5dc <USBD_CtlError>
      break;
 8009c5a:	bf00      	nop
  }

  return ret;
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	889b      	ldrh	r3, [r3, #4]
 8009c78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c82:	2b40      	cmp	r3, #64	@ 0x40
 8009c84:	d007      	beq.n	8009c96 <USBD_StdEPReq+0x30>
 8009c86:	2b40      	cmp	r3, #64	@ 0x40
 8009c88:	f200 8145 	bhi.w	8009f16 <USBD_StdEPReq+0x2b0>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <USBD_StdEPReq+0x44>
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	f040 8140 	bne.w	8009f16 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	4798      	blx	r3
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca8:	e13a      	b.n	8009f20 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	785b      	ldrb	r3, [r3, #1]
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d007      	beq.n	8009cc2 <USBD_StdEPReq+0x5c>
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	f300 8129 	bgt.w	8009f0a <USBD_StdEPReq+0x2a4>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d07f      	beq.n	8009dbc <USBD_StdEPReq+0x156>
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d03c      	beq.n	8009d3a <USBD_StdEPReq+0xd4>
 8009cc0:	e123      	b.n	8009f0a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d002      	beq.n	8009cd4 <USBD_StdEPReq+0x6e>
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d016      	beq.n	8009d00 <USBD_StdEPReq+0x9a>
 8009cd2:	e02c      	b.n	8009d2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00d      	beq.n	8009cf6 <USBD_StdEPReq+0x90>
 8009cda:	7bbb      	ldrb	r3, [r7, #14]
 8009cdc:	2b80      	cmp	r3, #128	@ 0x80
 8009cde:	d00a      	beq.n	8009cf6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f981 	bl	800afec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cea:	2180      	movs	r1, #128	@ 0x80
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 f97d 	bl	800afec <USBD_LL_StallEP>
 8009cf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cf4:	e020      	b.n	8009d38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fc6f 	bl	800a5dc <USBD_CtlError>
              break;
 8009cfe:	e01b      	b.n	8009d38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	885b      	ldrh	r3, [r3, #2]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10e      	bne.n	8009d26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00b      	beq.n	8009d26 <USBD_StdEPReq+0xc0>
 8009d0e:	7bbb      	ldrb	r3, [r7, #14]
 8009d10:	2b80      	cmp	r3, #128	@ 0x80
 8009d12:	d008      	beq.n	8009d26 <USBD_StdEPReq+0xc0>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f963 	bl	800afec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fd23 	bl	800a772 <USBD_CtlSendStatus>

              break;
 8009d2c:	e004      	b.n	8009d38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fc53 	bl	800a5dc <USBD_CtlError>
              break;
 8009d36:	bf00      	nop
          }
          break;
 8009d38:	e0ec      	b.n	8009f14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d002      	beq.n	8009d4c <USBD_StdEPReq+0xe6>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d016      	beq.n	8009d78 <USBD_StdEPReq+0x112>
 8009d4a:	e030      	b.n	8009dae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00d      	beq.n	8009d6e <USBD_StdEPReq+0x108>
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	2b80      	cmp	r3, #128	@ 0x80
 8009d56:	d00a      	beq.n	8009d6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f945 	bl	800afec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d62:	2180      	movs	r1, #128	@ 0x80
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 f941 	bl	800afec <USBD_LL_StallEP>
 8009d6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d6c:	e025      	b.n	8009dba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fc33 	bl	800a5dc <USBD_CtlError>
              break;
 8009d76:	e020      	b.n	8009dba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	885b      	ldrh	r3, [r3, #2]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d11b      	bne.n	8009db8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 f94b 	bl	800b02a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fcec 	bl	800a772 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
 8009da8:	4603      	mov	r3, r0
 8009daa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8009dac:	e004      	b.n	8009db8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8009dae:	6839      	ldr	r1, [r7, #0]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fc13 	bl	800a5dc <USBD_CtlError>
              break;
 8009db6:	e000      	b.n	8009dba <USBD_StdEPReq+0x154>
              break;
 8009db8:	bf00      	nop
          }
          break;
 8009dba:	e0ab      	b.n	8009f14 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d002      	beq.n	8009dce <USBD_StdEPReq+0x168>
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	d032      	beq.n	8009e32 <USBD_StdEPReq+0x1cc>
 8009dcc:	e097      	b.n	8009efe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d007      	beq.n	8009de4 <USBD_StdEPReq+0x17e>
 8009dd4:	7bbb      	ldrb	r3, [r7, #14]
 8009dd6:	2b80      	cmp	r3, #128	@ 0x80
 8009dd8:	d004      	beq.n	8009de4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fbfd 	bl	800a5dc <USBD_CtlError>
                break;
 8009de2:	e091      	b.n	8009f08 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009de4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da0b      	bge.n	8009e04 <USBD_StdEPReq+0x19e>
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	3310      	adds	r3, #16
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4413      	add	r3, r2
 8009e00:	3304      	adds	r3, #4
 8009e02:	e00b      	b.n	8009e1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4413      	add	r3, r2
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2202      	movs	r2, #2
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fc47 	bl	800a6be <USBD_CtlSendData>
              break;
 8009e30:	e06a      	b.n	8009f08 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da11      	bge.n	8009e5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 020f 	and.w	r2, r3, #15
 8009e40:	6879      	ldr	r1, [r7, #4]
 8009e42:	4613      	mov	r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	440b      	add	r3, r1
 8009e4c:	3324      	adds	r3, #36	@ 0x24
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d117      	bne.n	8009e84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fbc0 	bl	800a5dc <USBD_CtlError>
                  break;
 8009e5c:	e054      	b.n	8009f08 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	f003 020f 	and.w	r2, r3, #15
 8009e64:	6879      	ldr	r1, [r7, #4]
 8009e66:	4613      	mov	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	440b      	add	r3, r1
 8009e70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d104      	bne.n	8009e84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fbad 	bl	800a5dc <USBD_CtlError>
                  break;
 8009e82:	e041      	b.n	8009f08 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	da0b      	bge.n	8009ea4 <USBD_StdEPReq+0x23e>
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	3310      	adds	r3, #16
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	e00b      	b.n	8009ebc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eaa:	4613      	mov	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	4413      	add	r3, r2
 8009eba:	3304      	adds	r3, #4
 8009ebc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d002      	beq.n	8009eca <USBD_StdEPReq+0x264>
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b80      	cmp	r3, #128	@ 0x80
 8009ec8:	d103      	bne.n	8009ed2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	e00e      	b.n	8009ef0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 f8c6 	bl	800b068 <USBD_LL_IsStallEP>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
 8009ee8:	e002      	b.n	8009ef0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fbe1 	bl	800a6be <USBD_CtlSendData>
              break;
 8009efc:	e004      	b.n	8009f08 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fb6b 	bl	800a5dc <USBD_CtlError>
              break;
 8009f06:	bf00      	nop
          }
          break;
 8009f08:	e004      	b.n	8009f14 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fb65 	bl	800a5dc <USBD_CtlError>
          break;
 8009f12:	bf00      	nop
      }
      break;
 8009f14:	e004      	b.n	8009f20 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fb5f 	bl	800a5dc <USBD_CtlError>
      break;
 8009f1e:	bf00      	nop
  }

  return ret;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	885b      	ldrh	r3, [r3, #2]
 8009f46:	0a1b      	lsrs	r3, r3, #8
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	2b0e      	cmp	r3, #14
 8009f4e:	f200 8152 	bhi.w	800a1f6 <USBD_GetDescriptor+0x2ca>
 8009f52:	a201      	add	r2, pc, #4	@ (adr r2, 8009f58 <USBD_GetDescriptor+0x2c>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009fc9 	.word	0x08009fc9
 8009f5c:	08009fe1 	.word	0x08009fe1
 8009f60:	0800a021 	.word	0x0800a021
 8009f64:	0800a1f7 	.word	0x0800a1f7
 8009f68:	0800a1f7 	.word	0x0800a1f7
 8009f6c:	0800a197 	.word	0x0800a197
 8009f70:	0800a1c3 	.word	0x0800a1c3
 8009f74:	0800a1f7 	.word	0x0800a1f7
 8009f78:	0800a1f7 	.word	0x0800a1f7
 8009f7c:	0800a1f7 	.word	0x0800a1f7
 8009f80:	0800a1f7 	.word	0x0800a1f7
 8009f84:	0800a1f7 	.word	0x0800a1f7
 8009f88:	0800a1f7 	.word	0x0800a1f7
 8009f8c:	0800a1f7 	.word	0x0800a1f7
 8009f90:	08009f95 	.word	0x08009f95
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00b      	beq.n	8009fb8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fb6:	e126      	b.n	800a206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fb0e 	bl	800a5dc <USBD_CtlError>
        err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc6:	e11e      	b.n	800a206 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	7c12      	ldrb	r2, [r2, #16]
 8009fd4:	f107 0108 	add.w	r1, r7, #8
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	60f8      	str	r0, [r7, #12]
      break;
 8009fde:	e112      	b.n	800a206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7c1b      	ldrb	r3, [r3, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10d      	bne.n	800a004 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff0:	f107 0208 	add.w	r2, r7, #8
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	4798      	blx	r3
 8009ff8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	2202      	movs	r2, #2
 800a000:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a002:	e100      	b.n	800a206 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00c:	f107 0208 	add.w	r2, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	3301      	adds	r3, #1
 800a01a:	2202      	movs	r2, #2
 800a01c:	701a      	strb	r2, [r3, #0]
      break;
 800a01e:	e0f2      	b.n	800a206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	885b      	ldrh	r3, [r3, #2]
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b05      	cmp	r3, #5
 800a028:	f200 80ac 	bhi.w	800a184 <USBD_GetDescriptor+0x258>
 800a02c:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <USBD_GetDescriptor+0x108>)
 800a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a032:	bf00      	nop
 800a034:	0800a04d 	.word	0x0800a04d
 800a038:	0800a081 	.word	0x0800a081
 800a03c:	0800a0b5 	.word	0x0800a0b5
 800a040:	0800a0e9 	.word	0x0800a0e9
 800a044:	0800a11d 	.word	0x0800a11d
 800a048:	0800a151 	.word	0x0800a151
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	7c12      	ldrb	r2, [r2, #16]
 800a064:	f107 0108 	add.w	r1, r7, #8
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
 800a06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06e:	e091      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fab2 	bl	800a5dc <USBD_CtlError>
            err++;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	3301      	adds	r3, #1
 800a07c:	72fb      	strb	r3, [r7, #11]
          break;
 800a07e:	e089      	b.n	800a194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e077      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa98 	bl	800a5dc <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e06f      	b.n	800a194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e05d      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa7e 	bl	800a5dc <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e055      	b.n	800a194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00b      	beq.n	800a10c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	7c12      	ldrb	r2, [r2, #16]
 800a100:	f107 0108 	add.w	r1, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a10a:	e043      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fa64 	bl	800a5dc <USBD_CtlError>
            err++;
 800a114:	7afb      	ldrb	r3, [r7, #11]
 800a116:	3301      	adds	r3, #1
 800a118:	72fb      	strb	r3, [r7, #11]
          break;
 800a11a:	e03b      	b.n	800a194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	7c12      	ldrb	r2, [r2, #16]
 800a134:	f107 0108 	add.w	r1, r7, #8
 800a138:	4610      	mov	r0, r2
 800a13a:	4798      	blx	r3
 800a13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a13e:	e029      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a140:	6839      	ldr	r1, [r7, #0]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fa4a 	bl	800a5dc <USBD_CtlError>
            err++;
 800a148:	7afb      	ldrb	r3, [r7, #11]
 800a14a:	3301      	adds	r3, #1
 800a14c:	72fb      	strb	r3, [r7, #11]
          break;
 800a14e:	e021      	b.n	800a194 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e00f      	b.n	800a194 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa30 	bl	800a5dc <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e007      	b.n	800a194 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fa28 	bl	800a5dc <USBD_CtlError>
          err++;
 800a18c:	7afb      	ldrb	r3, [r7, #11]
 800a18e:	3301      	adds	r3, #1
 800a190:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a192:	bf00      	nop
      }
      break;
 800a194:	e037      	b.n	800a206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7c1b      	ldrb	r3, [r3, #16]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1a6:	f107 0208 	add.w	r2, r7, #8
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4798      	blx	r3
 800a1ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1b0:	e029      	b.n	800a206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fa11 	bl	800a5dc <USBD_CtlError>
        err++;
 800a1ba:	7afb      	ldrb	r3, [r7, #11]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	72fb      	strb	r3, [r7, #11]
      break;
 800a1c0:	e021      	b.n	800a206 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7c1b      	ldrb	r3, [r3, #16]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10d      	bne.n	800a1e6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d2:	f107 0208 	add.w	r2, r7, #8
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	4798      	blx	r3
 800a1da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	2207      	movs	r2, #7
 800a1e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a1e4:	e00f      	b.n	800a206 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a1e6:	6839      	ldr	r1, [r7, #0]
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 f9f7 	bl	800a5dc <USBD_CtlError>
        err++;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1f4:	e007      	b.n	800a206 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f9ef 	bl	800a5dc <USBD_CtlError>
      err++;
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	3301      	adds	r3, #1
 800a202:	72fb      	strb	r3, [r7, #11]
      break;
 800a204:	bf00      	nop
  }

  if (err != 0U)
 800a206:	7afb      	ldrb	r3, [r7, #11]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11e      	bne.n	800a24a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	88db      	ldrh	r3, [r3, #6]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d016      	beq.n	800a242 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a214:	893b      	ldrh	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00e      	beq.n	800a238 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	88da      	ldrh	r2, [r3, #6]
 800a21e:	893b      	ldrh	r3, [r7, #8]
 800a220:	4293      	cmp	r3, r2
 800a222:	bf28      	it	cs
 800a224:	4613      	movcs	r3, r2
 800a226:	b29b      	uxth	r3, r3
 800a228:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a22a:	893b      	ldrh	r3, [r7, #8]
 800a22c:	461a      	mov	r2, r3
 800a22e:	68f9      	ldr	r1, [r7, #12]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa44 	bl	800a6be <USBD_CtlSendData>
 800a236:	e009      	b.n	800a24c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f9ce 	bl	800a5dc <USBD_CtlError>
 800a240:	e004      	b.n	800a24c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa95 	bl	800a772 <USBD_CtlSendStatus>
 800a248:	e000      	b.n	800a24c <USBD_GetDescriptor+0x320>
    return;
 800a24a:	bf00      	nop
  }
}
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop

0800a254 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	889b      	ldrh	r3, [r3, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d131      	bne.n	800a2ca <USBD_SetAddress+0x76>
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	88db      	ldrh	r3, [r3, #6]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d12d      	bne.n	800a2ca <USBD_SetAddress+0x76>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	885b      	ldrh	r3, [r3, #2]
 800a272:	2b7f      	cmp	r3, #127	@ 0x7f
 800a274:	d829      	bhi.n	800a2ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	885b      	ldrh	r3, [r3, #2]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a280:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b03      	cmp	r3, #3
 800a28c:	d104      	bne.n	800a298 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f9a3 	bl	800a5dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a296:	e01d      	b.n	800a2d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	7bfa      	ldrb	r2, [r7, #15]
 800a29c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 ff0b 	bl	800b0c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa61 	bl	800a772 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d004      	beq.n	800a2c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2202      	movs	r2, #2
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2be:	e009      	b.n	800a2d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c8:	e004      	b.n	800a2d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f985 	bl	800a5dc <USBD_CtlError>
  }
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	4b4c      	ldr	r3, [pc, #304]	@ (800a424 <USBD_SetConfig+0x148>)
 800a2f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2f4:	4b4b      	ldr	r3, [pc, #300]	@ (800a424 <USBD_SetConfig+0x148>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d905      	bls.n	800a308 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f96c 	bl	800a5dc <USBD_CtlError>
    return USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	e088      	b.n	800a41a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b02      	cmp	r3, #2
 800a312:	d002      	beq.n	800a31a <USBD_SetConfig+0x3e>
 800a314:	2b03      	cmp	r3, #3
 800a316:	d025      	beq.n	800a364 <USBD_SetConfig+0x88>
 800a318:	e071      	b.n	800a3fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a31a:	4b42      	ldr	r3, [pc, #264]	@ (800a424 <USBD_SetConfig+0x148>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d01c      	beq.n	800a35c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800a322:	4b40      	ldr	r3, [pc, #256]	@ (800a424 <USBD_SetConfig+0x148>)
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	461a      	mov	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a32c:	4b3d      	ldr	r3, [pc, #244]	@ (800a424 <USBD_SetConfig+0x148>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff f992 	bl	800965c <USBD_SetClassConfig>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a33c:	7bfb      	ldrb	r3, [r7, #15]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800a342:	6839      	ldr	r1, [r7, #0]
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f949 	bl	800a5dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a34a:	e065      	b.n	800a418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa10 	bl	800a772 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2203      	movs	r2, #3
 800a356:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a35a:	e05d      	b.n	800a418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fa08 	bl	800a772 <USBD_CtlSendStatus>
      break;
 800a362:	e059      	b.n	800a418 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a364:	4b2f      	ldr	r3, [pc, #188]	@ (800a424 <USBD_SetConfig+0x148>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d112      	bne.n	800a392 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a374:	4b2b      	ldr	r3, [pc, #172]	@ (800a424 <USBD_SetConfig+0x148>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a37e:	4b29      	ldr	r3, [pc, #164]	@ (800a424 <USBD_SetConfig+0x148>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7ff f985 	bl	8009694 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f9f1 	bl	800a772 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a390:	e042      	b.n	800a418 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800a392:	4b24      	ldr	r3, [pc, #144]	@ (800a424 <USBD_SetConfig+0x148>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d02a      	beq.n	800a3f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f7ff f973 	bl	8009694 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a424 <USBD_SetConfig+0x148>)
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a424 <USBD_SetConfig+0x148>)
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff f94c 	bl	800965c <USBD_SetClassConfig>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00f      	beq.n	800a3ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f903 	bl	800a5dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7ff f958 	bl	8009694 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a3ec:	e014      	b.n	800a418 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f9bf 	bl	800a772 <USBD_CtlSendStatus>
      break;
 800a3f4:	e010      	b.n	800a418 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f9bb 	bl	800a772 <USBD_CtlSendStatus>
      break;
 800a3fc:	e00c      	b.n	800a418 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f8eb 	bl	800a5dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a406:	4b07      	ldr	r3, [pc, #28]	@ (800a424 <USBD_SetConfig+0x148>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff f941 	bl	8009694 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a412:	2303      	movs	r3, #3
 800a414:	73fb      	strb	r3, [r7, #15]
      break;
 800a416:	bf00      	nop
  }

  return ret;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20001178 	.word	0x20001178

0800a428 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	88db      	ldrh	r3, [r3, #6]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d004      	beq.n	800a444 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f8cd 	bl	800a5dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a442:	e023      	b.n	800a48c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	dc02      	bgt.n	800a456 <USBD_GetConfig+0x2e>
 800a450:	2b00      	cmp	r3, #0
 800a452:	dc03      	bgt.n	800a45c <USBD_GetConfig+0x34>
 800a454:	e015      	b.n	800a482 <USBD_GetConfig+0x5a>
 800a456:	2b03      	cmp	r3, #3
 800a458:	d00b      	beq.n	800a472 <USBD_GetConfig+0x4a>
 800a45a:	e012      	b.n	800a482 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	3308      	adds	r3, #8
 800a466:	2201      	movs	r2, #1
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f927 	bl	800a6be <USBD_CtlSendData>
        break;
 800a470:	e00c      	b.n	800a48c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3304      	adds	r3, #4
 800a476:	2201      	movs	r2, #1
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f91f 	bl	800a6be <USBD_CtlSendData>
        break;
 800a480:	e004      	b.n	800a48c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f8a9 	bl	800a5dc <USBD_CtlError>
        break;
 800a48a:	bf00      	nop
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d81e      	bhi.n	800a4ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	88db      	ldrh	r3, [r3, #6]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d004      	beq.n	800a4be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f890 	bl	800a5dc <USBD_CtlError>
        break;
 800a4bc:	e01a      	b.n	800a4f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d005      	beq.n	800a4da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f043 0202 	orr.w	r2, r3, #2
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	2202      	movs	r2, #2
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f8eb 	bl	800a6be <USBD_CtlSendData>
      break;
 800a4e8:	e004      	b.n	800a4f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f875 	bl	800a5dc <USBD_CtlError>
      break;
 800a4f2:	bf00      	nop
  }
}
 800a4f4:	bf00      	nop
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	885b      	ldrh	r3, [r3, #2]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d106      	bne.n	800a51c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f92b 	bl	800a772 <USBD_CtlSendStatus>
  }
}
 800a51c:	bf00      	nop
 800a51e:	3708      	adds	r7, #8
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a534:	b2db      	uxtb	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d80b      	bhi.n	800a554 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	885b      	ldrh	r3, [r3, #2]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d10c      	bne.n	800a55e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 f910 	bl	800a772 <USBD_CtlSendStatus>
      }
      break;
 800a552:	e004      	b.n	800a55e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f840 	bl	800a5dc <USBD_CtlError>
      break;
 800a55c:	e000      	b.n	800a560 <USBD_ClrFeature+0x3c>
      break;
 800a55e:	bf00      	nop
  }
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b084      	sub	sp, #16
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3301      	adds	r3, #1
 800a582:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff fa92 	bl	8009abc <SWAPBYTE>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff fa85 	bl	8009abc <SWAPBYTE>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fa78 	bl	8009abc <SWAPBYTE>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	80da      	strh	r2, [r3, #6]
}
 800a5d4:	bf00      	nop
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5e6:	2180      	movs	r1, #128	@ 0x80
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fcff 	bl	800afec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 fcfb 	bl	800afec <USBD_LL_StallEP>
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}

0800a5fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5fe:	b580      	push	{r7, lr}
 800a600:	b086      	sub	sp, #24
 800a602:	af00      	add	r7, sp, #0
 800a604:	60f8      	str	r0, [r7, #12]
 800a606:	60b9      	str	r1, [r7, #8]
 800a608:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d036      	beq.n	800a682 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a618:	6938      	ldr	r0, [r7, #16]
 800a61a:	f000 f836 	bl	800a68a <USBD_GetLen>
 800a61e:	4603      	mov	r3, r0
 800a620:	3301      	adds	r3, #1
 800a622:	b29b      	uxth	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4413      	add	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	7812      	ldrb	r2, [r2, #0]
 800a636:	701a      	strb	r2, [r3, #0]
  idx++;
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	3301      	adds	r3, #1
 800a63c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	4413      	add	r3, r2
 800a644:	2203      	movs	r2, #3
 800a646:	701a      	strb	r2, [r3, #0]
  idx++;
 800a648:	7dfb      	ldrb	r3, [r7, #23]
 800a64a:	3301      	adds	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a64e:	e013      	b.n	800a678 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	4413      	add	r3, r2
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	7812      	ldrb	r2, [r2, #0]
 800a65a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	3301      	adds	r3, #1
 800a660:	613b      	str	r3, [r7, #16]
    idx++;
 800a662:	7dfb      	ldrb	r3, [r7, #23]
 800a664:	3301      	adds	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	4413      	add	r3, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
    idx++;
 800a672:	7dfb      	ldrb	r3, [r7, #23]
 800a674:	3301      	adds	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e7      	bne.n	800a650 <USBD_GetString+0x52>
 800a680:	e000      	b.n	800a684 <USBD_GetString+0x86>
    return;
 800a682:	bf00      	nop
  }
}
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a69a:	e005      	b.n	800a6a8 <USBD_GetLen+0x1e>
  {
    len++;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1f5      	bne.n	800a69c <USBD_GetLen+0x12>
  }

  return len;
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	60f8      	str	r0, [r7, #12]
 800a6c6:	60b9      	str	r1, [r7, #8]
 800a6c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	68ba      	ldr	r2, [r7, #8]
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f000 fd0a 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	2100      	movs	r1, #0
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 fcf9 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2203      	movs	r2, #3
 800a726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	2100      	movs	r1, #0
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fcfd 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	2100      	movs	r1, #0
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 fcec 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2204      	movs	r2, #4
 800a77e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fcb8 	bl	800b0fe <USBD_LL_Transmit>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2205      	movs	r2, #5
 800a7a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 fcc6 	bl	800b140 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4912      	ldr	r1, [pc, #72]	@ (800a810 <MX_USB_Device_Init+0x50>)
 800a7c8:	4812      	ldr	r0, [pc, #72]	@ (800a814 <MX_USB_Device_Init+0x54>)
 800a7ca:	f7fe fed9 	bl	8009580 <USBD_Init>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800a7d4:	f7f7 f938 	bl	8001a48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800a7d8:	490f      	ldr	r1, [pc, #60]	@ (800a818 <MX_USB_Device_Init+0x58>)
 800a7da:	480e      	ldr	r0, [pc, #56]	@ (800a814 <MX_USB_Device_Init+0x54>)
 800a7dc:	f7fe ff00 	bl	80095e0 <USBD_RegisterClass>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800a7e6:	f7f7 f92f 	bl	8001a48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800a7ea:	490c      	ldr	r1, [pc, #48]	@ (800a81c <MX_USB_Device_Init+0x5c>)
 800a7ec:	4809      	ldr	r0, [pc, #36]	@ (800a814 <MX_USB_Device_Init+0x54>)
 800a7ee:	f7fe fe21 	bl	8009434 <USBD_CDC_RegisterInterface>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800a7f8:	f7f7 f926 	bl	8001a48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800a7fc:	4805      	ldr	r0, [pc, #20]	@ (800a814 <MX_USB_Device_Init+0x54>)
 800a7fe:	f7fe ff16 	bl	800962e <USBD_Start>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800a808:	f7f7 f91e 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800a80c:	bf00      	nop
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000130 	.word	0x20000130
 800a814:	2000117c 	.word	0x2000117c
 800a818:	20000018 	.word	0x20000018
 800a81c:	2000011c 	.word	0x2000011c

0800a820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a824:	2200      	movs	r2, #0
 800a826:	4905      	ldr	r1, [pc, #20]	@ (800a83c <CDC_Init_FS+0x1c>)
 800a828:	4805      	ldr	r0, [pc, #20]	@ (800a840 <CDC_Init_FS+0x20>)
 800a82a:	f7fe fe18 	bl	800945e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a82e:	4905      	ldr	r1, [pc, #20]	@ (800a844 <CDC_Init_FS+0x24>)
 800a830:	4803      	ldr	r0, [pc, #12]	@ (800a840 <CDC_Init_FS+0x20>)
 800a832:	f7fe fe32 	bl	800949a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a838:	4618      	mov	r0, r3
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	2000184c 	.word	0x2000184c
 800a840:	2000117c 	.word	0x2000117c
 800a844:	2000144c 	.word	0x2000144c

0800a848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a848:	b480      	push	{r7}
 800a84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a84c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a84e:	4618      	mov	r0, r3
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
 800a864:	4613      	mov	r3, r2
 800a866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b23      	cmp	r3, #35	@ 0x23
 800a86c:	d84a      	bhi.n	800a904 <CDC_Control_FS+0xac>
 800a86e:	a201      	add	r2, pc, #4	@ (adr r2, 800a874 <CDC_Control_FS+0x1c>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a905 	.word	0x0800a905
 800a878:	0800a905 	.word	0x0800a905
 800a87c:	0800a905 	.word	0x0800a905
 800a880:	0800a905 	.word	0x0800a905
 800a884:	0800a905 	.word	0x0800a905
 800a888:	0800a905 	.word	0x0800a905
 800a88c:	0800a905 	.word	0x0800a905
 800a890:	0800a905 	.word	0x0800a905
 800a894:	0800a905 	.word	0x0800a905
 800a898:	0800a905 	.word	0x0800a905
 800a89c:	0800a905 	.word	0x0800a905
 800a8a0:	0800a905 	.word	0x0800a905
 800a8a4:	0800a905 	.word	0x0800a905
 800a8a8:	0800a905 	.word	0x0800a905
 800a8ac:	0800a905 	.word	0x0800a905
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a905 	.word	0x0800a905
 800a8b8:	0800a905 	.word	0x0800a905
 800a8bc:	0800a905 	.word	0x0800a905
 800a8c0:	0800a905 	.word	0x0800a905
 800a8c4:	0800a905 	.word	0x0800a905
 800a8c8:	0800a905 	.word	0x0800a905
 800a8cc:	0800a905 	.word	0x0800a905
 800a8d0:	0800a905 	.word	0x0800a905
 800a8d4:	0800a905 	.word	0x0800a905
 800a8d8:	0800a905 	.word	0x0800a905
 800a8dc:	0800a905 	.word	0x0800a905
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a905 	.word	0x0800a905
 800a8e8:	0800a905 	.word	0x0800a905
 800a8ec:	0800a905 	.word	0x0800a905
 800a8f0:	0800a905 	.word	0x0800a905
 800a8f4:	0800a905 	.word	0x0800a905
 800a8f8:	0800a905 	.word	0x0800a905
 800a8fc:	0800a905 	.word	0x0800a905
 800a900:	0800a905 	.word	0x0800a905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a904:	bf00      	nop
  }

  return (USBD_OK);
 800a906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]

/* USER CODE BEGIN 6 */ // CDC_Receive_FS is a callback function. When data were received, the system calls this function. The received data can be accessed via Buf,and *Len
s_RxBuffers.IsCommandDataReceived=1;
 800a91e:	4b17      	ldr	r3, [pc, #92]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a920:	2201      	movs	r2, #1
 800a922:	721a      	strb	r2, [r3, #8]
//indicates data were received
s_RxBuffers.CommandsLens[s_RxBuffers.pos_receive]=*Len;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4b14      	ldr	r3, [pc, #80]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	b2d1      	uxtb	r1, r2
 800a92e:	4a13      	ldr	r2, [pc, #76]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a930:	4413      	add	r3, r2
 800a932:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800a936:	3309      	adds	r3, #9
 800a938:	460a      	mov	r2, r1
 800a93a:	701a      	strb	r2, [r3, #0]
//only set the length, data was directly saved to buffer
s_RxBuffers.pos_receive++;
 800a93c:	4b0f      	ldr	r3, [pc, #60]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3301      	adds	r3, #1
 800a942:	4a0e      	ldr	r2, [pc, #56]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a944:	6013      	str	r3, [r2, #0]
//move to next position to receive data
if
(s_RxBuffers.pos_receive>=MaxCommandsInBuffer)
 800a946:	4b0d      	ldr	r3, [pc, #52]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b09      	cmp	r3, #9
 800a94c:	dd02      	ble.n	800a954 <CDC_Receive_FS+0x40>
//reach the last buffer, need to rewind to 0
{
s_RxBuffers.pos_receive=0;
 800a94e:	4b0b      	ldr	r3, [pc, #44]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
}
//prepare to receive the next data
USBD_CDC_SetRxBuffer(&hUsbDeviceFS, s_RxBuffers.UserRxBufferFS[s_RxBuffers.pos_receive]);
 800a954:	4b09      	ldr	r3, [pc, #36]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	029b      	lsls	r3, r3, #10
 800a95a:	3308      	adds	r3, #8
 800a95c:	4a07      	ldr	r2, [pc, #28]	@ (800a97c <CDC_Receive_FS+0x68>)
 800a95e:	4413      	add	r3, r2
 800a960:	3301      	adds	r3, #1
 800a962:	4619      	mov	r1, r3
 800a964:	4806      	ldr	r0, [pc, #24]	@ (800a980 <CDC_Receive_FS+0x6c>)
 800a966:	f7fe fd98 	bl	800949a <USBD_CDC_SetRxBuffer>
//Set the buffer to receive incoming data
USBD_CDC_ReceivePacket(&hUsbDeviceFS);// Tell that you are ready to receive the next packet, otherwise you wouldn't be able to receive next data
 800a96a:	4805      	ldr	r0, [pc, #20]	@ (800a980 <CDC_Receive_FS+0x6c>)
 800a96c:	f7fe fdde 	bl	800952c <USBD_CDC_ReceivePacket>
return
USBD_OK;
 800a970:	2300      	movs	r3, #0
/* USER CODE END 6 */
}/**
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20001c4c 	.word	0x20001c4c
 800a980:	2000117c 	.word	0x2000117c

0800a984 <VCP_retrieveInputData>:
 * @param Buf: Buffer of data to be received
 * @param Len: Number of data received (in bytes)
 * @retval 0 means no data was received.
 */
 int8_t VCP_retrieveInputData(uint8_t* Buf, uint32_t *Len)
 {
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	6039      	str	r1, [r7, #0]
 if
 (s_RxBuffers.IsCommandDataReceived==0)
 800a98e:	4b1f      	ldr	r3, [pc, #124]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a990:	7a1b      	ldrb	r3, [r3, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <VCP_retrieveInputData+0x16>
 return
 0;
 800a996:	2300      	movs	r3, #0
 800a998:	e034      	b.n	800aa04 <VCP_retrieveInputData+0x80>
 //no data received
 int
 index=s_RxBuffers.pos_process;
 800a99a:	4b1c      	ldr	r3, [pc, #112]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	60fb      	str	r3, [r7, #12]
 *Len=s_RxBuffers.CommandsLens[index];
 800a9a0:	4a1a      	ldr	r2, [pc, #104]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800a9aa:	3309      	adds	r3, #9
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	601a      	str	r2, [r3, #0]
 //return the length
 memcpy(Buf,s_RxBuffers.UserRxBufferFS[index],*Len);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	029b      	lsls	r3, r3, #10
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	4a14      	ldr	r2, [pc, #80]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9bc:	4413      	add	r3, r2
 800a9be:	1c59      	adds	r1, r3, #1
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 fa95 	bl	800bef6 <memcpy>
 Buf[*Len]=
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
 '\0'
 ;
 //testing only. make sure there is ending char in the returned command string
 //check if all data were processed.
 s_RxBuffers.pos_process++;
 800a9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	4a0b      	ldr	r2, [pc, #44]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9e0:	6053      	str	r3, [r2, #4]
 if
 (s_RxBuffers.pos_process>=MaxCommandsInBuffer)
 800a9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	dd02      	ble.n	800a9f0 <VCP_retrieveInputData+0x6c>
 //reach the last buffer, need to rewind to 0
 {
 s_RxBuffers.pos_process=0;
 800a9ea:	4b08      	ldr	r3, [pc, #32]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	605a      	str	r2, [r3, #4]
 }
 if
 (s_RxBuffers.pos_process==s_RxBuffers.pos_receive)s_RxBuffers.IsCommandDataReceived=0;
 800a9f0:	4b06      	ldr	r3, [pc, #24]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b05      	ldr	r3, [pc, #20]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d102      	bne.n	800aa02 <VCP_retrieveInputData+0x7e>
 800a9fc:	4b03      	ldr	r3, [pc, #12]	@ (800aa0c <VCP_retrieveInputData+0x88>)
 800a9fe:	2200      	movs	r2, #0
 800aa00:	721a      	strb	r2, [r3, #8]
 //check if all data were processed
 return
 1;
 800aa02:	2301      	movs	r3, #1
 }
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	20001c4c 	.word	0x20001c4c

0800aa10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa20:	4b0d      	ldr	r3, [pc, #52]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aa26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e00b      	b.n	800aa4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa36:	887b      	ldrh	r3, [r7, #2]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	4806      	ldr	r0, [pc, #24]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa3e:	f7fe fd0e 	bl	800945e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa42:	4805      	ldr	r0, [pc, #20]	@ (800aa58 <CDC_Transmit_FS+0x48>)
 800aa44:	f7fe fd42 	bl	80094cc <USBD_CDC_TransmitPacket>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	2000117c 	.word	0x2000117c

0800aa5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	371c      	adds	r7, #28
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
	...

0800aa80 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2212      	movs	r2, #18
 800aa90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800aa92:	4b03      	ldr	r3, [pc, #12]	@ (800aaa0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20000150 	.word	0x20000150

0800aaa4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2204      	movs	r2, #4
 800aab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aab6:	4b03      	ldr	r3, [pc, #12]	@ (800aac4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	20000164 	.word	0x20000164

0800aac8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	4603      	mov	r3, r0
 800aad0:	6039      	str	r1, [r7, #0]
 800aad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad4:	79fb      	ldrb	r3, [r7, #7]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d105      	bne.n	800aae6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aada:	683a      	ldr	r2, [r7, #0]
 800aadc:	4907      	ldr	r1, [pc, #28]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aade:	4808      	ldr	r0, [pc, #32]	@ (800ab00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aae0:	f7ff fd8d 	bl	800a5fe <USBD_GetString>
 800aae4:	e004      	b.n	800aaf0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	4904      	ldr	r1, [pc, #16]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
 800aaea:	4805      	ldr	r0, [pc, #20]	@ (800ab00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800aaec:	f7ff fd87 	bl	800a5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf0:	4b02      	ldr	r3, [pc, #8]	@ (800aafc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	20004460 	.word	0x20004460
 800ab00:	0800e240 	.word	0x0800e240

0800ab04 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	4904      	ldr	r1, [pc, #16]	@ (800ab24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ab14:	4804      	ldr	r0, [pc, #16]	@ (800ab28 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ab16:	f7ff fd72 	bl	800a5fe <USBD_GetString>
  return USBD_StrDesc;
 800ab1a:	4b02      	ldr	r3, [pc, #8]	@ (800ab24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	20004460 	.word	0x20004460
 800ab28:	0800e258 	.word	0x0800e258

0800ab2c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	4603      	mov	r3, r0
 800ab34:	6039      	str	r1, [r7, #0]
 800ab36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	221a      	movs	r2, #26
 800ab3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab3e:	f000 f843 	bl	800abc8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ab42:	4b02      	ldr	r3, [pc, #8]	@ (800ab4c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20000168 	.word	0x20000168

0800ab50 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	4603      	mov	r3, r0
 800ab58:	6039      	str	r1, [r7, #0]
 800ab5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	4907      	ldr	r1, [pc, #28]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab66:	4808      	ldr	r0, [pc, #32]	@ (800ab88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab68:	f7ff fd49 	bl	800a5fe <USBD_GetString>
 800ab6c:	e004      	b.n	800ab78 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	4904      	ldr	r1, [pc, #16]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ab72:	4805      	ldr	r0, [pc, #20]	@ (800ab88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ab74:	f7ff fd43 	bl	800a5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab78:	4b02      	ldr	r3, [pc, #8]	@ (800ab84 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	20004460 	.word	0x20004460
 800ab88:	0800e26c 	.word	0x0800e26c

0800ab8c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	6039      	str	r1, [r7, #0]
 800ab96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d105      	bne.n	800abaa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	4907      	ldr	r1, [pc, #28]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800aba2:	4808      	ldr	r0, [pc, #32]	@ (800abc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800aba4:	f7ff fd2b 	bl	800a5fe <USBD_GetString>
 800aba8:	e004      	b.n	800abb4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	4904      	ldr	r1, [pc, #16]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800abae:	4805      	ldr	r0, [pc, #20]	@ (800abc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800abb0:	f7ff fd25 	bl	800a5fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb4:	4b02      	ldr	r3, [pc, #8]	@ (800abc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20004460 	.word	0x20004460
 800abc4:	0800e278 	.word	0x0800e278

0800abc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abce:	4b0f      	ldr	r3, [pc, #60]	@ (800ac0c <Get_SerialNum+0x44>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ac10 <Get_SerialNum+0x48>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abda:	4b0e      	ldr	r3, [pc, #56]	@ (800ac14 <Get_SerialNum+0x4c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d009      	beq.n	800ac02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abee:	2208      	movs	r2, #8
 800abf0:	4909      	ldr	r1, [pc, #36]	@ (800ac18 <Get_SerialNum+0x50>)
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f000 f814 	bl	800ac20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abf8:	2204      	movs	r2, #4
 800abfa:	4908      	ldr	r1, [pc, #32]	@ (800ac1c <Get_SerialNum+0x54>)
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f000 f80f 	bl	800ac20 <IntToUnicode>
  }
}
 800ac02:	bf00      	nop
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	1fff7590 	.word	0x1fff7590
 800ac10:	1fff7594 	.word	0x1fff7594
 800ac14:	1fff7598 	.word	0x1fff7598
 800ac18:	2000016a 	.word	0x2000016a
 800ac1c:	2000017a 	.word	0x2000017a

0800ac20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]
 800ac36:	e027      	b.n	800ac88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0f1b      	lsrs	r3, r3, #28
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d80b      	bhi.n	800ac58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	0f1b      	lsrs	r3, r3, #28
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	005b      	lsls	r3, r3, #1
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	440b      	add	r3, r1
 800ac50:	3230      	adds	r2, #48	@ 0x30
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e00a      	b.n	800ac6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	0f1b      	lsrs	r3, r3, #28
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4619      	mov	r1, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	440b      	add	r3, r1
 800ac68:	3237      	adds	r2, #55	@ 0x37
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	005b      	lsls	r3, r3, #1
 800ac78:	3301      	adds	r3, #1
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	2200      	movs	r2, #0
 800ac80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	3301      	adds	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
 800ac88:	7dfa      	ldrb	r2, [r7, #23]
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d3d3      	bcc.n	800ac38 <IntToUnicode+0x18>
  }
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b094      	sub	sp, #80	@ 0x50
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aca8:	f107 030c 	add.w	r3, r7, #12
 800acac:	2244      	movs	r2, #68	@ 0x44
 800acae:	2100      	movs	r1, #0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f001 f876 	bl	800bda2 <memset>
  if(pcdHandle->Instance==USB)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a15      	ldr	r2, [pc, #84]	@ (800ad10 <HAL_PCD_MspInit+0x70>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d123      	bne.n	800ad08 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800acc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800acc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800acc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800acca:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800accc:	f107 030c 	add.w	r3, r7, #12
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fb fa35 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800acdc:	f7f6 feb4 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ace0:	4b0c      	ldr	r3, [pc, #48]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800ace2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace4:	4a0b      	ldr	r2, [pc, #44]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800ace6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800acea:	6593      	str	r3, [r2, #88]	@ 0x58
 800acec:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <HAL_PCD_MspInit+0x74>)
 800acee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acf4:	60bb      	str	r3, [r7, #8]
 800acf6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800acf8:	2200      	movs	r2, #0
 800acfa:	2100      	movs	r1, #0
 800acfc:	2014      	movs	r0, #20
 800acfe:	f7f8 fd72 	bl	80037e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ad02:	2014      	movs	r0, #20
 800ad04:	f7f8 fd89 	bl	800381a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3750      	adds	r7, #80	@ 0x50
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	40005c00 	.word	0x40005c00
 800ad14:	40021000 	.word	0x40021000

0800ad18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe fcc8 	bl	80096c4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ad34:	bf00      	nop
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	440b      	add	r3, r1
 800ad5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	4619      	mov	r1, r3
 800ad66:	f7fe fd02 	bl	800976e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ad6a:	bf00      	nop
 800ad6c:	3708      	adds	r7, #8
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b082      	sub	sp, #8
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ad84:	78fa      	ldrb	r2, [r7, #3]
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	440b      	add	r3, r1
 800ad92:	3324      	adds	r3, #36	@ 0x24
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	78fb      	ldrb	r3, [r7, #3]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	f7fe fd4b 	bl	8009834 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ad9e:	bf00      	nop
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b082      	sub	sp, #8
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fe5f 	bl	8009a78 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b084      	sub	sp, #16
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800adca:	2301      	movs	r3, #1
 800adcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	795b      	ldrb	r3, [r3, #5]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d001      	beq.n	800adda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800add6:	f7f6 fe37 	bl	8001a48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fe09 	bl	80099fc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fdb5 	bl	8009960 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fe04 	bl	8009a1c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	7a5b      	ldrb	r3, [r3, #9]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d005      	beq.n	800ae28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae1c:	4b04      	ldr	r3, [pc, #16]	@ (800ae30 <HAL_PCD_SuspendCallback+0x30>)
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	4a03      	ldr	r2, [pc, #12]	@ (800ae30 <HAL_PCD_SuspendCallback+0x30>)
 800ae22:	f043 0306 	orr.w	r3, r3, #6
 800ae26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	e000ed00 	.word	0xe000ed00

0800ae34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7a5b      	ldrb	r3, [r3, #9]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae44:	4b08      	ldr	r3, [pc, #32]	@ (800ae68 <HAL_PCD_ResumeCallback+0x34>)
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	4a07      	ldr	r2, [pc, #28]	@ (800ae68 <HAL_PCD_ResumeCallback+0x34>)
 800ae4a:	f023 0306 	bic.w	r3, r3, #6
 800ae4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ae50:	f000 f9f8 	bl	800b244 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe fdf4 	bl	8009a48 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed00 	.word	0xe000ed00

0800ae6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ae74:	4a2b      	ldr	r2, [pc, #172]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a29      	ldr	r2, [pc, #164]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800ae84:	4b27      	ldr	r3, [pc, #156]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae86:	4a28      	ldr	r2, [pc, #160]	@ (800af28 <USBD_LL_Init+0xbc>)
 800ae88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ae8a:	4b26      	ldr	r3, [pc, #152]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ae90:	4b24      	ldr	r3, [pc, #144]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae92:	2202      	movs	r2, #2
 800ae94:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae96:	4b23      	ldr	r3, [pc, #140]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae98:	2202      	movs	r2, #2
 800ae9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ae9c:	4b21      	ldr	r3, [pc, #132]	@ (800af24 <USBD_LL_Init+0xb8>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aea2:	4b20      	ldr	r3, [pc, #128]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aea8:	4b1e      	ldr	r3, [pc, #120]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aeae:	4b1d      	ldr	r3, [pc, #116]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aeb4:	481b      	ldr	r0, [pc, #108]	@ (800af24 <USBD_LL_Init+0xb8>)
 800aeb6:	f7f8 fe65 	bl	8003b84 <HAL_PCD_Init>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800aec0:	f7f6 fdc2 	bl	8001a48 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeca:	2318      	movs	r3, #24
 800aecc:	2200      	movs	r2, #0
 800aece:	2100      	movs	r1, #0
 800aed0:	f7fa fb1e 	bl	8005510 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeda:	2358      	movs	r3, #88	@ 0x58
 800aedc:	2200      	movs	r2, #0
 800aede:	2180      	movs	r1, #128	@ 0x80
 800aee0:	f7fa fb16 	bl	8005510 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aeea:	23c0      	movs	r3, #192	@ 0xc0
 800aeec:	2200      	movs	r2, #0
 800aeee:	2181      	movs	r1, #129	@ 0x81
 800aef0:	f7fa fb0e 	bl	8005510 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800aefa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800aefe:	2200      	movs	r2, #0
 800af00:	2101      	movs	r1, #1
 800af02:	f7fa fb05 	bl	8005510 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af10:	2200      	movs	r2, #0
 800af12:	2182      	movs	r1, #130	@ 0x82
 800af14:	f7fa fafc 	bl	8005510 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20004660 	.word	0x20004660
 800af28:	40005c00 	.word	0x40005c00

0800af2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800af42:	4618      	mov	r0, r3
 800af44:	f7f8 feec 	bl	8003d20 <HAL_PCD_Start>
 800af48:	4603      	mov	r3, r0
 800af4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f97e 	bl	800b250 <USBD_Get_USB_Status>
 800af54:	4603      	mov	r3, r0
 800af56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af58:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	4608      	mov	r0, r1
 800af6c:	4611      	mov	r1, r2
 800af6e:	461a      	mov	r2, r3
 800af70:	4603      	mov	r3, r0
 800af72:	70fb      	strb	r3, [r7, #3]
 800af74:	460b      	mov	r3, r1
 800af76:	70bb      	strb	r3, [r7, #2]
 800af78:	4613      	mov	r3, r2
 800af7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800af8a:	78bb      	ldrb	r3, [r7, #2]
 800af8c:	883a      	ldrh	r2, [r7, #0]
 800af8e:	78f9      	ldrb	r1, [r7, #3]
 800af90:	f7f9 f833 	bl	8003ffa <HAL_PCD_EP_Open>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f958 	bl	800b250 <USBD_Get_USB_Status>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	460b      	mov	r3, r1
 800afb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800afc8:	78fa      	ldrb	r2, [r7, #3]
 800afca:	4611      	mov	r1, r2
 800afcc:	4618      	mov	r0, r3
 800afce:	f7f9 f871 	bl	80040b4 <HAL_PCD_EP_Close>
 800afd2:	4603      	mov	r3, r0
 800afd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 f939 	bl	800b250 <USBD_Get_USB_Status>
 800afde:	4603      	mov	r3, r0
 800afe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b006:	78fa      	ldrb	r2, [r7, #3]
 800b008:	4611      	mov	r1, r2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7f9 f91a 	bl	8004244 <HAL_PCD_EP_SetStall>
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 f91a 	bl	800b250 <USBD_Get_USB_Status>
 800b01c:	4603      	mov	r3, r0
 800b01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b020:	7bbb      	ldrb	r3, [r7, #14]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b044:	78fa      	ldrb	r2, [r7, #3]
 800b046:	4611      	mov	r1, r2
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 f94d 	bl	80042e8 <HAL_PCD_EP_ClrStall>
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	4618      	mov	r0, r3
 800b056:	f000 f8fb 	bl	800b250 <USBD_Get_USB_Status>
 800b05a:	4603      	mov	r3, r0
 800b05c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	460b      	mov	r3, r1
 800b072:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b07a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b07c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da0b      	bge.n	800b09c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	440b      	add	r3, r1
 800b096:	3312      	adds	r3, #18
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	e00b      	b.n	800b0b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b09c:	78fb      	ldrb	r3, [r7, #3]
 800b09e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	440b      	add	r3, r1
 800b0ae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b0b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	4611      	mov	r1, r2
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f8 ff67 	bl	8003fb2 <HAL_PCD_SetAddress>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 f8b0 	bl	800b250 <USBD_Get_USB_Status>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af00      	add	r7, sp, #0
 800b104:	60f8      	str	r0, [r7, #12]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
 800b10a:	460b      	mov	r3, r1
 800b10c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b11c:	7af9      	ldrb	r1, [r7, #11]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	f7f9 f858 	bl	80041d6 <HAL_PCD_EP_Transmit>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f000 f88f 	bl	800b250 <USBD_Get_USB_Status>
 800b132:	4603      	mov	r3, r0
 800b134:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b136:	7dbb      	ldrb	r3, [r7, #22]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	607a      	str	r2, [r7, #4]
 800b14a:	603b      	str	r3, [r7, #0]
 800b14c:	460b      	mov	r3, r1
 800b14e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b15e:	7af9      	ldrb	r1, [r7, #11]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	f7f8 ffee 	bl	8004144 <HAL_PCD_EP_Receive>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f86e 	bl	800b250 <USBD_Get_USB_Status>
 800b174:	4603      	mov	r3, r0
 800b176:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b178:	7dbb      	ldrb	r3, [r7, #22]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b194:	78fa      	ldrb	r2, [r7, #3]
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f9 f804 	bl	80041a6 <HAL_PCD_EP_GetRxCount>
 800b19e:	4603      	mov	r3, r0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <HAL_PCDEx_LPM_Callback+0x18>
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d013      	beq.n	800b1e6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b1be:	e023      	b.n	800b208 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	7a5b      	ldrb	r3, [r3, #9]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b1c8:	f000 f83c 	bl	800b244 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1cc:	4b10      	ldr	r3, [pc, #64]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	4a0f      	ldr	r2, [pc, #60]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1d2:	f023 0306 	bic.w	r3, r3, #6
 800b1d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fc32 	bl	8009a48 <USBD_LL_Resume>
    break;
 800b1e4:	e010      	b.n	800b208 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fe fc15 	bl	8009a1c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7a5b      	ldrb	r3, [r3, #9]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b1fa:	4b05      	ldr	r3, [pc, #20]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	4a04      	ldr	r2, [pc, #16]	@ (800b210 <HAL_PCDEx_LPM_Callback+0x68>)
 800b200:	f043 0306 	orr.w	r3, r3, #6
 800b204:	6113      	str	r3, [r2, #16]
    break;
 800b206:	bf00      	nop
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	e000ed00 	.word	0xe000ed00

0800b214 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b21c:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <USBD_static_malloc+0x18>)
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	2000493c 	.word	0x2000493c

0800b230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]

}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b248:	f7f6 f9fc 	bl	8001644 <SystemClock_Config>
}
 800b24c:	bf00      	nop
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d817      	bhi.n	800b294 <USBD_Get_USB_Status+0x44>
 800b264:	a201      	add	r2, pc, #4	@ (adr r2, 800b26c <USBD_Get_USB_Status+0x1c>)
 800b266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26a:	bf00      	nop
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b283 	.word	0x0800b283
 800b274:	0800b289 	.word	0x0800b289
 800b278:	0800b28f 	.word	0x0800b28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e00b      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b282:	2303      	movs	r3, #3
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e008      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b288:	2301      	movs	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e005      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b28e:	2303      	movs	r3, #3
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	e002      	b.n	800b29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
    break;
 800b298:	bf00      	nop
  }
  return usb_status;
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <__cvt>:
 800b2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ac:	ec57 6b10 	vmov	r6, r7, d0
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	463b      	mov	r3, r7
 800b2b8:	bfbb      	ittet	lt
 800b2ba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b2be:	461f      	movlt	r7, r3
 800b2c0:	2300      	movge	r3, #0
 800b2c2:	232d      	movlt	r3, #45	@ 0x2d
 800b2c4:	700b      	strb	r3, [r1, #0]
 800b2c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2c8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b2cc:	4691      	mov	r9, r2
 800b2ce:	f023 0820 	bic.w	r8, r3, #32
 800b2d2:	bfbc      	itt	lt
 800b2d4:	4632      	movlt	r2, r6
 800b2d6:	4616      	movlt	r6, r2
 800b2d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2dc:	d005      	beq.n	800b2ea <__cvt+0x42>
 800b2de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b2e2:	d100      	bne.n	800b2e6 <__cvt+0x3e>
 800b2e4:	3401      	adds	r4, #1
 800b2e6:	2102      	movs	r1, #2
 800b2e8:	e000      	b.n	800b2ec <__cvt+0x44>
 800b2ea:	2103      	movs	r1, #3
 800b2ec:	ab03      	add	r3, sp, #12
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	ab02      	add	r3, sp, #8
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	ec47 6b10 	vmov	d0, r6, r7
 800b2f8:	4653      	mov	r3, sl
 800b2fa:	4622      	mov	r2, r4
 800b2fc:	f000 fe94 	bl	800c028 <_dtoa_r>
 800b300:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b304:	4605      	mov	r5, r0
 800b306:	d119      	bne.n	800b33c <__cvt+0x94>
 800b308:	f019 0f01 	tst.w	r9, #1
 800b30c:	d00e      	beq.n	800b32c <__cvt+0x84>
 800b30e:	eb00 0904 	add.w	r9, r0, r4
 800b312:	2200      	movs	r2, #0
 800b314:	2300      	movs	r3, #0
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f5 fbfd 	bl	8000b18 <__aeabi_dcmpeq>
 800b31e:	b108      	cbz	r0, 800b324 <__cvt+0x7c>
 800b320:	f8cd 900c 	str.w	r9, [sp, #12]
 800b324:	2230      	movs	r2, #48	@ 0x30
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	454b      	cmp	r3, r9
 800b32a:	d31e      	bcc.n	800b36a <__cvt+0xc2>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b330:	1b5b      	subs	r3, r3, r5
 800b332:	4628      	mov	r0, r5
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	b004      	add	sp, #16
 800b338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b340:	eb00 0904 	add.w	r9, r0, r4
 800b344:	d1e5      	bne.n	800b312 <__cvt+0x6a>
 800b346:	7803      	ldrb	r3, [r0, #0]
 800b348:	2b30      	cmp	r3, #48	@ 0x30
 800b34a:	d10a      	bne.n	800b362 <__cvt+0xba>
 800b34c:	2200      	movs	r2, #0
 800b34e:	2300      	movs	r3, #0
 800b350:	4630      	mov	r0, r6
 800b352:	4639      	mov	r1, r7
 800b354:	f7f5 fbe0 	bl	8000b18 <__aeabi_dcmpeq>
 800b358:	b918      	cbnz	r0, 800b362 <__cvt+0xba>
 800b35a:	f1c4 0401 	rsb	r4, r4, #1
 800b35e:	f8ca 4000 	str.w	r4, [sl]
 800b362:	f8da 3000 	ldr.w	r3, [sl]
 800b366:	4499      	add	r9, r3
 800b368:	e7d3      	b.n	800b312 <__cvt+0x6a>
 800b36a:	1c59      	adds	r1, r3, #1
 800b36c:	9103      	str	r1, [sp, #12]
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	e7d9      	b.n	800b326 <__cvt+0x7e>

0800b372 <__exponent>:
 800b372:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b374:	2900      	cmp	r1, #0
 800b376:	bfba      	itte	lt
 800b378:	4249      	neglt	r1, r1
 800b37a:	232d      	movlt	r3, #45	@ 0x2d
 800b37c:	232b      	movge	r3, #43	@ 0x2b
 800b37e:	2909      	cmp	r1, #9
 800b380:	7002      	strb	r2, [r0, #0]
 800b382:	7043      	strb	r3, [r0, #1]
 800b384:	dd29      	ble.n	800b3da <__exponent+0x68>
 800b386:	f10d 0307 	add.w	r3, sp, #7
 800b38a:	461d      	mov	r5, r3
 800b38c:	270a      	movs	r7, #10
 800b38e:	461a      	mov	r2, r3
 800b390:	fbb1 f6f7 	udiv	r6, r1, r7
 800b394:	fb07 1416 	mls	r4, r7, r6, r1
 800b398:	3430      	adds	r4, #48	@ 0x30
 800b39a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b39e:	460c      	mov	r4, r1
 800b3a0:	2c63      	cmp	r4, #99	@ 0x63
 800b3a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	dcf1      	bgt.n	800b38e <__exponent+0x1c>
 800b3aa:	3130      	adds	r1, #48	@ 0x30
 800b3ac:	1e94      	subs	r4, r2, #2
 800b3ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b3b2:	1c41      	adds	r1, r0, #1
 800b3b4:	4623      	mov	r3, r4
 800b3b6:	42ab      	cmp	r3, r5
 800b3b8:	d30a      	bcc.n	800b3d0 <__exponent+0x5e>
 800b3ba:	f10d 0309 	add.w	r3, sp, #9
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	42ac      	cmp	r4, r5
 800b3c2:	bf88      	it	hi
 800b3c4:	2300      	movhi	r3, #0
 800b3c6:	3302      	adds	r3, #2
 800b3c8:	4403      	add	r3, r0
 800b3ca:	1a18      	subs	r0, r3, r0
 800b3cc:	b003      	add	sp, #12
 800b3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b3d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b3d8:	e7ed      	b.n	800b3b6 <__exponent+0x44>
 800b3da:	2330      	movs	r3, #48	@ 0x30
 800b3dc:	3130      	adds	r1, #48	@ 0x30
 800b3de:	7083      	strb	r3, [r0, #2]
 800b3e0:	70c1      	strb	r1, [r0, #3]
 800b3e2:	1d03      	adds	r3, r0, #4
 800b3e4:	e7f1      	b.n	800b3ca <__exponent+0x58>
	...

0800b3e8 <_printf_float>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	b08d      	sub	sp, #52	@ 0x34
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b3f4:	4616      	mov	r6, r2
 800b3f6:	461f      	mov	r7, r3
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	f000 fcfd 	bl	800bdf8 <_localeconv_r>
 800b3fe:	6803      	ldr	r3, [r0, #0]
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	4618      	mov	r0, r3
 800b404:	f7f4 ff5c 	bl	80002c0 <strlen>
 800b408:	2300      	movs	r3, #0
 800b40a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b40c:	f8d8 3000 	ldr.w	r3, [r8]
 800b410:	9005      	str	r0, [sp, #20]
 800b412:	3307      	adds	r3, #7
 800b414:	f023 0307 	bic.w	r3, r3, #7
 800b418:	f103 0208 	add.w	r2, r3, #8
 800b41c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b420:	f8d4 b000 	ldr.w	fp, [r4]
 800b424:	f8c8 2000 	str.w	r2, [r8]
 800b428:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b42c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	f8cd 8018 	str.w	r8, [sp, #24]
 800b436:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b43a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b43e:	4b9c      	ldr	r3, [pc, #624]	@ (800b6b0 <_printf_float+0x2c8>)
 800b440:	f04f 32ff 	mov.w	r2, #4294967295
 800b444:	f7f5 fb9a 	bl	8000b7c <__aeabi_dcmpun>
 800b448:	bb70      	cbnz	r0, 800b4a8 <_printf_float+0xc0>
 800b44a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b44e:	4b98      	ldr	r3, [pc, #608]	@ (800b6b0 <_printf_float+0x2c8>)
 800b450:	f04f 32ff 	mov.w	r2, #4294967295
 800b454:	f7f5 fb74 	bl	8000b40 <__aeabi_dcmple>
 800b458:	bb30      	cbnz	r0, 800b4a8 <_printf_float+0xc0>
 800b45a:	2200      	movs	r2, #0
 800b45c:	2300      	movs	r3, #0
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 fb63 	bl	8000b2c <__aeabi_dcmplt>
 800b466:	b110      	cbz	r0, 800b46e <_printf_float+0x86>
 800b468:	232d      	movs	r3, #45	@ 0x2d
 800b46a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b46e:	4a91      	ldr	r2, [pc, #580]	@ (800b6b4 <_printf_float+0x2cc>)
 800b470:	4b91      	ldr	r3, [pc, #580]	@ (800b6b8 <_printf_float+0x2d0>)
 800b472:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b476:	bf94      	ite	ls
 800b478:	4690      	movls	r8, r2
 800b47a:	4698      	movhi	r8, r3
 800b47c:	2303      	movs	r3, #3
 800b47e:	6123      	str	r3, [r4, #16]
 800b480:	f02b 0304 	bic.w	r3, fp, #4
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	f04f 0900 	mov.w	r9, #0
 800b48a:	9700      	str	r7, [sp, #0]
 800b48c:	4633      	mov	r3, r6
 800b48e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b490:	4621      	mov	r1, r4
 800b492:	4628      	mov	r0, r5
 800b494:	f000 f9d2 	bl	800b83c <_printf_common>
 800b498:	3001      	adds	r0, #1
 800b49a:	f040 808d 	bne.w	800b5b8 <_printf_float+0x1d0>
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	b00d      	add	sp, #52	@ 0x34
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	464b      	mov	r3, r9
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	f7f5 fb64 	bl	8000b7c <__aeabi_dcmpun>
 800b4b4:	b140      	cbz	r0, 800b4c8 <_printf_float+0xe0>
 800b4b6:	464b      	mov	r3, r9
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bfbc      	itt	lt
 800b4bc:	232d      	movlt	r3, #45	@ 0x2d
 800b4be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b4c2:	4a7e      	ldr	r2, [pc, #504]	@ (800b6bc <_printf_float+0x2d4>)
 800b4c4:	4b7e      	ldr	r3, [pc, #504]	@ (800b6c0 <_printf_float+0x2d8>)
 800b4c6:	e7d4      	b.n	800b472 <_printf_float+0x8a>
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b4ce:	9206      	str	r2, [sp, #24]
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	d13b      	bne.n	800b54c <_printf_float+0x164>
 800b4d4:	2306      	movs	r3, #6
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b4dc:	2300      	movs	r3, #0
 800b4de:	6022      	str	r2, [r4, #0]
 800b4e0:	9303      	str	r3, [sp, #12]
 800b4e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b4e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b4e8:	ab09      	add	r3, sp, #36	@ 0x24
 800b4ea:	9300      	str	r3, [sp, #0]
 800b4ec:	6861      	ldr	r1, [r4, #4]
 800b4ee:	ec49 8b10 	vmov	d0, r8, r9
 800b4f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f7ff fed6 	bl	800b2a8 <__cvt>
 800b4fc:	9b06      	ldr	r3, [sp, #24]
 800b4fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b500:	2b47      	cmp	r3, #71	@ 0x47
 800b502:	4680      	mov	r8, r0
 800b504:	d129      	bne.n	800b55a <_printf_float+0x172>
 800b506:	1cc8      	adds	r0, r1, #3
 800b508:	db02      	blt.n	800b510 <_printf_float+0x128>
 800b50a:	6863      	ldr	r3, [r4, #4]
 800b50c:	4299      	cmp	r1, r3
 800b50e:	dd41      	ble.n	800b594 <_printf_float+0x1ac>
 800b510:	f1aa 0a02 	sub.w	sl, sl, #2
 800b514:	fa5f fa8a 	uxtb.w	sl, sl
 800b518:	3901      	subs	r1, #1
 800b51a:	4652      	mov	r2, sl
 800b51c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b520:	9109      	str	r1, [sp, #36]	@ 0x24
 800b522:	f7ff ff26 	bl	800b372 <__exponent>
 800b526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b528:	1813      	adds	r3, r2, r0
 800b52a:	2a01      	cmp	r2, #1
 800b52c:	4681      	mov	r9, r0
 800b52e:	6123      	str	r3, [r4, #16]
 800b530:	dc02      	bgt.n	800b538 <_printf_float+0x150>
 800b532:	6822      	ldr	r2, [r4, #0]
 800b534:	07d2      	lsls	r2, r2, #31
 800b536:	d501      	bpl.n	800b53c <_printf_float+0x154>
 800b538:	3301      	adds	r3, #1
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0a2      	beq.n	800b48a <_printf_float+0xa2>
 800b544:	232d      	movs	r3, #45	@ 0x2d
 800b546:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b54a:	e79e      	b.n	800b48a <_printf_float+0xa2>
 800b54c:	9a06      	ldr	r2, [sp, #24]
 800b54e:	2a47      	cmp	r2, #71	@ 0x47
 800b550:	d1c2      	bne.n	800b4d8 <_printf_float+0xf0>
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1c0      	bne.n	800b4d8 <_printf_float+0xf0>
 800b556:	2301      	movs	r3, #1
 800b558:	e7bd      	b.n	800b4d6 <_printf_float+0xee>
 800b55a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b55e:	d9db      	bls.n	800b518 <_printf_float+0x130>
 800b560:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b564:	d118      	bne.n	800b598 <_printf_float+0x1b0>
 800b566:	2900      	cmp	r1, #0
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	dd0b      	ble.n	800b584 <_printf_float+0x19c>
 800b56c:	6121      	str	r1, [r4, #16]
 800b56e:	b913      	cbnz	r3, 800b576 <_printf_float+0x18e>
 800b570:	6822      	ldr	r2, [r4, #0]
 800b572:	07d0      	lsls	r0, r2, #31
 800b574:	d502      	bpl.n	800b57c <_printf_float+0x194>
 800b576:	3301      	adds	r3, #1
 800b578:	440b      	add	r3, r1
 800b57a:	6123      	str	r3, [r4, #16]
 800b57c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b57e:	f04f 0900 	mov.w	r9, #0
 800b582:	e7db      	b.n	800b53c <_printf_float+0x154>
 800b584:	b913      	cbnz	r3, 800b58c <_printf_float+0x1a4>
 800b586:	6822      	ldr	r2, [r4, #0]
 800b588:	07d2      	lsls	r2, r2, #31
 800b58a:	d501      	bpl.n	800b590 <_printf_float+0x1a8>
 800b58c:	3302      	adds	r3, #2
 800b58e:	e7f4      	b.n	800b57a <_printf_float+0x192>
 800b590:	2301      	movs	r3, #1
 800b592:	e7f2      	b.n	800b57a <_printf_float+0x192>
 800b594:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b59a:	4299      	cmp	r1, r3
 800b59c:	db05      	blt.n	800b5aa <_printf_float+0x1c2>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	6121      	str	r1, [r4, #16]
 800b5a2:	07d8      	lsls	r0, r3, #31
 800b5a4:	d5ea      	bpl.n	800b57c <_printf_float+0x194>
 800b5a6:	1c4b      	adds	r3, r1, #1
 800b5a8:	e7e7      	b.n	800b57a <_printf_float+0x192>
 800b5aa:	2900      	cmp	r1, #0
 800b5ac:	bfd4      	ite	le
 800b5ae:	f1c1 0202 	rsble	r2, r1, #2
 800b5b2:	2201      	movgt	r2, #1
 800b5b4:	4413      	add	r3, r2
 800b5b6:	e7e0      	b.n	800b57a <_printf_float+0x192>
 800b5b8:	6823      	ldr	r3, [r4, #0]
 800b5ba:	055a      	lsls	r2, r3, #21
 800b5bc:	d407      	bmi.n	800b5ce <_printf_float+0x1e6>
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	4642      	mov	r2, r8
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d12b      	bne.n	800b624 <_printf_float+0x23c>
 800b5cc:	e767      	b.n	800b49e <_printf_float+0xb6>
 800b5ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5d2:	f240 80dd 	bls.w	800b790 <_printf_float+0x3a8>
 800b5d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f7f5 fa9b 	bl	8000b18 <__aeabi_dcmpeq>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d033      	beq.n	800b64e <_printf_float+0x266>
 800b5e6:	4a37      	ldr	r2, [pc, #220]	@ (800b6c4 <_printf_float+0x2dc>)
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	4631      	mov	r1, r6
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	47b8      	blx	r7
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	f43f af54 	beq.w	800b49e <_printf_float+0xb6>
 800b5f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b5fa:	4543      	cmp	r3, r8
 800b5fc:	db02      	blt.n	800b604 <_printf_float+0x21c>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	07d8      	lsls	r0, r3, #31
 800b602:	d50f      	bpl.n	800b624 <_printf_float+0x23c>
 800b604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b608:	4631      	mov	r1, r6
 800b60a:	4628      	mov	r0, r5
 800b60c:	47b8      	blx	r7
 800b60e:	3001      	adds	r0, #1
 800b610:	f43f af45 	beq.w	800b49e <_printf_float+0xb6>
 800b614:	f04f 0900 	mov.w	r9, #0
 800b618:	f108 38ff 	add.w	r8, r8, #4294967295
 800b61c:	f104 0a1a 	add.w	sl, r4, #26
 800b620:	45c8      	cmp	r8, r9
 800b622:	dc09      	bgt.n	800b638 <_printf_float+0x250>
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	079b      	lsls	r3, r3, #30
 800b628:	f100 8103 	bmi.w	800b832 <_printf_float+0x44a>
 800b62c:	68e0      	ldr	r0, [r4, #12]
 800b62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b630:	4298      	cmp	r0, r3
 800b632:	bfb8      	it	lt
 800b634:	4618      	movlt	r0, r3
 800b636:	e734      	b.n	800b4a2 <_printf_float+0xba>
 800b638:	2301      	movs	r3, #1
 800b63a:	4652      	mov	r2, sl
 800b63c:	4631      	mov	r1, r6
 800b63e:	4628      	mov	r0, r5
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f af2b 	beq.w	800b49e <_printf_float+0xb6>
 800b648:	f109 0901 	add.w	r9, r9, #1
 800b64c:	e7e8      	b.n	800b620 <_printf_float+0x238>
 800b64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc39      	bgt.n	800b6c8 <_printf_float+0x2e0>
 800b654:	4a1b      	ldr	r2, [pc, #108]	@ (800b6c4 <_printf_float+0x2dc>)
 800b656:	2301      	movs	r3, #1
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b8      	blx	r7
 800b65e:	3001      	adds	r0, #1
 800b660:	f43f af1d 	beq.w	800b49e <_printf_float+0xb6>
 800b664:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b668:	ea59 0303 	orrs.w	r3, r9, r3
 800b66c:	d102      	bne.n	800b674 <_printf_float+0x28c>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	07d9      	lsls	r1, r3, #31
 800b672:	d5d7      	bpl.n	800b624 <_printf_float+0x23c>
 800b674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b678:	4631      	mov	r1, r6
 800b67a:	4628      	mov	r0, r5
 800b67c:	47b8      	blx	r7
 800b67e:	3001      	adds	r0, #1
 800b680:	f43f af0d 	beq.w	800b49e <_printf_float+0xb6>
 800b684:	f04f 0a00 	mov.w	sl, #0
 800b688:	f104 0b1a 	add.w	fp, r4, #26
 800b68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68e:	425b      	negs	r3, r3
 800b690:	4553      	cmp	r3, sl
 800b692:	dc01      	bgt.n	800b698 <_printf_float+0x2b0>
 800b694:	464b      	mov	r3, r9
 800b696:	e793      	b.n	800b5c0 <_printf_float+0x1d8>
 800b698:	2301      	movs	r3, #1
 800b69a:	465a      	mov	r2, fp
 800b69c:	4631      	mov	r1, r6
 800b69e:	4628      	mov	r0, r5
 800b6a0:	47b8      	blx	r7
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	f43f aefb 	beq.w	800b49e <_printf_float+0xb6>
 800b6a8:	f10a 0a01 	add.w	sl, sl, #1
 800b6ac:	e7ee      	b.n	800b68c <_printf_float+0x2a4>
 800b6ae:	bf00      	nop
 800b6b0:	7fefffff 	.word	0x7fefffff
 800b6b4:	0800e298 	.word	0x0800e298
 800b6b8:	0800e29c 	.word	0x0800e29c
 800b6bc:	0800e2a0 	.word	0x0800e2a0
 800b6c0:	0800e2a4 	.word	0x0800e2a4
 800b6c4:	0800e2a8 	.word	0x0800e2a8
 800b6c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b6ce:	4553      	cmp	r3, sl
 800b6d0:	bfa8      	it	ge
 800b6d2:	4653      	movge	r3, sl
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	4699      	mov	r9, r3
 800b6d8:	dc36      	bgt.n	800b748 <_printf_float+0x360>
 800b6da:	f04f 0b00 	mov.w	fp, #0
 800b6de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6e2:	f104 021a 	add.w	r2, r4, #26
 800b6e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b6e8:	9306      	str	r3, [sp, #24]
 800b6ea:	eba3 0309 	sub.w	r3, r3, r9
 800b6ee:	455b      	cmp	r3, fp
 800b6f0:	dc31      	bgt.n	800b756 <_printf_float+0x36e>
 800b6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6f4:	459a      	cmp	sl, r3
 800b6f6:	dc3a      	bgt.n	800b76e <_printf_float+0x386>
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	07da      	lsls	r2, r3, #31
 800b6fc:	d437      	bmi.n	800b76e <_printf_float+0x386>
 800b6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b700:	ebaa 0903 	sub.w	r9, sl, r3
 800b704:	9b06      	ldr	r3, [sp, #24]
 800b706:	ebaa 0303 	sub.w	r3, sl, r3
 800b70a:	4599      	cmp	r9, r3
 800b70c:	bfa8      	it	ge
 800b70e:	4699      	movge	r9, r3
 800b710:	f1b9 0f00 	cmp.w	r9, #0
 800b714:	dc33      	bgt.n	800b77e <_printf_float+0x396>
 800b716:	f04f 0800 	mov.w	r8, #0
 800b71a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b71e:	f104 0b1a 	add.w	fp, r4, #26
 800b722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b724:	ebaa 0303 	sub.w	r3, sl, r3
 800b728:	eba3 0309 	sub.w	r3, r3, r9
 800b72c:	4543      	cmp	r3, r8
 800b72e:	f77f af79 	ble.w	800b624 <_printf_float+0x23c>
 800b732:	2301      	movs	r3, #1
 800b734:	465a      	mov	r2, fp
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f aeae 	beq.w	800b49e <_printf_float+0xb6>
 800b742:	f108 0801 	add.w	r8, r8, #1
 800b746:	e7ec      	b.n	800b722 <_printf_float+0x33a>
 800b748:	4642      	mov	r2, r8
 800b74a:	4631      	mov	r1, r6
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b8      	blx	r7
 800b750:	3001      	adds	r0, #1
 800b752:	d1c2      	bne.n	800b6da <_printf_float+0x2f2>
 800b754:	e6a3      	b.n	800b49e <_printf_float+0xb6>
 800b756:	2301      	movs	r3, #1
 800b758:	4631      	mov	r1, r6
 800b75a:	4628      	mov	r0, r5
 800b75c:	9206      	str	r2, [sp, #24]
 800b75e:	47b8      	blx	r7
 800b760:	3001      	adds	r0, #1
 800b762:	f43f ae9c 	beq.w	800b49e <_printf_float+0xb6>
 800b766:	9a06      	ldr	r2, [sp, #24]
 800b768:	f10b 0b01 	add.w	fp, fp, #1
 800b76c:	e7bb      	b.n	800b6e6 <_printf_float+0x2fe>
 800b76e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b772:	4631      	mov	r1, r6
 800b774:	4628      	mov	r0, r5
 800b776:	47b8      	blx	r7
 800b778:	3001      	adds	r0, #1
 800b77a:	d1c0      	bne.n	800b6fe <_printf_float+0x316>
 800b77c:	e68f      	b.n	800b49e <_printf_float+0xb6>
 800b77e:	9a06      	ldr	r2, [sp, #24]
 800b780:	464b      	mov	r3, r9
 800b782:	4442      	add	r2, r8
 800b784:	4631      	mov	r1, r6
 800b786:	4628      	mov	r0, r5
 800b788:	47b8      	blx	r7
 800b78a:	3001      	adds	r0, #1
 800b78c:	d1c3      	bne.n	800b716 <_printf_float+0x32e>
 800b78e:	e686      	b.n	800b49e <_printf_float+0xb6>
 800b790:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b794:	f1ba 0f01 	cmp.w	sl, #1
 800b798:	dc01      	bgt.n	800b79e <_printf_float+0x3b6>
 800b79a:	07db      	lsls	r3, r3, #31
 800b79c:	d536      	bpl.n	800b80c <_printf_float+0x424>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	47b8      	blx	r7
 800b7a8:	3001      	adds	r0, #1
 800b7aa:	f43f ae78 	beq.w	800b49e <_printf_float+0xb6>
 800b7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b8      	blx	r7
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f43f ae70 	beq.w	800b49e <_printf_float+0xb6>
 800b7be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ca:	f7f5 f9a5 	bl	8000b18 <__aeabi_dcmpeq>
 800b7ce:	b9c0      	cbnz	r0, 800b802 <_printf_float+0x41a>
 800b7d0:	4653      	mov	r3, sl
 800b7d2:	f108 0201 	add.w	r2, r8, #1
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b8      	blx	r7
 800b7dc:	3001      	adds	r0, #1
 800b7de:	d10c      	bne.n	800b7fa <_printf_float+0x412>
 800b7e0:	e65d      	b.n	800b49e <_printf_float+0xb6>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	465a      	mov	r2, fp
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	f43f ae56 	beq.w	800b49e <_printf_float+0xb6>
 800b7f2:	f108 0801 	add.w	r8, r8, #1
 800b7f6:	45d0      	cmp	r8, sl
 800b7f8:	dbf3      	blt.n	800b7e2 <_printf_float+0x3fa>
 800b7fa:	464b      	mov	r3, r9
 800b7fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b800:	e6df      	b.n	800b5c2 <_printf_float+0x1da>
 800b802:	f04f 0800 	mov.w	r8, #0
 800b806:	f104 0b1a 	add.w	fp, r4, #26
 800b80a:	e7f4      	b.n	800b7f6 <_printf_float+0x40e>
 800b80c:	2301      	movs	r3, #1
 800b80e:	4642      	mov	r2, r8
 800b810:	e7e1      	b.n	800b7d6 <_printf_float+0x3ee>
 800b812:	2301      	movs	r3, #1
 800b814:	464a      	mov	r2, r9
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	47b8      	blx	r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	f43f ae3e 	beq.w	800b49e <_printf_float+0xb6>
 800b822:	f108 0801 	add.w	r8, r8, #1
 800b826:	68e3      	ldr	r3, [r4, #12]
 800b828:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b82a:	1a5b      	subs	r3, r3, r1
 800b82c:	4543      	cmp	r3, r8
 800b82e:	dcf0      	bgt.n	800b812 <_printf_float+0x42a>
 800b830:	e6fc      	b.n	800b62c <_printf_float+0x244>
 800b832:	f04f 0800 	mov.w	r8, #0
 800b836:	f104 0919 	add.w	r9, r4, #25
 800b83a:	e7f4      	b.n	800b826 <_printf_float+0x43e>

0800b83c <_printf_common>:
 800b83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b840:	4616      	mov	r6, r2
 800b842:	4698      	mov	r8, r3
 800b844:	688a      	ldr	r2, [r1, #8]
 800b846:	690b      	ldr	r3, [r1, #16]
 800b848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b84c:	4293      	cmp	r3, r2
 800b84e:	bfb8      	it	lt
 800b850:	4613      	movlt	r3, r2
 800b852:	6033      	str	r3, [r6, #0]
 800b854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b858:	4607      	mov	r7, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	b10a      	cbz	r2, 800b862 <_printf_common+0x26>
 800b85e:	3301      	adds	r3, #1
 800b860:	6033      	str	r3, [r6, #0]
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	0699      	lsls	r1, r3, #26
 800b866:	bf42      	ittt	mi
 800b868:	6833      	ldrmi	r3, [r6, #0]
 800b86a:	3302      	addmi	r3, #2
 800b86c:	6033      	strmi	r3, [r6, #0]
 800b86e:	6825      	ldr	r5, [r4, #0]
 800b870:	f015 0506 	ands.w	r5, r5, #6
 800b874:	d106      	bne.n	800b884 <_printf_common+0x48>
 800b876:	f104 0a19 	add.w	sl, r4, #25
 800b87a:	68e3      	ldr	r3, [r4, #12]
 800b87c:	6832      	ldr	r2, [r6, #0]
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	42ab      	cmp	r3, r5
 800b882:	dc26      	bgt.n	800b8d2 <_printf_common+0x96>
 800b884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b888:	6822      	ldr	r2, [r4, #0]
 800b88a:	3b00      	subs	r3, #0
 800b88c:	bf18      	it	ne
 800b88e:	2301      	movne	r3, #1
 800b890:	0692      	lsls	r2, r2, #26
 800b892:	d42b      	bmi.n	800b8ec <_printf_common+0xb0>
 800b894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b898:	4641      	mov	r1, r8
 800b89a:	4638      	mov	r0, r7
 800b89c:	47c8      	blx	r9
 800b89e:	3001      	adds	r0, #1
 800b8a0:	d01e      	beq.n	800b8e0 <_printf_common+0xa4>
 800b8a2:	6823      	ldr	r3, [r4, #0]
 800b8a4:	6922      	ldr	r2, [r4, #16]
 800b8a6:	f003 0306 	and.w	r3, r3, #6
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	bf02      	ittt	eq
 800b8ae:	68e5      	ldreq	r5, [r4, #12]
 800b8b0:	6833      	ldreq	r3, [r6, #0]
 800b8b2:	1aed      	subeq	r5, r5, r3
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	bf0c      	ite	eq
 800b8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8bc:	2500      	movne	r5, #0
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	bfc4      	itt	gt
 800b8c2:	1a9b      	subgt	r3, r3, r2
 800b8c4:	18ed      	addgt	r5, r5, r3
 800b8c6:	2600      	movs	r6, #0
 800b8c8:	341a      	adds	r4, #26
 800b8ca:	42b5      	cmp	r5, r6
 800b8cc:	d11a      	bne.n	800b904 <_printf_common+0xc8>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e008      	b.n	800b8e4 <_printf_common+0xa8>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	4638      	mov	r0, r7
 800b8da:	47c8      	blx	r9
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d103      	bne.n	800b8e8 <_printf_common+0xac>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	e7c6      	b.n	800b87a <_printf_common+0x3e>
 800b8ec:	18e1      	adds	r1, r4, r3
 800b8ee:	1c5a      	adds	r2, r3, #1
 800b8f0:	2030      	movs	r0, #48	@ 0x30
 800b8f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b8f6:	4422      	add	r2, r4
 800b8f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b8fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b900:	3302      	adds	r3, #2
 800b902:	e7c7      	b.n	800b894 <_printf_common+0x58>
 800b904:	2301      	movs	r3, #1
 800b906:	4622      	mov	r2, r4
 800b908:	4641      	mov	r1, r8
 800b90a:	4638      	mov	r0, r7
 800b90c:	47c8      	blx	r9
 800b90e:	3001      	adds	r0, #1
 800b910:	d0e6      	beq.n	800b8e0 <_printf_common+0xa4>
 800b912:	3601      	adds	r6, #1
 800b914:	e7d9      	b.n	800b8ca <_printf_common+0x8e>
	...

0800b918 <_printf_i>:
 800b918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b91c:	7e0f      	ldrb	r7, [r1, #24]
 800b91e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b920:	2f78      	cmp	r7, #120	@ 0x78
 800b922:	4691      	mov	r9, r2
 800b924:	4680      	mov	r8, r0
 800b926:	460c      	mov	r4, r1
 800b928:	469a      	mov	sl, r3
 800b92a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b92e:	d807      	bhi.n	800b940 <_printf_i+0x28>
 800b930:	2f62      	cmp	r7, #98	@ 0x62
 800b932:	d80a      	bhi.n	800b94a <_printf_i+0x32>
 800b934:	2f00      	cmp	r7, #0
 800b936:	f000 80d2 	beq.w	800bade <_printf_i+0x1c6>
 800b93a:	2f58      	cmp	r7, #88	@ 0x58
 800b93c:	f000 80b9 	beq.w	800bab2 <_printf_i+0x19a>
 800b940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b948:	e03a      	b.n	800b9c0 <_printf_i+0xa8>
 800b94a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b94e:	2b15      	cmp	r3, #21
 800b950:	d8f6      	bhi.n	800b940 <_printf_i+0x28>
 800b952:	a101      	add	r1, pc, #4	@ (adr r1, 800b958 <_printf_i+0x40>)
 800b954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b958:	0800b9b1 	.word	0x0800b9b1
 800b95c:	0800b9c5 	.word	0x0800b9c5
 800b960:	0800b941 	.word	0x0800b941
 800b964:	0800b941 	.word	0x0800b941
 800b968:	0800b941 	.word	0x0800b941
 800b96c:	0800b941 	.word	0x0800b941
 800b970:	0800b9c5 	.word	0x0800b9c5
 800b974:	0800b941 	.word	0x0800b941
 800b978:	0800b941 	.word	0x0800b941
 800b97c:	0800b941 	.word	0x0800b941
 800b980:	0800b941 	.word	0x0800b941
 800b984:	0800bac5 	.word	0x0800bac5
 800b988:	0800b9ef 	.word	0x0800b9ef
 800b98c:	0800ba7f 	.word	0x0800ba7f
 800b990:	0800b941 	.word	0x0800b941
 800b994:	0800b941 	.word	0x0800b941
 800b998:	0800bae7 	.word	0x0800bae7
 800b99c:	0800b941 	.word	0x0800b941
 800b9a0:	0800b9ef 	.word	0x0800b9ef
 800b9a4:	0800b941 	.word	0x0800b941
 800b9a8:	0800b941 	.word	0x0800b941
 800b9ac:	0800ba87 	.word	0x0800ba87
 800b9b0:	6833      	ldr	r3, [r6, #0]
 800b9b2:	1d1a      	adds	r2, r3, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6032      	str	r2, [r6, #0]
 800b9b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e09d      	b.n	800bb00 <_printf_i+0x1e8>
 800b9c4:	6833      	ldr	r3, [r6, #0]
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	1d19      	adds	r1, r3, #4
 800b9ca:	6031      	str	r1, [r6, #0]
 800b9cc:	0606      	lsls	r6, r0, #24
 800b9ce:	d501      	bpl.n	800b9d4 <_printf_i+0xbc>
 800b9d0:	681d      	ldr	r5, [r3, #0]
 800b9d2:	e003      	b.n	800b9dc <_printf_i+0xc4>
 800b9d4:	0645      	lsls	r5, r0, #25
 800b9d6:	d5fb      	bpl.n	800b9d0 <_printf_i+0xb8>
 800b9d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b9dc:	2d00      	cmp	r5, #0
 800b9de:	da03      	bge.n	800b9e8 <_printf_i+0xd0>
 800b9e0:	232d      	movs	r3, #45	@ 0x2d
 800b9e2:	426d      	negs	r5, r5
 800b9e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9e8:	4859      	ldr	r0, [pc, #356]	@ (800bb50 <_printf_i+0x238>)
 800b9ea:	230a      	movs	r3, #10
 800b9ec:	e011      	b.n	800ba12 <_printf_i+0xfa>
 800b9ee:	6821      	ldr	r1, [r4, #0]
 800b9f0:	6833      	ldr	r3, [r6, #0]
 800b9f2:	0608      	lsls	r0, r1, #24
 800b9f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b9f8:	d402      	bmi.n	800ba00 <_printf_i+0xe8>
 800b9fa:	0649      	lsls	r1, r1, #25
 800b9fc:	bf48      	it	mi
 800b9fe:	b2ad      	uxthmi	r5, r5
 800ba00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba02:	4853      	ldr	r0, [pc, #332]	@ (800bb50 <_printf_i+0x238>)
 800ba04:	6033      	str	r3, [r6, #0]
 800ba06:	bf14      	ite	ne
 800ba08:	230a      	movne	r3, #10
 800ba0a:	2308      	moveq	r3, #8
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba12:	6866      	ldr	r6, [r4, #4]
 800ba14:	60a6      	str	r6, [r4, #8]
 800ba16:	2e00      	cmp	r6, #0
 800ba18:	bfa2      	ittt	ge
 800ba1a:	6821      	ldrge	r1, [r4, #0]
 800ba1c:	f021 0104 	bicge.w	r1, r1, #4
 800ba20:	6021      	strge	r1, [r4, #0]
 800ba22:	b90d      	cbnz	r5, 800ba28 <_printf_i+0x110>
 800ba24:	2e00      	cmp	r6, #0
 800ba26:	d04b      	beq.n	800bac0 <_printf_i+0x1a8>
 800ba28:	4616      	mov	r6, r2
 800ba2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ba32:	5dc7      	ldrb	r7, [r0, r7]
 800ba34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba38:	462f      	mov	r7, r5
 800ba3a:	42bb      	cmp	r3, r7
 800ba3c:	460d      	mov	r5, r1
 800ba3e:	d9f4      	bls.n	800ba2a <_printf_i+0x112>
 800ba40:	2b08      	cmp	r3, #8
 800ba42:	d10b      	bne.n	800ba5c <_printf_i+0x144>
 800ba44:	6823      	ldr	r3, [r4, #0]
 800ba46:	07df      	lsls	r7, r3, #31
 800ba48:	d508      	bpl.n	800ba5c <_printf_i+0x144>
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	6861      	ldr	r1, [r4, #4]
 800ba4e:	4299      	cmp	r1, r3
 800ba50:	bfde      	ittt	le
 800ba52:	2330      	movle	r3, #48	@ 0x30
 800ba54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ba58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ba5c:	1b92      	subs	r2, r2, r6
 800ba5e:	6122      	str	r2, [r4, #16]
 800ba60:	f8cd a000 	str.w	sl, [sp]
 800ba64:	464b      	mov	r3, r9
 800ba66:	aa03      	add	r2, sp, #12
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	f7ff fee6 	bl	800b83c <_printf_common>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d14a      	bne.n	800bb0a <_printf_i+0x1f2>
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	b004      	add	sp, #16
 800ba7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	f043 0320 	orr.w	r3, r3, #32
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	4833      	ldr	r0, [pc, #204]	@ (800bb54 <_printf_i+0x23c>)
 800ba88:	2778      	movs	r7, #120	@ 0x78
 800ba8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	6831      	ldr	r1, [r6, #0]
 800ba92:	061f      	lsls	r7, r3, #24
 800ba94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba98:	d402      	bmi.n	800baa0 <_printf_i+0x188>
 800ba9a:	065f      	lsls	r7, r3, #25
 800ba9c:	bf48      	it	mi
 800ba9e:	b2ad      	uxthmi	r5, r5
 800baa0:	6031      	str	r1, [r6, #0]
 800baa2:	07d9      	lsls	r1, r3, #31
 800baa4:	bf44      	itt	mi
 800baa6:	f043 0320 	orrmi.w	r3, r3, #32
 800baaa:	6023      	strmi	r3, [r4, #0]
 800baac:	b11d      	cbz	r5, 800bab6 <_printf_i+0x19e>
 800baae:	2310      	movs	r3, #16
 800bab0:	e7ac      	b.n	800ba0c <_printf_i+0xf4>
 800bab2:	4827      	ldr	r0, [pc, #156]	@ (800bb50 <_printf_i+0x238>)
 800bab4:	e7e9      	b.n	800ba8a <_printf_i+0x172>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	f023 0320 	bic.w	r3, r3, #32
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	e7f6      	b.n	800baae <_printf_i+0x196>
 800bac0:	4616      	mov	r6, r2
 800bac2:	e7bd      	b.n	800ba40 <_printf_i+0x128>
 800bac4:	6833      	ldr	r3, [r6, #0]
 800bac6:	6825      	ldr	r5, [r4, #0]
 800bac8:	6961      	ldr	r1, [r4, #20]
 800baca:	1d18      	adds	r0, r3, #4
 800bacc:	6030      	str	r0, [r6, #0]
 800bace:	062e      	lsls	r6, r5, #24
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	d501      	bpl.n	800bad8 <_printf_i+0x1c0>
 800bad4:	6019      	str	r1, [r3, #0]
 800bad6:	e002      	b.n	800bade <_printf_i+0x1c6>
 800bad8:	0668      	lsls	r0, r5, #25
 800bada:	d5fb      	bpl.n	800bad4 <_printf_i+0x1bc>
 800badc:	8019      	strh	r1, [r3, #0]
 800bade:	2300      	movs	r3, #0
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	4616      	mov	r6, r2
 800bae4:	e7bc      	b.n	800ba60 <_printf_i+0x148>
 800bae6:	6833      	ldr	r3, [r6, #0]
 800bae8:	1d1a      	adds	r2, r3, #4
 800baea:	6032      	str	r2, [r6, #0]
 800baec:	681e      	ldr	r6, [r3, #0]
 800baee:	6862      	ldr	r2, [r4, #4]
 800baf0:	2100      	movs	r1, #0
 800baf2:	4630      	mov	r0, r6
 800baf4:	f7f4 fb94 	bl	8000220 <memchr>
 800baf8:	b108      	cbz	r0, 800bafe <_printf_i+0x1e6>
 800bafa:	1b80      	subs	r0, r0, r6
 800bafc:	6060      	str	r0, [r4, #4]
 800bafe:	6863      	ldr	r3, [r4, #4]
 800bb00:	6123      	str	r3, [r4, #16]
 800bb02:	2300      	movs	r3, #0
 800bb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb08:	e7aa      	b.n	800ba60 <_printf_i+0x148>
 800bb0a:	6923      	ldr	r3, [r4, #16]
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	47d0      	blx	sl
 800bb14:	3001      	adds	r0, #1
 800bb16:	d0ad      	beq.n	800ba74 <_printf_i+0x15c>
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	079b      	lsls	r3, r3, #30
 800bb1c:	d413      	bmi.n	800bb46 <_printf_i+0x22e>
 800bb1e:	68e0      	ldr	r0, [r4, #12]
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	4298      	cmp	r0, r3
 800bb24:	bfb8      	it	lt
 800bb26:	4618      	movlt	r0, r3
 800bb28:	e7a6      	b.n	800ba78 <_printf_i+0x160>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	4632      	mov	r2, r6
 800bb2e:	4649      	mov	r1, r9
 800bb30:	4640      	mov	r0, r8
 800bb32:	47d0      	blx	sl
 800bb34:	3001      	adds	r0, #1
 800bb36:	d09d      	beq.n	800ba74 <_printf_i+0x15c>
 800bb38:	3501      	adds	r5, #1
 800bb3a:	68e3      	ldr	r3, [r4, #12]
 800bb3c:	9903      	ldr	r1, [sp, #12]
 800bb3e:	1a5b      	subs	r3, r3, r1
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	dcf2      	bgt.n	800bb2a <_printf_i+0x212>
 800bb44:	e7eb      	b.n	800bb1e <_printf_i+0x206>
 800bb46:	2500      	movs	r5, #0
 800bb48:	f104 0619 	add.w	r6, r4, #25
 800bb4c:	e7f5      	b.n	800bb3a <_printf_i+0x222>
 800bb4e:	bf00      	nop
 800bb50:	0800e2aa 	.word	0x0800e2aa
 800bb54:	0800e2bb 	.word	0x0800e2bb

0800bb58 <std>:
 800bb58:	2300      	movs	r3, #0
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb66:	6083      	str	r3, [r0, #8]
 800bb68:	8181      	strh	r1, [r0, #12]
 800bb6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb6c:	81c2      	strh	r2, [r0, #14]
 800bb6e:	6183      	str	r3, [r0, #24]
 800bb70:	4619      	mov	r1, r3
 800bb72:	2208      	movs	r2, #8
 800bb74:	305c      	adds	r0, #92	@ 0x5c
 800bb76:	f000 f914 	bl	800bda2 <memset>
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb0 <std+0x58>)
 800bb7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb4 <std+0x5c>)
 800bb80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb82:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb8 <std+0x60>)
 800bb84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb86:	4b0d      	ldr	r3, [pc, #52]	@ (800bbbc <std+0x64>)
 800bb88:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbc0 <std+0x68>)
 800bb8c:	6224      	str	r4, [r4, #32]
 800bb8e:	429c      	cmp	r4, r3
 800bb90:	d006      	beq.n	800bba0 <std+0x48>
 800bb92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb96:	4294      	cmp	r4, r2
 800bb98:	d002      	beq.n	800bba0 <std+0x48>
 800bb9a:	33d0      	adds	r3, #208	@ 0xd0
 800bb9c:	429c      	cmp	r4, r3
 800bb9e:	d105      	bne.n	800bbac <std+0x54>
 800bba0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bba8:	f000 b99a 	b.w	800bee0 <__retarget_lock_init_recursive>
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800bd1d 	.word	0x0800bd1d
 800bbb4:	0800bd3f 	.word	0x0800bd3f
 800bbb8:	0800bd77 	.word	0x0800bd77
 800bbbc:	0800bd9b 	.word	0x0800bd9b
 800bbc0:	20004b5c 	.word	0x20004b5c

0800bbc4 <stdio_exit_handler>:
 800bbc4:	4a02      	ldr	r2, [pc, #8]	@ (800bbd0 <stdio_exit_handler+0xc>)
 800bbc6:	4903      	ldr	r1, [pc, #12]	@ (800bbd4 <stdio_exit_handler+0x10>)
 800bbc8:	4803      	ldr	r0, [pc, #12]	@ (800bbd8 <stdio_exit_handler+0x14>)
 800bbca:	f000 b869 	b.w	800bca0 <_fwalk_sglue>
 800bbce:	bf00      	nop
 800bbd0:	20000184 	.word	0x20000184
 800bbd4:	0800d86d 	.word	0x0800d86d
 800bbd8:	20000194 	.word	0x20000194

0800bbdc <cleanup_stdio>:
 800bbdc:	6841      	ldr	r1, [r0, #4]
 800bbde:	4b0c      	ldr	r3, [pc, #48]	@ (800bc10 <cleanup_stdio+0x34>)
 800bbe0:	4299      	cmp	r1, r3
 800bbe2:	b510      	push	{r4, lr}
 800bbe4:	4604      	mov	r4, r0
 800bbe6:	d001      	beq.n	800bbec <cleanup_stdio+0x10>
 800bbe8:	f001 fe40 	bl	800d86c <_fflush_r>
 800bbec:	68a1      	ldr	r1, [r4, #8]
 800bbee:	4b09      	ldr	r3, [pc, #36]	@ (800bc14 <cleanup_stdio+0x38>)
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	d002      	beq.n	800bbfa <cleanup_stdio+0x1e>
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f001 fe39 	bl	800d86c <_fflush_r>
 800bbfa:	68e1      	ldr	r1, [r4, #12]
 800bbfc:	4b06      	ldr	r3, [pc, #24]	@ (800bc18 <cleanup_stdio+0x3c>)
 800bbfe:	4299      	cmp	r1, r3
 800bc00:	d004      	beq.n	800bc0c <cleanup_stdio+0x30>
 800bc02:	4620      	mov	r0, r4
 800bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc08:	f001 be30 	b.w	800d86c <_fflush_r>
 800bc0c:	bd10      	pop	{r4, pc}
 800bc0e:	bf00      	nop
 800bc10:	20004b5c 	.word	0x20004b5c
 800bc14:	20004bc4 	.word	0x20004bc4
 800bc18:	20004c2c 	.word	0x20004c2c

0800bc1c <global_stdio_init.part.0>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc4c <global_stdio_init.part.0+0x30>)
 800bc20:	4c0b      	ldr	r4, [pc, #44]	@ (800bc50 <global_stdio_init.part.0+0x34>)
 800bc22:	4a0c      	ldr	r2, [pc, #48]	@ (800bc54 <global_stdio_init.part.0+0x38>)
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	4620      	mov	r0, r4
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2104      	movs	r1, #4
 800bc2c:	f7ff ff94 	bl	800bb58 <std>
 800bc30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bc34:	2201      	movs	r2, #1
 800bc36:	2109      	movs	r1, #9
 800bc38:	f7ff ff8e 	bl	800bb58 <std>
 800bc3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bc40:	2202      	movs	r2, #2
 800bc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc46:	2112      	movs	r1, #18
 800bc48:	f7ff bf86 	b.w	800bb58 <std>
 800bc4c:	20004c94 	.word	0x20004c94
 800bc50:	20004b5c 	.word	0x20004b5c
 800bc54:	0800bbc5 	.word	0x0800bbc5

0800bc58 <__sfp_lock_acquire>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__sfp_lock_acquire+0x8>)
 800bc5a:	f000 b942 	b.w	800bee2 <__retarget_lock_acquire_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20004c9d 	.word	0x20004c9d

0800bc64 <__sfp_lock_release>:
 800bc64:	4801      	ldr	r0, [pc, #4]	@ (800bc6c <__sfp_lock_release+0x8>)
 800bc66:	f000 b93d 	b.w	800bee4 <__retarget_lock_release_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20004c9d 	.word	0x20004c9d

0800bc70 <__sinit>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	4604      	mov	r4, r0
 800bc74:	f7ff fff0 	bl	800bc58 <__sfp_lock_acquire>
 800bc78:	6a23      	ldr	r3, [r4, #32]
 800bc7a:	b11b      	cbz	r3, 800bc84 <__sinit+0x14>
 800bc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc80:	f7ff bff0 	b.w	800bc64 <__sfp_lock_release>
 800bc84:	4b04      	ldr	r3, [pc, #16]	@ (800bc98 <__sinit+0x28>)
 800bc86:	6223      	str	r3, [r4, #32]
 800bc88:	4b04      	ldr	r3, [pc, #16]	@ (800bc9c <__sinit+0x2c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1f5      	bne.n	800bc7c <__sinit+0xc>
 800bc90:	f7ff ffc4 	bl	800bc1c <global_stdio_init.part.0>
 800bc94:	e7f2      	b.n	800bc7c <__sinit+0xc>
 800bc96:	bf00      	nop
 800bc98:	0800bbdd 	.word	0x0800bbdd
 800bc9c:	20004c94 	.word	0x20004c94

0800bca0 <_fwalk_sglue>:
 800bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bca4:	4607      	mov	r7, r0
 800bca6:	4688      	mov	r8, r1
 800bca8:	4614      	mov	r4, r2
 800bcaa:	2600      	movs	r6, #0
 800bcac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcb0:	f1b9 0901 	subs.w	r9, r9, #1
 800bcb4:	d505      	bpl.n	800bcc2 <_fwalk_sglue+0x22>
 800bcb6:	6824      	ldr	r4, [r4, #0]
 800bcb8:	2c00      	cmp	r4, #0
 800bcba:	d1f7      	bne.n	800bcac <_fwalk_sglue+0xc>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d907      	bls.n	800bcd8 <_fwalk_sglue+0x38>
 800bcc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bccc:	3301      	adds	r3, #1
 800bcce:	d003      	beq.n	800bcd8 <_fwalk_sglue+0x38>
 800bcd0:	4629      	mov	r1, r5
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	47c0      	blx	r8
 800bcd6:	4306      	orrs	r6, r0
 800bcd8:	3568      	adds	r5, #104	@ 0x68
 800bcda:	e7e9      	b.n	800bcb0 <_fwalk_sglue+0x10>

0800bcdc <siprintf>:
 800bcdc:	b40e      	push	{r1, r2, r3}
 800bcde:	b500      	push	{lr}
 800bce0:	b09c      	sub	sp, #112	@ 0x70
 800bce2:	ab1d      	add	r3, sp, #116	@ 0x74
 800bce4:	9002      	str	r0, [sp, #8]
 800bce6:	9006      	str	r0, [sp, #24]
 800bce8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bcec:	4809      	ldr	r0, [pc, #36]	@ (800bd14 <siprintf+0x38>)
 800bcee:	9107      	str	r1, [sp, #28]
 800bcf0:	9104      	str	r1, [sp, #16]
 800bcf2:	4909      	ldr	r1, [pc, #36]	@ (800bd18 <siprintf+0x3c>)
 800bcf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf8:	9105      	str	r1, [sp, #20]
 800bcfa:	6800      	ldr	r0, [r0, #0]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	a902      	add	r1, sp, #8
 800bd00:	f001 fc34 	bl	800d56c <_svfiprintf_r>
 800bd04:	9b02      	ldr	r3, [sp, #8]
 800bd06:	2200      	movs	r2, #0
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	b01c      	add	sp, #112	@ 0x70
 800bd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd10:	b003      	add	sp, #12
 800bd12:	4770      	bx	lr
 800bd14:	20000190 	.word	0x20000190
 800bd18:	ffff0208 	.word	0xffff0208

0800bd1c <__sread>:
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	460c      	mov	r4, r1
 800bd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd24:	f000 f88e 	bl	800be44 <_read_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	bfab      	itete	ge
 800bd2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd30:	181b      	addge	r3, r3, r0
 800bd32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd36:	bfac      	ite	ge
 800bd38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd3a:	81a3      	strhlt	r3, [r4, #12]
 800bd3c:	bd10      	pop	{r4, pc}

0800bd3e <__swrite>:
 800bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd42:	461f      	mov	r7, r3
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	05db      	lsls	r3, r3, #23
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	d505      	bpl.n	800bd5c <__swrite+0x1e>
 800bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd54:	2302      	movs	r3, #2
 800bd56:	2200      	movs	r2, #0
 800bd58:	f000 f862 	bl	800be20 <_lseek_r>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	4632      	mov	r2, r6
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	f000 b879 	b.w	800be68 <_write_r>

0800bd76 <__sseek>:
 800bd76:	b510      	push	{r4, lr}
 800bd78:	460c      	mov	r4, r1
 800bd7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7e:	f000 f84f 	bl	800be20 <_lseek_r>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	bf15      	itete	ne
 800bd88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd92:	81a3      	strheq	r3, [r4, #12]
 800bd94:	bf18      	it	ne
 800bd96:	81a3      	strhne	r3, [r4, #12]
 800bd98:	bd10      	pop	{r4, pc}

0800bd9a <__sclose>:
 800bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9e:	f000 b82f 	b.w	800be00 <_close_r>

0800bda2 <memset>:
 800bda2:	4402      	add	r2, r0
 800bda4:	4603      	mov	r3, r0
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d100      	bne.n	800bdac <memset+0xa>
 800bdaa:	4770      	bx	lr
 800bdac:	f803 1b01 	strb.w	r1, [r3], #1
 800bdb0:	e7f9      	b.n	800bda6 <memset+0x4>

0800bdb2 <strchr>:
 800bdb2:	b2c9      	uxtb	r1, r1
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdbc:	b112      	cbz	r2, 800bdc4 <strchr+0x12>
 800bdbe:	428a      	cmp	r2, r1
 800bdc0:	d1f9      	bne.n	800bdb6 <strchr+0x4>
 800bdc2:	4770      	bx	lr
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	bf18      	it	ne
 800bdc8:	2000      	movne	r0, #0
 800bdca:	4770      	bx	lr

0800bdcc <strstr>:
 800bdcc:	780a      	ldrb	r2, [r1, #0]
 800bdce:	b570      	push	{r4, r5, r6, lr}
 800bdd0:	b96a      	cbnz	r2, 800bdee <strstr+0x22>
 800bdd2:	bd70      	pop	{r4, r5, r6, pc}
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d109      	bne.n	800bdec <strstr+0x20>
 800bdd8:	460c      	mov	r4, r1
 800bdda:	4605      	mov	r5, r0
 800bddc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0f6      	beq.n	800bdd2 <strstr+0x6>
 800bde4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bde8:	429e      	cmp	r6, r3
 800bdea:	d0f7      	beq.n	800bddc <strstr+0x10>
 800bdec:	3001      	adds	r0, #1
 800bdee:	7803      	ldrb	r3, [r0, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1ef      	bne.n	800bdd4 <strstr+0x8>
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	e7ec      	b.n	800bdd2 <strstr+0x6>

0800bdf8 <_localeconv_r>:
 800bdf8:	4800      	ldr	r0, [pc, #0]	@ (800bdfc <_localeconv_r+0x4>)
 800bdfa:	4770      	bx	lr
 800bdfc:	200002d0 	.word	0x200002d0

0800be00 <_close_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4d06      	ldr	r5, [pc, #24]	@ (800be1c <_close_r+0x1c>)
 800be04:	2300      	movs	r3, #0
 800be06:	4604      	mov	r4, r0
 800be08:	4608      	mov	r0, r1
 800be0a:	602b      	str	r3, [r5, #0]
 800be0c:	f7f5 fffa 	bl	8001e04 <_close>
 800be10:	1c43      	adds	r3, r0, #1
 800be12:	d102      	bne.n	800be1a <_close_r+0x1a>
 800be14:	682b      	ldr	r3, [r5, #0]
 800be16:	b103      	cbz	r3, 800be1a <_close_r+0x1a>
 800be18:	6023      	str	r3, [r4, #0]
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	20004c98 	.word	0x20004c98

0800be20 <_lseek_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d07      	ldr	r5, [pc, #28]	@ (800be40 <_lseek_r+0x20>)
 800be24:	4604      	mov	r4, r0
 800be26:	4608      	mov	r0, r1
 800be28:	4611      	mov	r1, r2
 800be2a:	2200      	movs	r2, #0
 800be2c:	602a      	str	r2, [r5, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	f7f6 f80f 	bl	8001e52 <_lseek>
 800be34:	1c43      	adds	r3, r0, #1
 800be36:	d102      	bne.n	800be3e <_lseek_r+0x1e>
 800be38:	682b      	ldr	r3, [r5, #0]
 800be3a:	b103      	cbz	r3, 800be3e <_lseek_r+0x1e>
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	20004c98 	.word	0x20004c98

0800be44 <_read_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	4d07      	ldr	r5, [pc, #28]	@ (800be64 <_read_r+0x20>)
 800be48:	4604      	mov	r4, r0
 800be4a:	4608      	mov	r0, r1
 800be4c:	4611      	mov	r1, r2
 800be4e:	2200      	movs	r2, #0
 800be50:	602a      	str	r2, [r5, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	f7f5 ff9d 	bl	8001d92 <_read>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_read_r+0x1e>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_read_r+0x1e>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	20004c98 	.word	0x20004c98

0800be68 <_write_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d07      	ldr	r5, [pc, #28]	@ (800be88 <_write_r+0x20>)
 800be6c:	4604      	mov	r4, r0
 800be6e:	4608      	mov	r0, r1
 800be70:	4611      	mov	r1, r2
 800be72:	2200      	movs	r2, #0
 800be74:	602a      	str	r2, [r5, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f7f5 ffa8 	bl	8001dcc <_write>
 800be7c:	1c43      	adds	r3, r0, #1
 800be7e:	d102      	bne.n	800be86 <_write_r+0x1e>
 800be80:	682b      	ldr	r3, [r5, #0]
 800be82:	b103      	cbz	r3, 800be86 <_write_r+0x1e>
 800be84:	6023      	str	r3, [r4, #0]
 800be86:	bd38      	pop	{r3, r4, r5, pc}
 800be88:	20004c98 	.word	0x20004c98

0800be8c <__errno>:
 800be8c:	4b01      	ldr	r3, [pc, #4]	@ (800be94 <__errno+0x8>)
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20000190 	.word	0x20000190

0800be98 <__libc_init_array>:
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	4d0d      	ldr	r5, [pc, #52]	@ (800bed0 <__libc_init_array+0x38>)
 800be9c:	4c0d      	ldr	r4, [pc, #52]	@ (800bed4 <__libc_init_array+0x3c>)
 800be9e:	1b64      	subs	r4, r4, r5
 800bea0:	10a4      	asrs	r4, r4, #2
 800bea2:	2600      	movs	r6, #0
 800bea4:	42a6      	cmp	r6, r4
 800bea6:	d109      	bne.n	800bebc <__libc_init_array+0x24>
 800bea8:	4d0b      	ldr	r5, [pc, #44]	@ (800bed8 <__libc_init_array+0x40>)
 800beaa:	4c0c      	ldr	r4, [pc, #48]	@ (800bedc <__libc_init_array+0x44>)
 800beac:	f002 f86e 	bl	800df8c <_init>
 800beb0:	1b64      	subs	r4, r4, r5
 800beb2:	10a4      	asrs	r4, r4, #2
 800beb4:	2600      	movs	r6, #0
 800beb6:	42a6      	cmp	r6, r4
 800beb8:	d105      	bne.n	800bec6 <__libc_init_array+0x2e>
 800beba:	bd70      	pop	{r4, r5, r6, pc}
 800bebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec0:	4798      	blx	r3
 800bec2:	3601      	adds	r6, #1
 800bec4:	e7ee      	b.n	800bea4 <__libc_init_array+0xc>
 800bec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beca:	4798      	blx	r3
 800becc:	3601      	adds	r6, #1
 800bece:	e7f2      	b.n	800beb6 <__libc_init_array+0x1e>
 800bed0:	0800e610 	.word	0x0800e610
 800bed4:	0800e610 	.word	0x0800e610
 800bed8:	0800e610 	.word	0x0800e610
 800bedc:	0800e614 	.word	0x0800e614

0800bee0 <__retarget_lock_init_recursive>:
 800bee0:	4770      	bx	lr

0800bee2 <__retarget_lock_acquire_recursive>:
 800bee2:	4770      	bx	lr

0800bee4 <__retarget_lock_release_recursive>:
 800bee4:	4770      	bx	lr

0800bee6 <strcpy>:
 800bee6:	4603      	mov	r3, r0
 800bee8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beec:	f803 2b01 	strb.w	r2, [r3], #1
 800bef0:	2a00      	cmp	r2, #0
 800bef2:	d1f9      	bne.n	800bee8 <strcpy+0x2>
 800bef4:	4770      	bx	lr

0800bef6 <memcpy>:
 800bef6:	440a      	add	r2, r1
 800bef8:	4291      	cmp	r1, r2
 800befa:	f100 33ff 	add.w	r3, r0, #4294967295
 800befe:	d100      	bne.n	800bf02 <memcpy+0xc>
 800bf00:	4770      	bx	lr
 800bf02:	b510      	push	{r4, lr}
 800bf04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf0c:	4291      	cmp	r1, r2
 800bf0e:	d1f9      	bne.n	800bf04 <memcpy+0xe>
 800bf10:	bd10      	pop	{r4, pc}

0800bf12 <quorem>:
 800bf12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf16:	6903      	ldr	r3, [r0, #16]
 800bf18:	690c      	ldr	r4, [r1, #16]
 800bf1a:	42a3      	cmp	r3, r4
 800bf1c:	4607      	mov	r7, r0
 800bf1e:	db7e      	blt.n	800c01e <quorem+0x10c>
 800bf20:	3c01      	subs	r4, #1
 800bf22:	f101 0814 	add.w	r8, r1, #20
 800bf26:	00a3      	lsls	r3, r4, #2
 800bf28:	f100 0514 	add.w	r5, r0, #20
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf32:	9301      	str	r3, [sp, #4]
 800bf34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf44:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf48:	d32e      	bcc.n	800bfa8 <quorem+0x96>
 800bf4a:	f04f 0a00 	mov.w	sl, #0
 800bf4e:	46c4      	mov	ip, r8
 800bf50:	46ae      	mov	lr, r5
 800bf52:	46d3      	mov	fp, sl
 800bf54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf58:	b298      	uxth	r0, r3
 800bf5a:	fb06 a000 	mla	r0, r6, r0, sl
 800bf5e:	0c02      	lsrs	r2, r0, #16
 800bf60:	0c1b      	lsrs	r3, r3, #16
 800bf62:	fb06 2303 	mla	r3, r6, r3, r2
 800bf66:	f8de 2000 	ldr.w	r2, [lr]
 800bf6a:	b280      	uxth	r0, r0
 800bf6c:	b292      	uxth	r2, r2
 800bf6e:	1a12      	subs	r2, r2, r0
 800bf70:	445a      	add	r2, fp
 800bf72:	f8de 0000 	ldr.w	r0, [lr]
 800bf76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bf80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bf84:	b292      	uxth	r2, r2
 800bf86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bf8a:	45e1      	cmp	r9, ip
 800bf8c:	f84e 2b04 	str.w	r2, [lr], #4
 800bf90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bf94:	d2de      	bcs.n	800bf54 <quorem+0x42>
 800bf96:	9b00      	ldr	r3, [sp, #0]
 800bf98:	58eb      	ldr	r3, [r5, r3]
 800bf9a:	b92b      	cbnz	r3, 800bfa8 <quorem+0x96>
 800bf9c:	9b01      	ldr	r3, [sp, #4]
 800bf9e:	3b04      	subs	r3, #4
 800bfa0:	429d      	cmp	r5, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	d32f      	bcc.n	800c006 <quorem+0xf4>
 800bfa6:	613c      	str	r4, [r7, #16]
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f001 f97b 	bl	800d2a4 <__mcmp>
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	db25      	blt.n	800bffe <quorem+0xec>
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfba:	f8d1 c000 	ldr.w	ip, [r1]
 800bfbe:	fa1f fe82 	uxth.w	lr, r2
 800bfc2:	fa1f f38c 	uxth.w	r3, ip
 800bfc6:	eba3 030e 	sub.w	r3, r3, lr
 800bfca:	4403      	add	r3, r0
 800bfcc:	0c12      	lsrs	r2, r2, #16
 800bfce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bfd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfdc:	45c1      	cmp	r9, r8
 800bfde:	f841 3b04 	str.w	r3, [r1], #4
 800bfe2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bfe6:	d2e6      	bcs.n	800bfb6 <quorem+0xa4>
 800bfe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bff0:	b922      	cbnz	r2, 800bffc <quorem+0xea>
 800bff2:	3b04      	subs	r3, #4
 800bff4:	429d      	cmp	r5, r3
 800bff6:	461a      	mov	r2, r3
 800bff8:	d30b      	bcc.n	800c012 <quorem+0x100>
 800bffa:	613c      	str	r4, [r7, #16]
 800bffc:	3601      	adds	r6, #1
 800bffe:	4630      	mov	r0, r6
 800c000:	b003      	add	sp, #12
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	6812      	ldr	r2, [r2, #0]
 800c008:	3b04      	subs	r3, #4
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d1cb      	bne.n	800bfa6 <quorem+0x94>
 800c00e:	3c01      	subs	r4, #1
 800c010:	e7c6      	b.n	800bfa0 <quorem+0x8e>
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	3b04      	subs	r3, #4
 800c016:	2a00      	cmp	r2, #0
 800c018:	d1ef      	bne.n	800bffa <quorem+0xe8>
 800c01a:	3c01      	subs	r4, #1
 800c01c:	e7ea      	b.n	800bff4 <quorem+0xe2>
 800c01e:	2000      	movs	r0, #0
 800c020:	e7ee      	b.n	800c000 <quorem+0xee>
 800c022:	0000      	movs	r0, r0
 800c024:	0000      	movs	r0, r0
	...

0800c028 <_dtoa_r>:
 800c028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02c:	69c7      	ldr	r7, [r0, #28]
 800c02e:	b099      	sub	sp, #100	@ 0x64
 800c030:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c034:	ec55 4b10 	vmov	r4, r5, d0
 800c038:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c03a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c03c:	4683      	mov	fp, r0
 800c03e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c040:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c042:	b97f      	cbnz	r7, 800c064 <_dtoa_r+0x3c>
 800c044:	2010      	movs	r0, #16
 800c046:	f000 fdfd 	bl	800cc44 <malloc>
 800c04a:	4602      	mov	r2, r0
 800c04c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c050:	b920      	cbnz	r0, 800c05c <_dtoa_r+0x34>
 800c052:	4ba7      	ldr	r3, [pc, #668]	@ (800c2f0 <_dtoa_r+0x2c8>)
 800c054:	21ef      	movs	r1, #239	@ 0xef
 800c056:	48a7      	ldr	r0, [pc, #668]	@ (800c2f4 <_dtoa_r+0x2cc>)
 800c058:	f001 fc5a 	bl	800d910 <__assert_func>
 800c05c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c060:	6007      	str	r7, [r0, #0]
 800c062:	60c7      	str	r7, [r0, #12]
 800c064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c068:	6819      	ldr	r1, [r3, #0]
 800c06a:	b159      	cbz	r1, 800c084 <_dtoa_r+0x5c>
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	604a      	str	r2, [r1, #4]
 800c070:	2301      	movs	r3, #1
 800c072:	4093      	lsls	r3, r2
 800c074:	608b      	str	r3, [r1, #8]
 800c076:	4658      	mov	r0, fp
 800c078:	f000 feda 	bl	800ce30 <_Bfree>
 800c07c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c080:	2200      	movs	r2, #0
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	1e2b      	subs	r3, r5, #0
 800c086:	bfb9      	ittee	lt
 800c088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c08c:	9303      	strlt	r3, [sp, #12]
 800c08e:	2300      	movge	r3, #0
 800c090:	6033      	strge	r3, [r6, #0]
 800c092:	9f03      	ldr	r7, [sp, #12]
 800c094:	4b98      	ldr	r3, [pc, #608]	@ (800c2f8 <_dtoa_r+0x2d0>)
 800c096:	bfbc      	itt	lt
 800c098:	2201      	movlt	r2, #1
 800c09a:	6032      	strlt	r2, [r6, #0]
 800c09c:	43bb      	bics	r3, r7
 800c09e:	d112      	bne.n	800c0c6 <_dtoa_r+0x9e>
 800c0a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0a6:	6013      	str	r3, [r2, #0]
 800c0a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0ac:	4323      	orrs	r3, r4
 800c0ae:	f000 854d 	beq.w	800cb4c <_dtoa_r+0xb24>
 800c0b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c30c <_dtoa_r+0x2e4>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 854f 	beq.w	800cb5c <_dtoa_r+0xb34>
 800c0be:	f10a 0303 	add.w	r3, sl, #3
 800c0c2:	f000 bd49 	b.w	800cb58 <_dtoa_r+0xb30>
 800c0c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	ec51 0b17 	vmov	r0, r1, d7
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c0d6:	f7f4 fd1f 	bl	8000b18 <__aeabi_dcmpeq>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	b158      	cbz	r0, 800c0f6 <_dtoa_r+0xce>
 800c0de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0e6:	b113      	cbz	r3, 800c0ee <_dtoa_r+0xc6>
 800c0e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c0ea:	4b84      	ldr	r3, [pc, #528]	@ (800c2fc <_dtoa_r+0x2d4>)
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c310 <_dtoa_r+0x2e8>
 800c0f2:	f000 bd33 	b.w	800cb5c <_dtoa_r+0xb34>
 800c0f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c0fa:	aa16      	add	r2, sp, #88	@ 0x58
 800c0fc:	a917      	add	r1, sp, #92	@ 0x5c
 800c0fe:	4658      	mov	r0, fp
 800c100:	f001 f980 	bl	800d404 <__d2b>
 800c104:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c108:	4681      	mov	r9, r0
 800c10a:	2e00      	cmp	r6, #0
 800c10c:	d077      	beq.n	800c1fe <_dtoa_r+0x1d6>
 800c10e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c110:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c11c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c120:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c124:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c128:	4619      	mov	r1, r3
 800c12a:	2200      	movs	r2, #0
 800c12c:	4b74      	ldr	r3, [pc, #464]	@ (800c300 <_dtoa_r+0x2d8>)
 800c12e:	f7f4 f8d3 	bl	80002d8 <__aeabi_dsub>
 800c132:	a369      	add	r3, pc, #420	@ (adr r3, 800c2d8 <_dtoa_r+0x2b0>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f7f4 fa86 	bl	8000648 <__aeabi_dmul>
 800c13c:	a368      	add	r3, pc, #416	@ (adr r3, 800c2e0 <_dtoa_r+0x2b8>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f7f4 f8cb 	bl	80002dc <__adddf3>
 800c146:	4604      	mov	r4, r0
 800c148:	4630      	mov	r0, r6
 800c14a:	460d      	mov	r5, r1
 800c14c:	f7f4 fa12 	bl	8000574 <__aeabi_i2d>
 800c150:	a365      	add	r3, pc, #404	@ (adr r3, 800c2e8 <_dtoa_r+0x2c0>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 fa77 	bl	8000648 <__aeabi_dmul>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4620      	mov	r0, r4
 800c160:	4629      	mov	r1, r5
 800c162:	f7f4 f8bb 	bl	80002dc <__adddf3>
 800c166:	4604      	mov	r4, r0
 800c168:	460d      	mov	r5, r1
 800c16a:	f7f4 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 800c16e:	2200      	movs	r2, #0
 800c170:	4607      	mov	r7, r0
 800c172:	2300      	movs	r3, #0
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 fcd8 	bl	8000b2c <__aeabi_dcmplt>
 800c17c:	b140      	cbz	r0, 800c190 <_dtoa_r+0x168>
 800c17e:	4638      	mov	r0, r7
 800c180:	f7f4 f9f8 	bl	8000574 <__aeabi_i2d>
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f4 fcc6 	bl	8000b18 <__aeabi_dcmpeq>
 800c18c:	b900      	cbnz	r0, 800c190 <_dtoa_r+0x168>
 800c18e:	3f01      	subs	r7, #1
 800c190:	2f16      	cmp	r7, #22
 800c192:	d851      	bhi.n	800c238 <_dtoa_r+0x210>
 800c194:	4b5b      	ldr	r3, [pc, #364]	@ (800c304 <_dtoa_r+0x2dc>)
 800c196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1a2:	f7f4 fcc3 	bl	8000b2c <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d048      	beq.n	800c23c <_dtoa_r+0x214>
 800c1aa:	3f01      	subs	r7, #1
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1b0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1b2:	1b9b      	subs	r3, r3, r6
 800c1b4:	1e5a      	subs	r2, r3, #1
 800c1b6:	bf44      	itt	mi
 800c1b8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1bc:	2300      	movmi	r3, #0
 800c1be:	9208      	str	r2, [sp, #32]
 800c1c0:	bf54      	ite	pl
 800c1c2:	f04f 0800 	movpl.w	r8, #0
 800c1c6:	9308      	strmi	r3, [sp, #32]
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	db39      	blt.n	800c240 <_dtoa_r+0x218>
 800c1cc:	9b08      	ldr	r3, [sp, #32]
 800c1ce:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c1d0:	443b      	add	r3, r7
 800c1d2:	9308      	str	r3, [sp, #32]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1da:	2b09      	cmp	r3, #9
 800c1dc:	d864      	bhi.n	800c2a8 <_dtoa_r+0x280>
 800c1de:	2b05      	cmp	r3, #5
 800c1e0:	bfc4      	itt	gt
 800c1e2:	3b04      	subgt	r3, #4
 800c1e4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e8:	f1a3 0302 	sub.w	r3, r3, #2
 800c1ec:	bfcc      	ite	gt
 800c1ee:	2400      	movgt	r4, #0
 800c1f0:	2401      	movle	r4, #1
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d863      	bhi.n	800c2be <_dtoa_r+0x296>
 800c1f6:	e8df f003 	tbb	[pc, r3]
 800c1fa:	372a      	.short	0x372a
 800c1fc:	5535      	.short	0x5535
 800c1fe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c202:	441e      	add	r6, r3
 800c204:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c208:	2b20      	cmp	r3, #32
 800c20a:	bfc1      	itttt	gt
 800c20c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c210:	409f      	lslgt	r7, r3
 800c212:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c216:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c21a:	bfd6      	itet	le
 800c21c:	f1c3 0320 	rsble	r3, r3, #32
 800c220:	ea47 0003 	orrgt.w	r0, r7, r3
 800c224:	fa04 f003 	lslle.w	r0, r4, r3
 800c228:	f7f4 f994 	bl	8000554 <__aeabi_ui2d>
 800c22c:	2201      	movs	r2, #1
 800c22e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c232:	3e01      	subs	r6, #1
 800c234:	9214      	str	r2, [sp, #80]	@ 0x50
 800c236:	e777      	b.n	800c128 <_dtoa_r+0x100>
 800c238:	2301      	movs	r3, #1
 800c23a:	e7b8      	b.n	800c1ae <_dtoa_r+0x186>
 800c23c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c23e:	e7b7      	b.n	800c1b0 <_dtoa_r+0x188>
 800c240:	427b      	negs	r3, r7
 800c242:	930a      	str	r3, [sp, #40]	@ 0x28
 800c244:	2300      	movs	r3, #0
 800c246:	eba8 0807 	sub.w	r8, r8, r7
 800c24a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c24c:	e7c4      	b.n	800c1d8 <_dtoa_r+0x1b0>
 800c24e:	2300      	movs	r3, #0
 800c250:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c254:	2b00      	cmp	r3, #0
 800c256:	dc35      	bgt.n	800c2c4 <_dtoa_r+0x29c>
 800c258:	2301      	movs	r3, #1
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	9307      	str	r3, [sp, #28]
 800c25e:	461a      	mov	r2, r3
 800c260:	920e      	str	r2, [sp, #56]	@ 0x38
 800c262:	e00b      	b.n	800c27c <_dtoa_r+0x254>
 800c264:	2301      	movs	r3, #1
 800c266:	e7f3      	b.n	800c250 <_dtoa_r+0x228>
 800c268:	2300      	movs	r3, #0
 800c26a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c26c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c26e:	18fb      	adds	r3, r7, r3
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	2b01      	cmp	r3, #1
 800c276:	9307      	str	r3, [sp, #28]
 800c278:	bfb8      	it	lt
 800c27a:	2301      	movlt	r3, #1
 800c27c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c280:	2100      	movs	r1, #0
 800c282:	2204      	movs	r2, #4
 800c284:	f102 0514 	add.w	r5, r2, #20
 800c288:	429d      	cmp	r5, r3
 800c28a:	d91f      	bls.n	800c2cc <_dtoa_r+0x2a4>
 800c28c:	6041      	str	r1, [r0, #4]
 800c28e:	4658      	mov	r0, fp
 800c290:	f000 fd8e 	bl	800cdb0 <_Balloc>
 800c294:	4682      	mov	sl, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	d13c      	bne.n	800c314 <_dtoa_r+0x2ec>
 800c29a:	4b1b      	ldr	r3, [pc, #108]	@ (800c308 <_dtoa_r+0x2e0>)
 800c29c:	4602      	mov	r2, r0
 800c29e:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2a2:	e6d8      	b.n	800c056 <_dtoa_r+0x2e>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e7e0      	b.n	800c26a <_dtoa_r+0x242>
 800c2a8:	2401      	movs	r4, #1
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ae:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	9307      	str	r3, [sp, #28]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2312      	movs	r3, #18
 800c2bc:	e7d0      	b.n	800c260 <_dtoa_r+0x238>
 800c2be:	2301      	movs	r3, #1
 800c2c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2c2:	e7f5      	b.n	800c2b0 <_dtoa_r+0x288>
 800c2c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	9307      	str	r3, [sp, #28]
 800c2ca:	e7d7      	b.n	800c27c <_dtoa_r+0x254>
 800c2cc:	3101      	adds	r1, #1
 800c2ce:	0052      	lsls	r2, r2, #1
 800c2d0:	e7d8      	b.n	800c284 <_dtoa_r+0x25c>
 800c2d2:	bf00      	nop
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	636f4361 	.word	0x636f4361
 800c2dc:	3fd287a7 	.word	0x3fd287a7
 800c2e0:	8b60c8b3 	.word	0x8b60c8b3
 800c2e4:	3fc68a28 	.word	0x3fc68a28
 800c2e8:	509f79fb 	.word	0x509f79fb
 800c2ec:	3fd34413 	.word	0x3fd34413
 800c2f0:	0800e2d9 	.word	0x0800e2d9
 800c2f4:	0800e2f0 	.word	0x0800e2f0
 800c2f8:	7ff00000 	.word	0x7ff00000
 800c2fc:	0800e2a9 	.word	0x0800e2a9
 800c300:	3ff80000 	.word	0x3ff80000
 800c304:	0800e3e8 	.word	0x0800e3e8
 800c308:	0800e348 	.word	0x0800e348
 800c30c:	0800e2d5 	.word	0x0800e2d5
 800c310:	0800e2a8 	.word	0x0800e2a8
 800c314:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c318:	6018      	str	r0, [r3, #0]
 800c31a:	9b07      	ldr	r3, [sp, #28]
 800c31c:	2b0e      	cmp	r3, #14
 800c31e:	f200 80a4 	bhi.w	800c46a <_dtoa_r+0x442>
 800c322:	2c00      	cmp	r4, #0
 800c324:	f000 80a1 	beq.w	800c46a <_dtoa_r+0x442>
 800c328:	2f00      	cmp	r7, #0
 800c32a:	dd33      	ble.n	800c394 <_dtoa_r+0x36c>
 800c32c:	4bad      	ldr	r3, [pc, #692]	@ (800c5e4 <_dtoa_r+0x5bc>)
 800c32e:	f007 020f 	and.w	r2, r7, #15
 800c332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c336:	ed93 7b00 	vldr	d7, [r3]
 800c33a:	05f8      	lsls	r0, r7, #23
 800c33c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c340:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c344:	d516      	bpl.n	800c374 <_dtoa_r+0x34c>
 800c346:	4ba8      	ldr	r3, [pc, #672]	@ (800c5e8 <_dtoa_r+0x5c0>)
 800c348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c34c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c350:	f7f4 faa4 	bl	800089c <__aeabi_ddiv>
 800c354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c358:	f004 040f 	and.w	r4, r4, #15
 800c35c:	2603      	movs	r6, #3
 800c35e:	4da2      	ldr	r5, [pc, #648]	@ (800c5e8 <_dtoa_r+0x5c0>)
 800c360:	b954      	cbnz	r4, 800c378 <_dtoa_r+0x350>
 800c362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c36a:	f7f4 fa97 	bl	800089c <__aeabi_ddiv>
 800c36e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c372:	e028      	b.n	800c3c6 <_dtoa_r+0x39e>
 800c374:	2602      	movs	r6, #2
 800c376:	e7f2      	b.n	800c35e <_dtoa_r+0x336>
 800c378:	07e1      	lsls	r1, r4, #31
 800c37a:	d508      	bpl.n	800c38e <_dtoa_r+0x366>
 800c37c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c380:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c384:	f7f4 f960 	bl	8000648 <__aeabi_dmul>
 800c388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c38c:	3601      	adds	r6, #1
 800c38e:	1064      	asrs	r4, r4, #1
 800c390:	3508      	adds	r5, #8
 800c392:	e7e5      	b.n	800c360 <_dtoa_r+0x338>
 800c394:	f000 80d2 	beq.w	800c53c <_dtoa_r+0x514>
 800c398:	427c      	negs	r4, r7
 800c39a:	4b92      	ldr	r3, [pc, #584]	@ (800c5e4 <_dtoa_r+0x5bc>)
 800c39c:	4d92      	ldr	r5, [pc, #584]	@ (800c5e8 <_dtoa_r+0x5c0>)
 800c39e:	f004 020f 	and.w	r2, r4, #15
 800c3a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ae:	f7f4 f94b 	bl	8000648 <__aeabi_dmul>
 800c3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b6:	1124      	asrs	r4, r4, #4
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	2602      	movs	r6, #2
 800c3bc:	2c00      	cmp	r4, #0
 800c3be:	f040 80b2 	bne.w	800c526 <_dtoa_r+0x4fe>
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1d3      	bne.n	800c36e <_dtoa_r+0x346>
 800c3c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c3c8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80b7 	beq.w	800c540 <_dtoa_r+0x518>
 800c3d2:	4b86      	ldr	r3, [pc, #536]	@ (800c5ec <_dtoa_r+0x5c4>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	f7f4 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	f000 80ae 	beq.w	800c540 <_dtoa_r+0x518>
 800c3e4:	9b07      	ldr	r3, [sp, #28]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	f000 80aa 	beq.w	800c540 <_dtoa_r+0x518>
 800c3ec:	9b00      	ldr	r3, [sp, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dd37      	ble.n	800c462 <_dtoa_r+0x43a>
 800c3f2:	1e7b      	subs	r3, r7, #1
 800c3f4:	9304      	str	r3, [sp, #16]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	4b7d      	ldr	r3, [pc, #500]	@ (800c5f0 <_dtoa_r+0x5c8>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7f4 f923 	bl	8000648 <__aeabi_dmul>
 800c402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c406:	9c00      	ldr	r4, [sp, #0]
 800c408:	3601      	adds	r6, #1
 800c40a:	4630      	mov	r0, r6
 800c40c:	f7f4 f8b2 	bl	8000574 <__aeabi_i2d>
 800c410:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c414:	f7f4 f918 	bl	8000648 <__aeabi_dmul>
 800c418:	4b76      	ldr	r3, [pc, #472]	@ (800c5f4 <_dtoa_r+0x5cc>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	f7f3 ff5e 	bl	80002dc <__adddf3>
 800c420:	4605      	mov	r5, r0
 800c422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c426:	2c00      	cmp	r4, #0
 800c428:	f040 808d 	bne.w	800c546 <_dtoa_r+0x51e>
 800c42c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c430:	4b71      	ldr	r3, [pc, #452]	@ (800c5f8 <_dtoa_r+0x5d0>)
 800c432:	2200      	movs	r2, #0
 800c434:	f7f3 ff50 	bl	80002d8 <__aeabi_dsub>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c440:	462a      	mov	r2, r5
 800c442:	4633      	mov	r3, r6
 800c444:	f7f4 fb90 	bl	8000b68 <__aeabi_dcmpgt>
 800c448:	2800      	cmp	r0, #0
 800c44a:	f040 828b 	bne.w	800c964 <_dtoa_r+0x93c>
 800c44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c452:	462a      	mov	r2, r5
 800c454:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c458:	f7f4 fb68 	bl	8000b2c <__aeabi_dcmplt>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f040 8128 	bne.w	800c6b2 <_dtoa_r+0x68a>
 800c462:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c466:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c46a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f2c0 815a 	blt.w	800c726 <_dtoa_r+0x6fe>
 800c472:	2f0e      	cmp	r7, #14
 800c474:	f300 8157 	bgt.w	800c726 <_dtoa_r+0x6fe>
 800c478:	4b5a      	ldr	r3, [pc, #360]	@ (800c5e4 <_dtoa_r+0x5bc>)
 800c47a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c47e:	ed93 7b00 	vldr	d7, [r3]
 800c482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c484:	2b00      	cmp	r3, #0
 800c486:	ed8d 7b00 	vstr	d7, [sp]
 800c48a:	da03      	bge.n	800c494 <_dtoa_r+0x46c>
 800c48c:	9b07      	ldr	r3, [sp, #28]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f340 8101 	ble.w	800c696 <_dtoa_r+0x66e>
 800c494:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c498:	4656      	mov	r6, sl
 800c49a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	f7f4 f9fb 	bl	800089c <__aeabi_ddiv>
 800c4a6:	f7f4 fb7f 	bl	8000ba8 <__aeabi_d2iz>
 800c4aa:	4680      	mov	r8, r0
 800c4ac:	f7f4 f862 	bl	8000574 <__aeabi_i2d>
 800c4b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4b4:	f7f4 f8c8 	bl	8000648 <__aeabi_dmul>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	4629      	mov	r1, r5
 800c4c0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c4c4:	f7f3 ff08 	bl	80002d8 <__aeabi_dsub>
 800c4c8:	f806 4b01 	strb.w	r4, [r6], #1
 800c4cc:	9d07      	ldr	r5, [sp, #28]
 800c4ce:	eba6 040a 	sub.w	r4, r6, sl
 800c4d2:	42a5      	cmp	r5, r4
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	f040 8117 	bne.w	800c70a <_dtoa_r+0x6e2>
 800c4dc:	f7f3 fefe 	bl	80002dc <__adddf3>
 800c4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	f7f4 fb3e 	bl	8000b68 <__aeabi_dcmpgt>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	f040 80f9 	bne.w	800c6e4 <_dtoa_r+0x6bc>
 800c4f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	4629      	mov	r1, r5
 800c4fa:	f7f4 fb0d 	bl	8000b18 <__aeabi_dcmpeq>
 800c4fe:	b118      	cbz	r0, 800c508 <_dtoa_r+0x4e0>
 800c500:	f018 0f01 	tst.w	r8, #1
 800c504:	f040 80ee 	bne.w	800c6e4 <_dtoa_r+0x6bc>
 800c508:	4649      	mov	r1, r9
 800c50a:	4658      	mov	r0, fp
 800c50c:	f000 fc90 	bl	800ce30 <_Bfree>
 800c510:	2300      	movs	r3, #0
 800c512:	7033      	strb	r3, [r6, #0]
 800c514:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c516:	3701      	adds	r7, #1
 800c518:	601f      	str	r7, [r3, #0]
 800c51a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 831d 	beq.w	800cb5c <_dtoa_r+0xb34>
 800c522:	601e      	str	r6, [r3, #0]
 800c524:	e31a      	b.n	800cb5c <_dtoa_r+0xb34>
 800c526:	07e2      	lsls	r2, r4, #31
 800c528:	d505      	bpl.n	800c536 <_dtoa_r+0x50e>
 800c52a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c52e:	f7f4 f88b 	bl	8000648 <__aeabi_dmul>
 800c532:	3601      	adds	r6, #1
 800c534:	2301      	movs	r3, #1
 800c536:	1064      	asrs	r4, r4, #1
 800c538:	3508      	adds	r5, #8
 800c53a:	e73f      	b.n	800c3bc <_dtoa_r+0x394>
 800c53c:	2602      	movs	r6, #2
 800c53e:	e742      	b.n	800c3c6 <_dtoa_r+0x39e>
 800c540:	9c07      	ldr	r4, [sp, #28]
 800c542:	9704      	str	r7, [sp, #16]
 800c544:	e761      	b.n	800c40a <_dtoa_r+0x3e2>
 800c546:	4b27      	ldr	r3, [pc, #156]	@ (800c5e4 <_dtoa_r+0x5bc>)
 800c548:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c54a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c54e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c552:	4454      	add	r4, sl
 800c554:	2900      	cmp	r1, #0
 800c556:	d053      	beq.n	800c600 <_dtoa_r+0x5d8>
 800c558:	4928      	ldr	r1, [pc, #160]	@ (800c5fc <_dtoa_r+0x5d4>)
 800c55a:	2000      	movs	r0, #0
 800c55c:	f7f4 f99e 	bl	800089c <__aeabi_ddiv>
 800c560:	4633      	mov	r3, r6
 800c562:	462a      	mov	r2, r5
 800c564:	f7f3 feb8 	bl	80002d8 <__aeabi_dsub>
 800c568:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c56c:	4656      	mov	r6, sl
 800c56e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c572:	f7f4 fb19 	bl	8000ba8 <__aeabi_d2iz>
 800c576:	4605      	mov	r5, r0
 800c578:	f7f3 fffc 	bl	8000574 <__aeabi_i2d>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c584:	f7f3 fea8 	bl	80002d8 <__aeabi_dsub>
 800c588:	3530      	adds	r5, #48	@ 0x30
 800c58a:	4602      	mov	r2, r0
 800c58c:	460b      	mov	r3, r1
 800c58e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c592:	f806 5b01 	strb.w	r5, [r6], #1
 800c596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c59a:	f7f4 fac7 	bl	8000b2c <__aeabi_dcmplt>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d171      	bne.n	800c686 <_dtoa_r+0x65e>
 800c5a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5a6:	4911      	ldr	r1, [pc, #68]	@ (800c5ec <_dtoa_r+0x5c4>)
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	f7f3 fe95 	bl	80002d8 <__aeabi_dsub>
 800c5ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5b2:	f7f4 fabb 	bl	8000b2c <__aeabi_dcmplt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f040 8095 	bne.w	800c6e6 <_dtoa_r+0x6be>
 800c5bc:	42a6      	cmp	r6, r4
 800c5be:	f43f af50 	beq.w	800c462 <_dtoa_r+0x43a>
 800c5c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c5f0 <_dtoa_r+0x5c8>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f7f4 f83d 	bl	8000648 <__aeabi_dmul>
 800c5ce:	4b08      	ldr	r3, [pc, #32]	@ (800c5f0 <_dtoa_r+0x5c8>)
 800c5d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5da:	f7f4 f835 	bl	8000648 <__aeabi_dmul>
 800c5de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5e2:	e7c4      	b.n	800c56e <_dtoa_r+0x546>
 800c5e4:	0800e3e8 	.word	0x0800e3e8
 800c5e8:	0800e3c0 	.word	0x0800e3c0
 800c5ec:	3ff00000 	.word	0x3ff00000
 800c5f0:	40240000 	.word	0x40240000
 800c5f4:	401c0000 	.word	0x401c0000
 800c5f8:	40140000 	.word	0x40140000
 800c5fc:	3fe00000 	.word	0x3fe00000
 800c600:	4631      	mov	r1, r6
 800c602:	4628      	mov	r0, r5
 800c604:	f7f4 f820 	bl	8000648 <__aeabi_dmul>
 800c608:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c60c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c60e:	4656      	mov	r6, sl
 800c610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c614:	f7f4 fac8 	bl	8000ba8 <__aeabi_d2iz>
 800c618:	4605      	mov	r5, r0
 800c61a:	f7f3 ffab 	bl	8000574 <__aeabi_i2d>
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c626:	f7f3 fe57 	bl	80002d8 <__aeabi_dsub>
 800c62a:	3530      	adds	r5, #48	@ 0x30
 800c62c:	f806 5b01 	strb.w	r5, [r6], #1
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	42a6      	cmp	r6, r4
 800c636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c63a:	f04f 0200 	mov.w	r2, #0
 800c63e:	d124      	bne.n	800c68a <_dtoa_r+0x662>
 800c640:	4bac      	ldr	r3, [pc, #688]	@ (800c8f4 <_dtoa_r+0x8cc>)
 800c642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c646:	f7f3 fe49 	bl	80002dc <__adddf3>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	f7f4 fa89 	bl	8000b68 <__aeabi_dcmpgt>
 800c656:	2800      	cmp	r0, #0
 800c658:	d145      	bne.n	800c6e6 <_dtoa_r+0x6be>
 800c65a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c65e:	49a5      	ldr	r1, [pc, #660]	@ (800c8f4 <_dtoa_r+0x8cc>)
 800c660:	2000      	movs	r0, #0
 800c662:	f7f3 fe39 	bl	80002d8 <__aeabi_dsub>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c66e:	f7f4 fa5d 	bl	8000b2c <__aeabi_dcmplt>
 800c672:	2800      	cmp	r0, #0
 800c674:	f43f aef5 	beq.w	800c462 <_dtoa_r+0x43a>
 800c678:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c67a:	1e73      	subs	r3, r6, #1
 800c67c:	9315      	str	r3, [sp, #84]	@ 0x54
 800c67e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c682:	2b30      	cmp	r3, #48	@ 0x30
 800c684:	d0f8      	beq.n	800c678 <_dtoa_r+0x650>
 800c686:	9f04      	ldr	r7, [sp, #16]
 800c688:	e73e      	b.n	800c508 <_dtoa_r+0x4e0>
 800c68a:	4b9b      	ldr	r3, [pc, #620]	@ (800c8f8 <_dtoa_r+0x8d0>)
 800c68c:	f7f3 ffdc 	bl	8000648 <__aeabi_dmul>
 800c690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c694:	e7bc      	b.n	800c610 <_dtoa_r+0x5e8>
 800c696:	d10c      	bne.n	800c6b2 <_dtoa_r+0x68a>
 800c698:	4b98      	ldr	r3, [pc, #608]	@ (800c8fc <_dtoa_r+0x8d4>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6a0:	f7f3 ffd2 	bl	8000648 <__aeabi_dmul>
 800c6a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6a8:	f7f4 fa54 	bl	8000b54 <__aeabi_dcmpge>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f000 8157 	beq.w	800c960 <_dtoa_r+0x938>
 800c6b2:	2400      	movs	r4, #0
 800c6b4:	4625      	mov	r5, r4
 800c6b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6b8:	43db      	mvns	r3, r3
 800c6ba:	9304      	str	r3, [sp, #16]
 800c6bc:	4656      	mov	r6, sl
 800c6be:	2700      	movs	r7, #0
 800c6c0:	4621      	mov	r1, r4
 800c6c2:	4658      	mov	r0, fp
 800c6c4:	f000 fbb4 	bl	800ce30 <_Bfree>
 800c6c8:	2d00      	cmp	r5, #0
 800c6ca:	d0dc      	beq.n	800c686 <_dtoa_r+0x65e>
 800c6cc:	b12f      	cbz	r7, 800c6da <_dtoa_r+0x6b2>
 800c6ce:	42af      	cmp	r7, r5
 800c6d0:	d003      	beq.n	800c6da <_dtoa_r+0x6b2>
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f000 fbab 	bl	800ce30 <_Bfree>
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4658      	mov	r0, fp
 800c6de:	f000 fba7 	bl	800ce30 <_Bfree>
 800c6e2:	e7d0      	b.n	800c686 <_dtoa_r+0x65e>
 800c6e4:	9704      	str	r7, [sp, #16]
 800c6e6:	4633      	mov	r3, r6
 800c6e8:	461e      	mov	r6, r3
 800c6ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6ee:	2a39      	cmp	r2, #57	@ 0x39
 800c6f0:	d107      	bne.n	800c702 <_dtoa_r+0x6da>
 800c6f2:	459a      	cmp	sl, r3
 800c6f4:	d1f8      	bne.n	800c6e8 <_dtoa_r+0x6c0>
 800c6f6:	9a04      	ldr	r2, [sp, #16]
 800c6f8:	3201      	adds	r2, #1
 800c6fa:	9204      	str	r2, [sp, #16]
 800c6fc:	2230      	movs	r2, #48	@ 0x30
 800c6fe:	f88a 2000 	strb.w	r2, [sl]
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	3201      	adds	r2, #1
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	e7bd      	b.n	800c686 <_dtoa_r+0x65e>
 800c70a:	4b7b      	ldr	r3, [pc, #492]	@ (800c8f8 <_dtoa_r+0x8d0>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	f7f3 ff9b 	bl	8000648 <__aeabi_dmul>
 800c712:	2200      	movs	r2, #0
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	460d      	mov	r5, r1
 800c71a:	f7f4 f9fd 	bl	8000b18 <__aeabi_dcmpeq>
 800c71e:	2800      	cmp	r0, #0
 800c720:	f43f aebb 	beq.w	800c49a <_dtoa_r+0x472>
 800c724:	e6f0      	b.n	800c508 <_dtoa_r+0x4e0>
 800c726:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c728:	2a00      	cmp	r2, #0
 800c72a:	f000 80db 	beq.w	800c8e4 <_dtoa_r+0x8bc>
 800c72e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c730:	2a01      	cmp	r2, #1
 800c732:	f300 80bf 	bgt.w	800c8b4 <_dtoa_r+0x88c>
 800c736:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c738:	2a00      	cmp	r2, #0
 800c73a:	f000 80b7 	beq.w	800c8ac <_dtoa_r+0x884>
 800c73e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c742:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c744:	4646      	mov	r6, r8
 800c746:	9a08      	ldr	r2, [sp, #32]
 800c748:	2101      	movs	r1, #1
 800c74a:	441a      	add	r2, r3
 800c74c:	4658      	mov	r0, fp
 800c74e:	4498      	add	r8, r3
 800c750:	9208      	str	r2, [sp, #32]
 800c752:	f000 fc21 	bl	800cf98 <__i2b>
 800c756:	4605      	mov	r5, r0
 800c758:	b15e      	cbz	r6, 800c772 <_dtoa_r+0x74a>
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	dd08      	ble.n	800c772 <_dtoa_r+0x74a>
 800c760:	42b3      	cmp	r3, r6
 800c762:	9a08      	ldr	r2, [sp, #32]
 800c764:	bfa8      	it	ge
 800c766:	4633      	movge	r3, r6
 800c768:	eba8 0803 	sub.w	r8, r8, r3
 800c76c:	1af6      	subs	r6, r6, r3
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	9308      	str	r3, [sp, #32]
 800c772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c774:	b1f3      	cbz	r3, 800c7b4 <_dtoa_r+0x78c>
 800c776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f000 80b7 	beq.w	800c8ec <_dtoa_r+0x8c4>
 800c77e:	b18c      	cbz	r4, 800c7a4 <_dtoa_r+0x77c>
 800c780:	4629      	mov	r1, r5
 800c782:	4622      	mov	r2, r4
 800c784:	4658      	mov	r0, fp
 800c786:	f000 fcc7 	bl	800d118 <__pow5mult>
 800c78a:	464a      	mov	r2, r9
 800c78c:	4601      	mov	r1, r0
 800c78e:	4605      	mov	r5, r0
 800c790:	4658      	mov	r0, fp
 800c792:	f000 fc17 	bl	800cfc4 <__multiply>
 800c796:	4649      	mov	r1, r9
 800c798:	9004      	str	r0, [sp, #16]
 800c79a:	4658      	mov	r0, fp
 800c79c:	f000 fb48 	bl	800ce30 <_Bfree>
 800c7a0:	9b04      	ldr	r3, [sp, #16]
 800c7a2:	4699      	mov	r9, r3
 800c7a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7a6:	1b1a      	subs	r2, r3, r4
 800c7a8:	d004      	beq.n	800c7b4 <_dtoa_r+0x78c>
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	4658      	mov	r0, fp
 800c7ae:	f000 fcb3 	bl	800d118 <__pow5mult>
 800c7b2:	4681      	mov	r9, r0
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	4658      	mov	r0, fp
 800c7b8:	f000 fbee 	bl	800cf98 <__i2b>
 800c7bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7be:	4604      	mov	r4, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 81cf 	beq.w	800cb64 <_dtoa_r+0xb3c>
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	4601      	mov	r1, r0
 800c7ca:	4658      	mov	r0, fp
 800c7cc:	f000 fca4 	bl	800d118 <__pow5mult>
 800c7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	f300 8095 	bgt.w	800c904 <_dtoa_r+0x8dc>
 800c7da:	9b02      	ldr	r3, [sp, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f040 8087 	bne.w	800c8f0 <_dtoa_r+0x8c8>
 800c7e2:	9b03      	ldr	r3, [sp, #12]
 800c7e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f040 8089 	bne.w	800c900 <_dtoa_r+0x8d8>
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7f4:	0d1b      	lsrs	r3, r3, #20
 800c7f6:	051b      	lsls	r3, r3, #20
 800c7f8:	b12b      	cbz	r3, 800c806 <_dtoa_r+0x7de>
 800c7fa:	9b08      	ldr	r3, [sp, #32]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	9308      	str	r3, [sp, #32]
 800c800:	f108 0801 	add.w	r8, r8, #1
 800c804:	2301      	movs	r3, #1
 800c806:	930a      	str	r3, [sp, #40]	@ 0x28
 800c808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 81b0 	beq.w	800cb70 <_dtoa_r+0xb48>
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c816:	6918      	ldr	r0, [r3, #16]
 800c818:	f000 fb72 	bl	800cf00 <__hi0bits>
 800c81c:	f1c0 0020 	rsb	r0, r0, #32
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	4418      	add	r0, r3
 800c824:	f010 001f 	ands.w	r0, r0, #31
 800c828:	d077      	beq.n	800c91a <_dtoa_r+0x8f2>
 800c82a:	f1c0 0320 	rsb	r3, r0, #32
 800c82e:	2b04      	cmp	r3, #4
 800c830:	dd6b      	ble.n	800c90a <_dtoa_r+0x8e2>
 800c832:	9b08      	ldr	r3, [sp, #32]
 800c834:	f1c0 001c 	rsb	r0, r0, #28
 800c838:	4403      	add	r3, r0
 800c83a:	4480      	add	r8, r0
 800c83c:	4406      	add	r6, r0
 800c83e:	9308      	str	r3, [sp, #32]
 800c840:	f1b8 0f00 	cmp.w	r8, #0
 800c844:	dd05      	ble.n	800c852 <_dtoa_r+0x82a>
 800c846:	4649      	mov	r1, r9
 800c848:	4642      	mov	r2, r8
 800c84a:	4658      	mov	r0, fp
 800c84c:	f000 fcbe 	bl	800d1cc <__lshift>
 800c850:	4681      	mov	r9, r0
 800c852:	9b08      	ldr	r3, [sp, #32]
 800c854:	2b00      	cmp	r3, #0
 800c856:	dd05      	ble.n	800c864 <_dtoa_r+0x83c>
 800c858:	4621      	mov	r1, r4
 800c85a:	461a      	mov	r2, r3
 800c85c:	4658      	mov	r0, fp
 800c85e:	f000 fcb5 	bl	800d1cc <__lshift>
 800c862:	4604      	mov	r4, r0
 800c864:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c866:	2b00      	cmp	r3, #0
 800c868:	d059      	beq.n	800c91e <_dtoa_r+0x8f6>
 800c86a:	4621      	mov	r1, r4
 800c86c:	4648      	mov	r0, r9
 800c86e:	f000 fd19 	bl	800d2a4 <__mcmp>
 800c872:	2800      	cmp	r0, #0
 800c874:	da53      	bge.n	800c91e <_dtoa_r+0x8f6>
 800c876:	1e7b      	subs	r3, r7, #1
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	4649      	mov	r1, r9
 800c87c:	2300      	movs	r3, #0
 800c87e:	220a      	movs	r2, #10
 800c880:	4658      	mov	r0, fp
 800c882:	f000 faf7 	bl	800ce74 <__multadd>
 800c886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c888:	4681      	mov	r9, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 8172 	beq.w	800cb74 <_dtoa_r+0xb4c>
 800c890:	2300      	movs	r3, #0
 800c892:	4629      	mov	r1, r5
 800c894:	220a      	movs	r2, #10
 800c896:	4658      	mov	r0, fp
 800c898:	f000 faec 	bl	800ce74 <__multadd>
 800c89c:	9b00      	ldr	r3, [sp, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	dc67      	bgt.n	800c974 <_dtoa_r+0x94c>
 800c8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	dc41      	bgt.n	800c92e <_dtoa_r+0x906>
 800c8aa:	e063      	b.n	800c974 <_dtoa_r+0x94c>
 800c8ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8b2:	e746      	b.n	800c742 <_dtoa_r+0x71a>
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	1e5c      	subs	r4, r3, #1
 800c8b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8ba:	42a3      	cmp	r3, r4
 800c8bc:	bfbf      	itttt	lt
 800c8be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c8c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c8c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c8c4:	1ae3      	sublt	r3, r4, r3
 800c8c6:	bfb4      	ite	lt
 800c8c8:	18d2      	addlt	r2, r2, r3
 800c8ca:	1b1c      	subge	r4, r3, r4
 800c8cc:	9b07      	ldr	r3, [sp, #28]
 800c8ce:	bfbc      	itt	lt
 800c8d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c8d2:	2400      	movlt	r4, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	bfb5      	itete	lt
 800c8d8:	eba8 0603 	sublt.w	r6, r8, r3
 800c8dc:	9b07      	ldrge	r3, [sp, #28]
 800c8de:	2300      	movlt	r3, #0
 800c8e0:	4646      	movge	r6, r8
 800c8e2:	e730      	b.n	800c746 <_dtoa_r+0x71e>
 800c8e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c8e8:	4646      	mov	r6, r8
 800c8ea:	e735      	b.n	800c758 <_dtoa_r+0x730>
 800c8ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c8ee:	e75c      	b.n	800c7aa <_dtoa_r+0x782>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e788      	b.n	800c806 <_dtoa_r+0x7de>
 800c8f4:	3fe00000 	.word	0x3fe00000
 800c8f8:	40240000 	.word	0x40240000
 800c8fc:	40140000 	.word	0x40140000
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	e780      	b.n	800c806 <_dtoa_r+0x7de>
 800c904:	2300      	movs	r3, #0
 800c906:	930a      	str	r3, [sp, #40]	@ 0x28
 800c908:	e782      	b.n	800c810 <_dtoa_r+0x7e8>
 800c90a:	d099      	beq.n	800c840 <_dtoa_r+0x818>
 800c90c:	9a08      	ldr	r2, [sp, #32]
 800c90e:	331c      	adds	r3, #28
 800c910:	441a      	add	r2, r3
 800c912:	4498      	add	r8, r3
 800c914:	441e      	add	r6, r3
 800c916:	9208      	str	r2, [sp, #32]
 800c918:	e792      	b.n	800c840 <_dtoa_r+0x818>
 800c91a:	4603      	mov	r3, r0
 800c91c:	e7f6      	b.n	800c90c <_dtoa_r+0x8e4>
 800c91e:	9b07      	ldr	r3, [sp, #28]
 800c920:	9704      	str	r7, [sp, #16]
 800c922:	2b00      	cmp	r3, #0
 800c924:	dc20      	bgt.n	800c968 <_dtoa_r+0x940>
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	dd1e      	ble.n	800c96c <_dtoa_r+0x944>
 800c92e:	9b00      	ldr	r3, [sp, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f47f aec0 	bne.w	800c6b6 <_dtoa_r+0x68e>
 800c936:	4621      	mov	r1, r4
 800c938:	2205      	movs	r2, #5
 800c93a:	4658      	mov	r0, fp
 800c93c:	f000 fa9a 	bl	800ce74 <__multadd>
 800c940:	4601      	mov	r1, r0
 800c942:	4604      	mov	r4, r0
 800c944:	4648      	mov	r0, r9
 800c946:	f000 fcad 	bl	800d2a4 <__mcmp>
 800c94a:	2800      	cmp	r0, #0
 800c94c:	f77f aeb3 	ble.w	800c6b6 <_dtoa_r+0x68e>
 800c950:	4656      	mov	r6, sl
 800c952:	2331      	movs	r3, #49	@ 0x31
 800c954:	f806 3b01 	strb.w	r3, [r6], #1
 800c958:	9b04      	ldr	r3, [sp, #16]
 800c95a:	3301      	adds	r3, #1
 800c95c:	9304      	str	r3, [sp, #16]
 800c95e:	e6ae      	b.n	800c6be <_dtoa_r+0x696>
 800c960:	9c07      	ldr	r4, [sp, #28]
 800c962:	9704      	str	r7, [sp, #16]
 800c964:	4625      	mov	r5, r4
 800c966:	e7f3      	b.n	800c950 <_dtoa_r+0x928>
 800c968:	9b07      	ldr	r3, [sp, #28]
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 8104 	beq.w	800cb7c <_dtoa_r+0xb54>
 800c974:	2e00      	cmp	r6, #0
 800c976:	dd05      	ble.n	800c984 <_dtoa_r+0x95c>
 800c978:	4629      	mov	r1, r5
 800c97a:	4632      	mov	r2, r6
 800c97c:	4658      	mov	r0, fp
 800c97e:	f000 fc25 	bl	800d1cc <__lshift>
 800c982:	4605      	mov	r5, r0
 800c984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c986:	2b00      	cmp	r3, #0
 800c988:	d05a      	beq.n	800ca40 <_dtoa_r+0xa18>
 800c98a:	6869      	ldr	r1, [r5, #4]
 800c98c:	4658      	mov	r0, fp
 800c98e:	f000 fa0f 	bl	800cdb0 <_Balloc>
 800c992:	4606      	mov	r6, r0
 800c994:	b928      	cbnz	r0, 800c9a2 <_dtoa_r+0x97a>
 800c996:	4b84      	ldr	r3, [pc, #528]	@ (800cba8 <_dtoa_r+0xb80>)
 800c998:	4602      	mov	r2, r0
 800c99a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c99e:	f7ff bb5a 	b.w	800c056 <_dtoa_r+0x2e>
 800c9a2:	692a      	ldr	r2, [r5, #16]
 800c9a4:	3202      	adds	r2, #2
 800c9a6:	0092      	lsls	r2, r2, #2
 800c9a8:	f105 010c 	add.w	r1, r5, #12
 800c9ac:	300c      	adds	r0, #12
 800c9ae:	f7ff faa2 	bl	800bef6 <memcpy>
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	4631      	mov	r1, r6
 800c9b6:	4658      	mov	r0, fp
 800c9b8:	f000 fc08 	bl	800d1cc <__lshift>
 800c9bc:	f10a 0301 	add.w	r3, sl, #1
 800c9c0:	9307      	str	r3, [sp, #28]
 800c9c2:	9b00      	ldr	r3, [sp, #0]
 800c9c4:	4453      	add	r3, sl
 800c9c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9c8:	9b02      	ldr	r3, [sp, #8]
 800c9ca:	f003 0301 	and.w	r3, r3, #1
 800c9ce:	462f      	mov	r7, r5
 800c9d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	9b07      	ldr	r3, [sp, #28]
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	4648      	mov	r0, r9
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	f7ff fa98 	bl	800bf12 <quorem>
 800c9e2:	4639      	mov	r1, r7
 800c9e4:	9002      	str	r0, [sp, #8]
 800c9e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c9ea:	4648      	mov	r0, r9
 800c9ec:	f000 fc5a 	bl	800d2a4 <__mcmp>
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	9008      	str	r0, [sp, #32]
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	f000 fc70 	bl	800d2dc <__mdiff>
 800c9fc:	68c2      	ldr	r2, [r0, #12]
 800c9fe:	4606      	mov	r6, r0
 800ca00:	bb02      	cbnz	r2, 800ca44 <_dtoa_r+0xa1c>
 800ca02:	4601      	mov	r1, r0
 800ca04:	4648      	mov	r0, r9
 800ca06:	f000 fc4d 	bl	800d2a4 <__mcmp>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	4631      	mov	r1, r6
 800ca0e:	4658      	mov	r0, fp
 800ca10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca12:	f000 fa0d 	bl	800ce30 <_Bfree>
 800ca16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca1a:	9e07      	ldr	r6, [sp, #28]
 800ca1c:	ea43 0102 	orr.w	r1, r3, r2
 800ca20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca22:	4319      	orrs	r1, r3
 800ca24:	d110      	bne.n	800ca48 <_dtoa_r+0xa20>
 800ca26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca2a:	d029      	beq.n	800ca80 <_dtoa_r+0xa58>
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	dd02      	ble.n	800ca38 <_dtoa_r+0xa10>
 800ca32:	9b02      	ldr	r3, [sp, #8]
 800ca34:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca38:	9b00      	ldr	r3, [sp, #0]
 800ca3a:	f883 8000 	strb.w	r8, [r3]
 800ca3e:	e63f      	b.n	800c6c0 <_dtoa_r+0x698>
 800ca40:	4628      	mov	r0, r5
 800ca42:	e7bb      	b.n	800c9bc <_dtoa_r+0x994>
 800ca44:	2201      	movs	r2, #1
 800ca46:	e7e1      	b.n	800ca0c <_dtoa_r+0x9e4>
 800ca48:	9b08      	ldr	r3, [sp, #32]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	db04      	blt.n	800ca58 <_dtoa_r+0xa30>
 800ca4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca50:	430b      	orrs	r3, r1
 800ca52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca54:	430b      	orrs	r3, r1
 800ca56:	d120      	bne.n	800ca9a <_dtoa_r+0xa72>
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	dded      	ble.n	800ca38 <_dtoa_r+0xa10>
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4658      	mov	r0, fp
 800ca62:	f000 fbb3 	bl	800d1cc <__lshift>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4681      	mov	r9, r0
 800ca6a:	f000 fc1b 	bl	800d2a4 <__mcmp>
 800ca6e:	2800      	cmp	r0, #0
 800ca70:	dc03      	bgt.n	800ca7a <_dtoa_r+0xa52>
 800ca72:	d1e1      	bne.n	800ca38 <_dtoa_r+0xa10>
 800ca74:	f018 0f01 	tst.w	r8, #1
 800ca78:	d0de      	beq.n	800ca38 <_dtoa_r+0xa10>
 800ca7a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca7e:	d1d8      	bne.n	800ca32 <_dtoa_r+0xa0a>
 800ca80:	9a00      	ldr	r2, [sp, #0]
 800ca82:	2339      	movs	r3, #57	@ 0x39
 800ca84:	7013      	strb	r3, [r2, #0]
 800ca86:	4633      	mov	r3, r6
 800ca88:	461e      	mov	r6, r3
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ca90:	2a39      	cmp	r2, #57	@ 0x39
 800ca92:	d052      	beq.n	800cb3a <_dtoa_r+0xb12>
 800ca94:	3201      	adds	r2, #1
 800ca96:	701a      	strb	r2, [r3, #0]
 800ca98:	e612      	b.n	800c6c0 <_dtoa_r+0x698>
 800ca9a:	2a00      	cmp	r2, #0
 800ca9c:	dd07      	ble.n	800caae <_dtoa_r+0xa86>
 800ca9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caa2:	d0ed      	beq.n	800ca80 <_dtoa_r+0xa58>
 800caa4:	9a00      	ldr	r2, [sp, #0]
 800caa6:	f108 0301 	add.w	r3, r8, #1
 800caaa:	7013      	strb	r3, [r2, #0]
 800caac:	e608      	b.n	800c6c0 <_dtoa_r+0x698>
 800caae:	9b07      	ldr	r3, [sp, #28]
 800cab0:	9a07      	ldr	r2, [sp, #28]
 800cab2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cab8:	4293      	cmp	r3, r2
 800caba:	d028      	beq.n	800cb0e <_dtoa_r+0xae6>
 800cabc:	4649      	mov	r1, r9
 800cabe:	2300      	movs	r3, #0
 800cac0:	220a      	movs	r2, #10
 800cac2:	4658      	mov	r0, fp
 800cac4:	f000 f9d6 	bl	800ce74 <__multadd>
 800cac8:	42af      	cmp	r7, r5
 800caca:	4681      	mov	r9, r0
 800cacc:	f04f 0300 	mov.w	r3, #0
 800cad0:	f04f 020a 	mov.w	r2, #10
 800cad4:	4639      	mov	r1, r7
 800cad6:	4658      	mov	r0, fp
 800cad8:	d107      	bne.n	800caea <_dtoa_r+0xac2>
 800cada:	f000 f9cb 	bl	800ce74 <__multadd>
 800cade:	4607      	mov	r7, r0
 800cae0:	4605      	mov	r5, r0
 800cae2:	9b07      	ldr	r3, [sp, #28]
 800cae4:	3301      	adds	r3, #1
 800cae6:	9307      	str	r3, [sp, #28]
 800cae8:	e774      	b.n	800c9d4 <_dtoa_r+0x9ac>
 800caea:	f000 f9c3 	bl	800ce74 <__multadd>
 800caee:	4629      	mov	r1, r5
 800caf0:	4607      	mov	r7, r0
 800caf2:	2300      	movs	r3, #0
 800caf4:	220a      	movs	r2, #10
 800caf6:	4658      	mov	r0, fp
 800caf8:	f000 f9bc 	bl	800ce74 <__multadd>
 800cafc:	4605      	mov	r5, r0
 800cafe:	e7f0      	b.n	800cae2 <_dtoa_r+0xaba>
 800cb00:	9b00      	ldr	r3, [sp, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	bfcc      	ite	gt
 800cb06:	461e      	movgt	r6, r3
 800cb08:	2601      	movle	r6, #1
 800cb0a:	4456      	add	r6, sl
 800cb0c:	2700      	movs	r7, #0
 800cb0e:	4649      	mov	r1, r9
 800cb10:	2201      	movs	r2, #1
 800cb12:	4658      	mov	r0, fp
 800cb14:	f000 fb5a 	bl	800d1cc <__lshift>
 800cb18:	4621      	mov	r1, r4
 800cb1a:	4681      	mov	r9, r0
 800cb1c:	f000 fbc2 	bl	800d2a4 <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	dcb0      	bgt.n	800ca86 <_dtoa_r+0xa5e>
 800cb24:	d102      	bne.n	800cb2c <_dtoa_r+0xb04>
 800cb26:	f018 0f01 	tst.w	r8, #1
 800cb2a:	d1ac      	bne.n	800ca86 <_dtoa_r+0xa5e>
 800cb2c:	4633      	mov	r3, r6
 800cb2e:	461e      	mov	r6, r3
 800cb30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb34:	2a30      	cmp	r2, #48	@ 0x30
 800cb36:	d0fa      	beq.n	800cb2e <_dtoa_r+0xb06>
 800cb38:	e5c2      	b.n	800c6c0 <_dtoa_r+0x698>
 800cb3a:	459a      	cmp	sl, r3
 800cb3c:	d1a4      	bne.n	800ca88 <_dtoa_r+0xa60>
 800cb3e:	9b04      	ldr	r3, [sp, #16]
 800cb40:	3301      	adds	r3, #1
 800cb42:	9304      	str	r3, [sp, #16]
 800cb44:	2331      	movs	r3, #49	@ 0x31
 800cb46:	f88a 3000 	strb.w	r3, [sl]
 800cb4a:	e5b9      	b.n	800c6c0 <_dtoa_r+0x698>
 800cb4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb4e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cbac <_dtoa_r+0xb84>
 800cb52:	b11b      	cbz	r3, 800cb5c <_dtoa_r+0xb34>
 800cb54:	f10a 0308 	add.w	r3, sl, #8
 800cb58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	b019      	add	sp, #100	@ 0x64
 800cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	f77f ae37 	ble.w	800c7da <_dtoa_r+0x7b2>
 800cb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb70:	2001      	movs	r0, #1
 800cb72:	e655      	b.n	800c820 <_dtoa_r+0x7f8>
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f77f aed6 	ble.w	800c928 <_dtoa_r+0x900>
 800cb7c:	4656      	mov	r6, sl
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4648      	mov	r0, r9
 800cb82:	f7ff f9c6 	bl	800bf12 <quorem>
 800cb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb8a:	f806 8b01 	strb.w	r8, [r6], #1
 800cb8e:	9b00      	ldr	r3, [sp, #0]
 800cb90:	eba6 020a 	sub.w	r2, r6, sl
 800cb94:	4293      	cmp	r3, r2
 800cb96:	ddb3      	ble.n	800cb00 <_dtoa_r+0xad8>
 800cb98:	4649      	mov	r1, r9
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	220a      	movs	r2, #10
 800cb9e:	4658      	mov	r0, fp
 800cba0:	f000 f968 	bl	800ce74 <__multadd>
 800cba4:	4681      	mov	r9, r0
 800cba6:	e7ea      	b.n	800cb7e <_dtoa_r+0xb56>
 800cba8:	0800e348 	.word	0x0800e348
 800cbac:	0800e2cc 	.word	0x0800e2cc

0800cbb0 <_free_r>:
 800cbb0:	b538      	push	{r3, r4, r5, lr}
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	2900      	cmp	r1, #0
 800cbb6:	d041      	beq.n	800cc3c <_free_r+0x8c>
 800cbb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbbc:	1f0c      	subs	r4, r1, #4
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	bfb8      	it	lt
 800cbc2:	18e4      	addlt	r4, r4, r3
 800cbc4:	f000 f8e8 	bl	800cd98 <__malloc_lock>
 800cbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc40 <_free_r+0x90>)
 800cbca:	6813      	ldr	r3, [r2, #0]
 800cbcc:	b933      	cbnz	r3, 800cbdc <_free_r+0x2c>
 800cbce:	6063      	str	r3, [r4, #4]
 800cbd0:	6014      	str	r4, [r2, #0]
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbd8:	f000 b8e4 	b.w	800cda4 <__malloc_unlock>
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	d908      	bls.n	800cbf2 <_free_r+0x42>
 800cbe0:	6820      	ldr	r0, [r4, #0]
 800cbe2:	1821      	adds	r1, r4, r0
 800cbe4:	428b      	cmp	r3, r1
 800cbe6:	bf01      	itttt	eq
 800cbe8:	6819      	ldreq	r1, [r3, #0]
 800cbea:	685b      	ldreq	r3, [r3, #4]
 800cbec:	1809      	addeq	r1, r1, r0
 800cbee:	6021      	streq	r1, [r4, #0]
 800cbf0:	e7ed      	b.n	800cbce <_free_r+0x1e>
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	b10b      	cbz	r3, 800cbfc <_free_r+0x4c>
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	d9fa      	bls.n	800cbf2 <_free_r+0x42>
 800cbfc:	6811      	ldr	r1, [r2, #0]
 800cbfe:	1850      	adds	r0, r2, r1
 800cc00:	42a0      	cmp	r0, r4
 800cc02:	d10b      	bne.n	800cc1c <_free_r+0x6c>
 800cc04:	6820      	ldr	r0, [r4, #0]
 800cc06:	4401      	add	r1, r0
 800cc08:	1850      	adds	r0, r2, r1
 800cc0a:	4283      	cmp	r3, r0
 800cc0c:	6011      	str	r1, [r2, #0]
 800cc0e:	d1e0      	bne.n	800cbd2 <_free_r+0x22>
 800cc10:	6818      	ldr	r0, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	6053      	str	r3, [r2, #4]
 800cc16:	4408      	add	r0, r1
 800cc18:	6010      	str	r0, [r2, #0]
 800cc1a:	e7da      	b.n	800cbd2 <_free_r+0x22>
 800cc1c:	d902      	bls.n	800cc24 <_free_r+0x74>
 800cc1e:	230c      	movs	r3, #12
 800cc20:	602b      	str	r3, [r5, #0]
 800cc22:	e7d6      	b.n	800cbd2 <_free_r+0x22>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	1821      	adds	r1, r4, r0
 800cc28:	428b      	cmp	r3, r1
 800cc2a:	bf04      	itt	eq
 800cc2c:	6819      	ldreq	r1, [r3, #0]
 800cc2e:	685b      	ldreq	r3, [r3, #4]
 800cc30:	6063      	str	r3, [r4, #4]
 800cc32:	bf04      	itt	eq
 800cc34:	1809      	addeq	r1, r1, r0
 800cc36:	6021      	streq	r1, [r4, #0]
 800cc38:	6054      	str	r4, [r2, #4]
 800cc3a:	e7ca      	b.n	800cbd2 <_free_r+0x22>
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	bf00      	nop
 800cc40:	20004ca4 	.word	0x20004ca4

0800cc44 <malloc>:
 800cc44:	4b02      	ldr	r3, [pc, #8]	@ (800cc50 <malloc+0xc>)
 800cc46:	4601      	mov	r1, r0
 800cc48:	6818      	ldr	r0, [r3, #0]
 800cc4a:	f000 b825 	b.w	800cc98 <_malloc_r>
 800cc4e:	bf00      	nop
 800cc50:	20000190 	.word	0x20000190

0800cc54 <sbrk_aligned>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	4e0f      	ldr	r6, [pc, #60]	@ (800cc94 <sbrk_aligned+0x40>)
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6831      	ldr	r1, [r6, #0]
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	b911      	cbnz	r1, 800cc66 <sbrk_aligned+0x12>
 800cc60:	f000 fe46 	bl	800d8f0 <_sbrk_r>
 800cc64:	6030      	str	r0, [r6, #0]
 800cc66:	4621      	mov	r1, r4
 800cc68:	4628      	mov	r0, r5
 800cc6a:	f000 fe41 	bl	800d8f0 <_sbrk_r>
 800cc6e:	1c43      	adds	r3, r0, #1
 800cc70:	d103      	bne.n	800cc7a <sbrk_aligned+0x26>
 800cc72:	f04f 34ff 	mov.w	r4, #4294967295
 800cc76:	4620      	mov	r0, r4
 800cc78:	bd70      	pop	{r4, r5, r6, pc}
 800cc7a:	1cc4      	adds	r4, r0, #3
 800cc7c:	f024 0403 	bic.w	r4, r4, #3
 800cc80:	42a0      	cmp	r0, r4
 800cc82:	d0f8      	beq.n	800cc76 <sbrk_aligned+0x22>
 800cc84:	1a21      	subs	r1, r4, r0
 800cc86:	4628      	mov	r0, r5
 800cc88:	f000 fe32 	bl	800d8f0 <_sbrk_r>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	d1f2      	bne.n	800cc76 <sbrk_aligned+0x22>
 800cc90:	e7ef      	b.n	800cc72 <sbrk_aligned+0x1e>
 800cc92:	bf00      	nop
 800cc94:	20004ca0 	.word	0x20004ca0

0800cc98 <_malloc_r>:
 800cc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	1ccd      	adds	r5, r1, #3
 800cc9e:	f025 0503 	bic.w	r5, r5, #3
 800cca2:	3508      	adds	r5, #8
 800cca4:	2d0c      	cmp	r5, #12
 800cca6:	bf38      	it	cc
 800cca8:	250c      	movcc	r5, #12
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	4606      	mov	r6, r0
 800ccae:	db01      	blt.n	800ccb4 <_malloc_r+0x1c>
 800ccb0:	42a9      	cmp	r1, r5
 800ccb2:	d904      	bls.n	800ccbe <_malloc_r+0x26>
 800ccb4:	230c      	movs	r3, #12
 800ccb6:	6033      	str	r3, [r6, #0]
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd94 <_malloc_r+0xfc>
 800ccc2:	f000 f869 	bl	800cd98 <__malloc_lock>
 800ccc6:	f8d8 3000 	ldr.w	r3, [r8]
 800ccca:	461c      	mov	r4, r3
 800cccc:	bb44      	cbnz	r4, 800cd20 <_malloc_r+0x88>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f7ff ffbf 	bl	800cc54 <sbrk_aligned>
 800ccd6:	1c43      	adds	r3, r0, #1
 800ccd8:	4604      	mov	r4, r0
 800ccda:	d158      	bne.n	800cd8e <_malloc_r+0xf6>
 800ccdc:	f8d8 4000 	ldr.w	r4, [r8]
 800cce0:	4627      	mov	r7, r4
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	d143      	bne.n	800cd6e <_malloc_r+0xd6>
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	d04b      	beq.n	800cd82 <_malloc_r+0xea>
 800ccea:	6823      	ldr	r3, [r4, #0]
 800ccec:	4639      	mov	r1, r7
 800ccee:	4630      	mov	r0, r6
 800ccf0:	eb04 0903 	add.w	r9, r4, r3
 800ccf4:	f000 fdfc 	bl	800d8f0 <_sbrk_r>
 800ccf8:	4581      	cmp	r9, r0
 800ccfa:	d142      	bne.n	800cd82 <_malloc_r+0xea>
 800ccfc:	6821      	ldr	r1, [r4, #0]
 800ccfe:	1a6d      	subs	r5, r5, r1
 800cd00:	4629      	mov	r1, r5
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ffa6 	bl	800cc54 <sbrk_aligned>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	d03a      	beq.n	800cd82 <_malloc_r+0xea>
 800cd0c:	6823      	ldr	r3, [r4, #0]
 800cd0e:	442b      	add	r3, r5
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	f8d8 3000 	ldr.w	r3, [r8]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	bb62      	cbnz	r2, 800cd74 <_malloc_r+0xdc>
 800cd1a:	f8c8 7000 	str.w	r7, [r8]
 800cd1e:	e00f      	b.n	800cd40 <_malloc_r+0xa8>
 800cd20:	6822      	ldr	r2, [r4, #0]
 800cd22:	1b52      	subs	r2, r2, r5
 800cd24:	d420      	bmi.n	800cd68 <_malloc_r+0xd0>
 800cd26:	2a0b      	cmp	r2, #11
 800cd28:	d917      	bls.n	800cd5a <_malloc_r+0xc2>
 800cd2a:	1961      	adds	r1, r4, r5
 800cd2c:	42a3      	cmp	r3, r4
 800cd2e:	6025      	str	r5, [r4, #0]
 800cd30:	bf18      	it	ne
 800cd32:	6059      	strne	r1, [r3, #4]
 800cd34:	6863      	ldr	r3, [r4, #4]
 800cd36:	bf08      	it	eq
 800cd38:	f8c8 1000 	streq.w	r1, [r8]
 800cd3c:	5162      	str	r2, [r4, r5]
 800cd3e:	604b      	str	r3, [r1, #4]
 800cd40:	4630      	mov	r0, r6
 800cd42:	f000 f82f 	bl	800cda4 <__malloc_unlock>
 800cd46:	f104 000b 	add.w	r0, r4, #11
 800cd4a:	1d23      	adds	r3, r4, #4
 800cd4c:	f020 0007 	bic.w	r0, r0, #7
 800cd50:	1ac2      	subs	r2, r0, r3
 800cd52:	bf1c      	itt	ne
 800cd54:	1a1b      	subne	r3, r3, r0
 800cd56:	50a3      	strne	r3, [r4, r2]
 800cd58:	e7af      	b.n	800ccba <_malloc_r+0x22>
 800cd5a:	6862      	ldr	r2, [r4, #4]
 800cd5c:	42a3      	cmp	r3, r4
 800cd5e:	bf0c      	ite	eq
 800cd60:	f8c8 2000 	streq.w	r2, [r8]
 800cd64:	605a      	strne	r2, [r3, #4]
 800cd66:	e7eb      	b.n	800cd40 <_malloc_r+0xa8>
 800cd68:	4623      	mov	r3, r4
 800cd6a:	6864      	ldr	r4, [r4, #4]
 800cd6c:	e7ae      	b.n	800cccc <_malloc_r+0x34>
 800cd6e:	463c      	mov	r4, r7
 800cd70:	687f      	ldr	r7, [r7, #4]
 800cd72:	e7b6      	b.n	800cce2 <_malloc_r+0x4a>
 800cd74:	461a      	mov	r2, r3
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	42a3      	cmp	r3, r4
 800cd7a:	d1fb      	bne.n	800cd74 <_malloc_r+0xdc>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	6053      	str	r3, [r2, #4]
 800cd80:	e7de      	b.n	800cd40 <_malloc_r+0xa8>
 800cd82:	230c      	movs	r3, #12
 800cd84:	6033      	str	r3, [r6, #0]
 800cd86:	4630      	mov	r0, r6
 800cd88:	f000 f80c 	bl	800cda4 <__malloc_unlock>
 800cd8c:	e794      	b.n	800ccb8 <_malloc_r+0x20>
 800cd8e:	6005      	str	r5, [r0, #0]
 800cd90:	e7d6      	b.n	800cd40 <_malloc_r+0xa8>
 800cd92:	bf00      	nop
 800cd94:	20004ca4 	.word	0x20004ca4

0800cd98 <__malloc_lock>:
 800cd98:	4801      	ldr	r0, [pc, #4]	@ (800cda0 <__malloc_lock+0x8>)
 800cd9a:	f7ff b8a2 	b.w	800bee2 <__retarget_lock_acquire_recursive>
 800cd9e:	bf00      	nop
 800cda0:	20004c9c 	.word	0x20004c9c

0800cda4 <__malloc_unlock>:
 800cda4:	4801      	ldr	r0, [pc, #4]	@ (800cdac <__malloc_unlock+0x8>)
 800cda6:	f7ff b89d 	b.w	800bee4 <__retarget_lock_release_recursive>
 800cdaa:	bf00      	nop
 800cdac:	20004c9c 	.word	0x20004c9c

0800cdb0 <_Balloc>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	69c6      	ldr	r6, [r0, #28]
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	b976      	cbnz	r6, 800cdd8 <_Balloc+0x28>
 800cdba:	2010      	movs	r0, #16
 800cdbc:	f7ff ff42 	bl	800cc44 <malloc>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	61e0      	str	r0, [r4, #28]
 800cdc4:	b920      	cbnz	r0, 800cdd0 <_Balloc+0x20>
 800cdc6:	4b18      	ldr	r3, [pc, #96]	@ (800ce28 <_Balloc+0x78>)
 800cdc8:	4818      	ldr	r0, [pc, #96]	@ (800ce2c <_Balloc+0x7c>)
 800cdca:	216b      	movs	r1, #107	@ 0x6b
 800cdcc:	f000 fda0 	bl	800d910 <__assert_func>
 800cdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdd4:	6006      	str	r6, [r0, #0]
 800cdd6:	60c6      	str	r6, [r0, #12]
 800cdd8:	69e6      	ldr	r6, [r4, #28]
 800cdda:	68f3      	ldr	r3, [r6, #12]
 800cddc:	b183      	cbz	r3, 800ce00 <_Balloc+0x50>
 800cdde:	69e3      	ldr	r3, [r4, #28]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cde6:	b9b8      	cbnz	r0, 800ce18 <_Balloc+0x68>
 800cde8:	2101      	movs	r1, #1
 800cdea:	fa01 f605 	lsl.w	r6, r1, r5
 800cdee:	1d72      	adds	r2, r6, #5
 800cdf0:	0092      	lsls	r2, r2, #2
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 fdaa 	bl	800d94c <_calloc_r>
 800cdf8:	b160      	cbz	r0, 800ce14 <_Balloc+0x64>
 800cdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdfe:	e00e      	b.n	800ce1e <_Balloc+0x6e>
 800ce00:	2221      	movs	r2, #33	@ 0x21
 800ce02:	2104      	movs	r1, #4
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fda1 	bl	800d94c <_calloc_r>
 800ce0a:	69e3      	ldr	r3, [r4, #28]
 800ce0c:	60f0      	str	r0, [r6, #12]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e4      	bne.n	800cdde <_Balloc+0x2e>
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	6802      	ldr	r2, [r0, #0]
 800ce1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce24:	e7f7      	b.n	800ce16 <_Balloc+0x66>
 800ce26:	bf00      	nop
 800ce28:	0800e2d9 	.word	0x0800e2d9
 800ce2c:	0800e359 	.word	0x0800e359

0800ce30 <_Bfree>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	69c6      	ldr	r6, [r0, #28]
 800ce34:	4605      	mov	r5, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	b976      	cbnz	r6, 800ce58 <_Bfree+0x28>
 800ce3a:	2010      	movs	r0, #16
 800ce3c:	f7ff ff02 	bl	800cc44 <malloc>
 800ce40:	4602      	mov	r2, r0
 800ce42:	61e8      	str	r0, [r5, #28]
 800ce44:	b920      	cbnz	r0, 800ce50 <_Bfree+0x20>
 800ce46:	4b09      	ldr	r3, [pc, #36]	@ (800ce6c <_Bfree+0x3c>)
 800ce48:	4809      	ldr	r0, [pc, #36]	@ (800ce70 <_Bfree+0x40>)
 800ce4a:	218f      	movs	r1, #143	@ 0x8f
 800ce4c:	f000 fd60 	bl	800d910 <__assert_func>
 800ce50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce54:	6006      	str	r6, [r0, #0]
 800ce56:	60c6      	str	r6, [r0, #12]
 800ce58:	b13c      	cbz	r4, 800ce6a <_Bfree+0x3a>
 800ce5a:	69eb      	ldr	r3, [r5, #28]
 800ce5c:	6862      	ldr	r2, [r4, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce64:	6021      	str	r1, [r4, #0]
 800ce66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	0800e2d9 	.word	0x0800e2d9
 800ce70:	0800e359 	.word	0x0800e359

0800ce74 <__multadd>:
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce78:	690d      	ldr	r5, [r1, #16]
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	461e      	mov	r6, r3
 800ce80:	f101 0c14 	add.w	ip, r1, #20
 800ce84:	2000      	movs	r0, #0
 800ce86:	f8dc 3000 	ldr.w	r3, [ip]
 800ce8a:	b299      	uxth	r1, r3
 800ce8c:	fb02 6101 	mla	r1, r2, r1, r6
 800ce90:	0c1e      	lsrs	r6, r3, #16
 800ce92:	0c0b      	lsrs	r3, r1, #16
 800ce94:	fb02 3306 	mla	r3, r2, r6, r3
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	3001      	adds	r0, #1
 800ce9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cea0:	4285      	cmp	r5, r0
 800cea2:	f84c 1b04 	str.w	r1, [ip], #4
 800cea6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ceaa:	dcec      	bgt.n	800ce86 <__multadd+0x12>
 800ceac:	b30e      	cbz	r6, 800cef2 <__multadd+0x7e>
 800ceae:	68a3      	ldr	r3, [r4, #8]
 800ceb0:	42ab      	cmp	r3, r5
 800ceb2:	dc19      	bgt.n	800cee8 <__multadd+0x74>
 800ceb4:	6861      	ldr	r1, [r4, #4]
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	3101      	adds	r1, #1
 800ceba:	f7ff ff79 	bl	800cdb0 <_Balloc>
 800cebe:	4680      	mov	r8, r0
 800cec0:	b928      	cbnz	r0, 800cece <__multadd+0x5a>
 800cec2:	4602      	mov	r2, r0
 800cec4:	4b0c      	ldr	r3, [pc, #48]	@ (800cef8 <__multadd+0x84>)
 800cec6:	480d      	ldr	r0, [pc, #52]	@ (800cefc <__multadd+0x88>)
 800cec8:	21ba      	movs	r1, #186	@ 0xba
 800ceca:	f000 fd21 	bl	800d910 <__assert_func>
 800cece:	6922      	ldr	r2, [r4, #16]
 800ced0:	3202      	adds	r2, #2
 800ced2:	f104 010c 	add.w	r1, r4, #12
 800ced6:	0092      	lsls	r2, r2, #2
 800ced8:	300c      	adds	r0, #12
 800ceda:	f7ff f80c 	bl	800bef6 <memcpy>
 800cede:	4621      	mov	r1, r4
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7ff ffa5 	bl	800ce30 <_Bfree>
 800cee6:	4644      	mov	r4, r8
 800cee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ceec:	3501      	adds	r5, #1
 800ceee:	615e      	str	r6, [r3, #20]
 800cef0:	6125      	str	r5, [r4, #16]
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef8:	0800e348 	.word	0x0800e348
 800cefc:	0800e359 	.word	0x0800e359

0800cf00 <__hi0bits>:
 800cf00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf04:	4603      	mov	r3, r0
 800cf06:	bf36      	itet	cc
 800cf08:	0403      	lslcc	r3, r0, #16
 800cf0a:	2000      	movcs	r0, #0
 800cf0c:	2010      	movcc	r0, #16
 800cf0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf12:	bf3c      	itt	cc
 800cf14:	021b      	lslcc	r3, r3, #8
 800cf16:	3008      	addcc	r0, #8
 800cf18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf1c:	bf3c      	itt	cc
 800cf1e:	011b      	lslcc	r3, r3, #4
 800cf20:	3004      	addcc	r0, #4
 800cf22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf26:	bf3c      	itt	cc
 800cf28:	009b      	lslcc	r3, r3, #2
 800cf2a:	3002      	addcc	r0, #2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	db05      	blt.n	800cf3c <__hi0bits+0x3c>
 800cf30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf34:	f100 0001 	add.w	r0, r0, #1
 800cf38:	bf08      	it	eq
 800cf3a:	2020      	moveq	r0, #32
 800cf3c:	4770      	bx	lr

0800cf3e <__lo0bits>:
 800cf3e:	6803      	ldr	r3, [r0, #0]
 800cf40:	4602      	mov	r2, r0
 800cf42:	f013 0007 	ands.w	r0, r3, #7
 800cf46:	d00b      	beq.n	800cf60 <__lo0bits+0x22>
 800cf48:	07d9      	lsls	r1, r3, #31
 800cf4a:	d421      	bmi.n	800cf90 <__lo0bits+0x52>
 800cf4c:	0798      	lsls	r0, r3, #30
 800cf4e:	bf49      	itett	mi
 800cf50:	085b      	lsrmi	r3, r3, #1
 800cf52:	089b      	lsrpl	r3, r3, #2
 800cf54:	2001      	movmi	r0, #1
 800cf56:	6013      	strmi	r3, [r2, #0]
 800cf58:	bf5c      	itt	pl
 800cf5a:	6013      	strpl	r3, [r2, #0]
 800cf5c:	2002      	movpl	r0, #2
 800cf5e:	4770      	bx	lr
 800cf60:	b299      	uxth	r1, r3
 800cf62:	b909      	cbnz	r1, 800cf68 <__lo0bits+0x2a>
 800cf64:	0c1b      	lsrs	r3, r3, #16
 800cf66:	2010      	movs	r0, #16
 800cf68:	b2d9      	uxtb	r1, r3
 800cf6a:	b909      	cbnz	r1, 800cf70 <__lo0bits+0x32>
 800cf6c:	3008      	adds	r0, #8
 800cf6e:	0a1b      	lsrs	r3, r3, #8
 800cf70:	0719      	lsls	r1, r3, #28
 800cf72:	bf04      	itt	eq
 800cf74:	091b      	lsreq	r3, r3, #4
 800cf76:	3004      	addeq	r0, #4
 800cf78:	0799      	lsls	r1, r3, #30
 800cf7a:	bf04      	itt	eq
 800cf7c:	089b      	lsreq	r3, r3, #2
 800cf7e:	3002      	addeq	r0, #2
 800cf80:	07d9      	lsls	r1, r3, #31
 800cf82:	d403      	bmi.n	800cf8c <__lo0bits+0x4e>
 800cf84:	085b      	lsrs	r3, r3, #1
 800cf86:	f100 0001 	add.w	r0, r0, #1
 800cf8a:	d003      	beq.n	800cf94 <__lo0bits+0x56>
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	4770      	bx	lr
 800cf90:	2000      	movs	r0, #0
 800cf92:	4770      	bx	lr
 800cf94:	2020      	movs	r0, #32
 800cf96:	4770      	bx	lr

0800cf98 <__i2b>:
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	2101      	movs	r1, #1
 800cf9e:	f7ff ff07 	bl	800cdb0 <_Balloc>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	b928      	cbnz	r0, 800cfb2 <__i2b+0x1a>
 800cfa6:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <__i2b+0x24>)
 800cfa8:	4805      	ldr	r0, [pc, #20]	@ (800cfc0 <__i2b+0x28>)
 800cfaa:	f240 1145 	movw	r1, #325	@ 0x145
 800cfae:	f000 fcaf 	bl	800d910 <__assert_func>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	6144      	str	r4, [r0, #20]
 800cfb6:	6103      	str	r3, [r0, #16]
 800cfb8:	bd10      	pop	{r4, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800e348 	.word	0x0800e348
 800cfc0:	0800e359 	.word	0x0800e359

0800cfc4 <__multiply>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	4614      	mov	r4, r2
 800cfca:	690a      	ldr	r2, [r1, #16]
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	bfa8      	it	ge
 800cfd2:	4623      	movge	r3, r4
 800cfd4:	460f      	mov	r7, r1
 800cfd6:	bfa4      	itt	ge
 800cfd8:	460c      	movge	r4, r1
 800cfda:	461f      	movge	r7, r3
 800cfdc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cfe0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cfe4:	68a3      	ldr	r3, [r4, #8]
 800cfe6:	6861      	ldr	r1, [r4, #4]
 800cfe8:	eb0a 0609 	add.w	r6, sl, r9
 800cfec:	42b3      	cmp	r3, r6
 800cfee:	b085      	sub	sp, #20
 800cff0:	bfb8      	it	lt
 800cff2:	3101      	addlt	r1, #1
 800cff4:	f7ff fedc 	bl	800cdb0 <_Balloc>
 800cff8:	b930      	cbnz	r0, 800d008 <__multiply+0x44>
 800cffa:	4602      	mov	r2, r0
 800cffc:	4b44      	ldr	r3, [pc, #272]	@ (800d110 <__multiply+0x14c>)
 800cffe:	4845      	ldr	r0, [pc, #276]	@ (800d114 <__multiply+0x150>)
 800d000:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d004:	f000 fc84 	bl	800d910 <__assert_func>
 800d008:	f100 0514 	add.w	r5, r0, #20
 800d00c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d010:	462b      	mov	r3, r5
 800d012:	2200      	movs	r2, #0
 800d014:	4543      	cmp	r3, r8
 800d016:	d321      	bcc.n	800d05c <__multiply+0x98>
 800d018:	f107 0114 	add.w	r1, r7, #20
 800d01c:	f104 0214 	add.w	r2, r4, #20
 800d020:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d024:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	1b13      	subs	r3, r2, r4
 800d02c:	3b15      	subs	r3, #21
 800d02e:	f023 0303 	bic.w	r3, r3, #3
 800d032:	3304      	adds	r3, #4
 800d034:	f104 0715 	add.w	r7, r4, #21
 800d038:	42ba      	cmp	r2, r7
 800d03a:	bf38      	it	cc
 800d03c:	2304      	movcc	r3, #4
 800d03e:	9301      	str	r3, [sp, #4]
 800d040:	9b02      	ldr	r3, [sp, #8]
 800d042:	9103      	str	r1, [sp, #12]
 800d044:	428b      	cmp	r3, r1
 800d046:	d80c      	bhi.n	800d062 <__multiply+0x9e>
 800d048:	2e00      	cmp	r6, #0
 800d04a:	dd03      	ble.n	800d054 <__multiply+0x90>
 800d04c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d050:	2b00      	cmp	r3, #0
 800d052:	d05b      	beq.n	800d10c <__multiply+0x148>
 800d054:	6106      	str	r6, [r0, #16]
 800d056:	b005      	add	sp, #20
 800d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05c:	f843 2b04 	str.w	r2, [r3], #4
 800d060:	e7d8      	b.n	800d014 <__multiply+0x50>
 800d062:	f8b1 a000 	ldrh.w	sl, [r1]
 800d066:	f1ba 0f00 	cmp.w	sl, #0
 800d06a:	d024      	beq.n	800d0b6 <__multiply+0xf2>
 800d06c:	f104 0e14 	add.w	lr, r4, #20
 800d070:	46a9      	mov	r9, r5
 800d072:	f04f 0c00 	mov.w	ip, #0
 800d076:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d07a:	f8d9 3000 	ldr.w	r3, [r9]
 800d07e:	fa1f fb87 	uxth.w	fp, r7
 800d082:	b29b      	uxth	r3, r3
 800d084:	fb0a 330b 	mla	r3, sl, fp, r3
 800d088:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d08c:	f8d9 7000 	ldr.w	r7, [r9]
 800d090:	4463      	add	r3, ip
 800d092:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d096:	fb0a c70b 	mla	r7, sl, fp, ip
 800d09a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0a4:	4572      	cmp	r2, lr
 800d0a6:	f849 3b04 	str.w	r3, [r9], #4
 800d0aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d0ae:	d8e2      	bhi.n	800d076 <__multiply+0xb2>
 800d0b0:	9b01      	ldr	r3, [sp, #4]
 800d0b2:	f845 c003 	str.w	ip, [r5, r3]
 800d0b6:	9b03      	ldr	r3, [sp, #12]
 800d0b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d0bc:	3104      	adds	r1, #4
 800d0be:	f1b9 0f00 	cmp.w	r9, #0
 800d0c2:	d021      	beq.n	800d108 <__multiply+0x144>
 800d0c4:	682b      	ldr	r3, [r5, #0]
 800d0c6:	f104 0c14 	add.w	ip, r4, #20
 800d0ca:	46ae      	mov	lr, r5
 800d0cc:	f04f 0a00 	mov.w	sl, #0
 800d0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800d0d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d0d8:	fb09 770b 	mla	r7, r9, fp, r7
 800d0dc:	4457      	add	r7, sl
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d0e4:	f84e 3b04 	str.w	r3, [lr], #4
 800d0e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0f0:	f8be 3000 	ldrh.w	r3, [lr]
 800d0f4:	fb09 330a 	mla	r3, r9, sl, r3
 800d0f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d0fc:	4562      	cmp	r2, ip
 800d0fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d102:	d8e5      	bhi.n	800d0d0 <__multiply+0x10c>
 800d104:	9f01      	ldr	r7, [sp, #4]
 800d106:	51eb      	str	r3, [r5, r7]
 800d108:	3504      	adds	r5, #4
 800d10a:	e799      	b.n	800d040 <__multiply+0x7c>
 800d10c:	3e01      	subs	r6, #1
 800d10e:	e79b      	b.n	800d048 <__multiply+0x84>
 800d110:	0800e348 	.word	0x0800e348
 800d114:	0800e359 	.word	0x0800e359

0800d118 <__pow5mult>:
 800d118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d11c:	4615      	mov	r5, r2
 800d11e:	f012 0203 	ands.w	r2, r2, #3
 800d122:	4607      	mov	r7, r0
 800d124:	460e      	mov	r6, r1
 800d126:	d007      	beq.n	800d138 <__pow5mult+0x20>
 800d128:	4c25      	ldr	r4, [pc, #148]	@ (800d1c0 <__pow5mult+0xa8>)
 800d12a:	3a01      	subs	r2, #1
 800d12c:	2300      	movs	r3, #0
 800d12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d132:	f7ff fe9f 	bl	800ce74 <__multadd>
 800d136:	4606      	mov	r6, r0
 800d138:	10ad      	asrs	r5, r5, #2
 800d13a:	d03d      	beq.n	800d1b8 <__pow5mult+0xa0>
 800d13c:	69fc      	ldr	r4, [r7, #28]
 800d13e:	b97c      	cbnz	r4, 800d160 <__pow5mult+0x48>
 800d140:	2010      	movs	r0, #16
 800d142:	f7ff fd7f 	bl	800cc44 <malloc>
 800d146:	4602      	mov	r2, r0
 800d148:	61f8      	str	r0, [r7, #28]
 800d14a:	b928      	cbnz	r0, 800d158 <__pow5mult+0x40>
 800d14c:	4b1d      	ldr	r3, [pc, #116]	@ (800d1c4 <__pow5mult+0xac>)
 800d14e:	481e      	ldr	r0, [pc, #120]	@ (800d1c8 <__pow5mult+0xb0>)
 800d150:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d154:	f000 fbdc 	bl	800d910 <__assert_func>
 800d158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d15c:	6004      	str	r4, [r0, #0]
 800d15e:	60c4      	str	r4, [r0, #12]
 800d160:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d168:	b94c      	cbnz	r4, 800d17e <__pow5mult+0x66>
 800d16a:	f240 2171 	movw	r1, #625	@ 0x271
 800d16e:	4638      	mov	r0, r7
 800d170:	f7ff ff12 	bl	800cf98 <__i2b>
 800d174:	2300      	movs	r3, #0
 800d176:	f8c8 0008 	str.w	r0, [r8, #8]
 800d17a:	4604      	mov	r4, r0
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	f04f 0900 	mov.w	r9, #0
 800d182:	07eb      	lsls	r3, r5, #31
 800d184:	d50a      	bpl.n	800d19c <__pow5mult+0x84>
 800d186:	4631      	mov	r1, r6
 800d188:	4622      	mov	r2, r4
 800d18a:	4638      	mov	r0, r7
 800d18c:	f7ff ff1a 	bl	800cfc4 <__multiply>
 800d190:	4631      	mov	r1, r6
 800d192:	4680      	mov	r8, r0
 800d194:	4638      	mov	r0, r7
 800d196:	f7ff fe4b 	bl	800ce30 <_Bfree>
 800d19a:	4646      	mov	r6, r8
 800d19c:	106d      	asrs	r5, r5, #1
 800d19e:	d00b      	beq.n	800d1b8 <__pow5mult+0xa0>
 800d1a0:	6820      	ldr	r0, [r4, #0]
 800d1a2:	b938      	cbnz	r0, 800d1b4 <__pow5mult+0x9c>
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff ff0b 	bl	800cfc4 <__multiply>
 800d1ae:	6020      	str	r0, [r4, #0]
 800d1b0:	f8c0 9000 	str.w	r9, [r0]
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	e7e4      	b.n	800d182 <__pow5mult+0x6a>
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1be:	bf00      	nop
 800d1c0:	0800e3b4 	.word	0x0800e3b4
 800d1c4:	0800e2d9 	.word	0x0800e2d9
 800d1c8:	0800e359 	.word	0x0800e359

0800d1cc <__lshift>:
 800d1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	6849      	ldr	r1, [r1, #4]
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d1da:	68a3      	ldr	r3, [r4, #8]
 800d1dc:	4607      	mov	r7, r0
 800d1de:	4691      	mov	r9, r2
 800d1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d1e4:	f108 0601 	add.w	r6, r8, #1
 800d1e8:	42b3      	cmp	r3, r6
 800d1ea:	db0b      	blt.n	800d204 <__lshift+0x38>
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f7ff fddf 	bl	800cdb0 <_Balloc>
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	b948      	cbnz	r0, 800d20a <__lshift+0x3e>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	4b28      	ldr	r3, [pc, #160]	@ (800d29c <__lshift+0xd0>)
 800d1fa:	4829      	ldr	r0, [pc, #164]	@ (800d2a0 <__lshift+0xd4>)
 800d1fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d200:	f000 fb86 	bl	800d910 <__assert_func>
 800d204:	3101      	adds	r1, #1
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	e7ee      	b.n	800d1e8 <__lshift+0x1c>
 800d20a:	2300      	movs	r3, #0
 800d20c:	f100 0114 	add.w	r1, r0, #20
 800d210:	f100 0210 	add.w	r2, r0, #16
 800d214:	4618      	mov	r0, r3
 800d216:	4553      	cmp	r3, sl
 800d218:	db33      	blt.n	800d282 <__lshift+0xb6>
 800d21a:	6920      	ldr	r0, [r4, #16]
 800d21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d220:	f104 0314 	add.w	r3, r4, #20
 800d224:	f019 091f 	ands.w	r9, r9, #31
 800d228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d22c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d230:	d02b      	beq.n	800d28a <__lshift+0xbe>
 800d232:	f1c9 0e20 	rsb	lr, r9, #32
 800d236:	468a      	mov	sl, r1
 800d238:	2200      	movs	r2, #0
 800d23a:	6818      	ldr	r0, [r3, #0]
 800d23c:	fa00 f009 	lsl.w	r0, r0, r9
 800d240:	4310      	orrs	r0, r2
 800d242:	f84a 0b04 	str.w	r0, [sl], #4
 800d246:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24a:	459c      	cmp	ip, r3
 800d24c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d250:	d8f3      	bhi.n	800d23a <__lshift+0x6e>
 800d252:	ebac 0304 	sub.w	r3, ip, r4
 800d256:	3b15      	subs	r3, #21
 800d258:	f023 0303 	bic.w	r3, r3, #3
 800d25c:	3304      	adds	r3, #4
 800d25e:	f104 0015 	add.w	r0, r4, #21
 800d262:	4584      	cmp	ip, r0
 800d264:	bf38      	it	cc
 800d266:	2304      	movcc	r3, #4
 800d268:	50ca      	str	r2, [r1, r3]
 800d26a:	b10a      	cbz	r2, 800d270 <__lshift+0xa4>
 800d26c:	f108 0602 	add.w	r6, r8, #2
 800d270:	3e01      	subs	r6, #1
 800d272:	4638      	mov	r0, r7
 800d274:	612e      	str	r6, [r5, #16]
 800d276:	4621      	mov	r1, r4
 800d278:	f7ff fdda 	bl	800ce30 <_Bfree>
 800d27c:	4628      	mov	r0, r5
 800d27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d282:	f842 0f04 	str.w	r0, [r2, #4]!
 800d286:	3301      	adds	r3, #1
 800d288:	e7c5      	b.n	800d216 <__lshift+0x4a>
 800d28a:	3904      	subs	r1, #4
 800d28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d290:	f841 2f04 	str.w	r2, [r1, #4]!
 800d294:	459c      	cmp	ip, r3
 800d296:	d8f9      	bhi.n	800d28c <__lshift+0xc0>
 800d298:	e7ea      	b.n	800d270 <__lshift+0xa4>
 800d29a:	bf00      	nop
 800d29c:	0800e348 	.word	0x0800e348
 800d2a0:	0800e359 	.word	0x0800e359

0800d2a4 <__mcmp>:
 800d2a4:	690a      	ldr	r2, [r1, #16]
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	6900      	ldr	r0, [r0, #16]
 800d2aa:	1a80      	subs	r0, r0, r2
 800d2ac:	b530      	push	{r4, r5, lr}
 800d2ae:	d10e      	bne.n	800d2ce <__mcmp+0x2a>
 800d2b0:	3314      	adds	r3, #20
 800d2b2:	3114      	adds	r1, #20
 800d2b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d2b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d2bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2c4:	4295      	cmp	r5, r2
 800d2c6:	d003      	beq.n	800d2d0 <__mcmp+0x2c>
 800d2c8:	d205      	bcs.n	800d2d6 <__mcmp+0x32>
 800d2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ce:	bd30      	pop	{r4, r5, pc}
 800d2d0:	42a3      	cmp	r3, r4
 800d2d2:	d3f3      	bcc.n	800d2bc <__mcmp+0x18>
 800d2d4:	e7fb      	b.n	800d2ce <__mcmp+0x2a>
 800d2d6:	2001      	movs	r0, #1
 800d2d8:	e7f9      	b.n	800d2ce <__mcmp+0x2a>
	...

0800d2dc <__mdiff>:
 800d2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	4689      	mov	r9, r1
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	f7ff ffdb 	bl	800d2a4 <__mcmp>
 800d2ee:	1e05      	subs	r5, r0, #0
 800d2f0:	d112      	bne.n	800d318 <__mdiff+0x3c>
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	f7ff fd5b 	bl	800cdb0 <_Balloc>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	b928      	cbnz	r0, 800d30a <__mdiff+0x2e>
 800d2fe:	4b3f      	ldr	r3, [pc, #252]	@ (800d3fc <__mdiff+0x120>)
 800d300:	f240 2137 	movw	r1, #567	@ 0x237
 800d304:	483e      	ldr	r0, [pc, #248]	@ (800d400 <__mdiff+0x124>)
 800d306:	f000 fb03 	bl	800d910 <__assert_func>
 800d30a:	2301      	movs	r3, #1
 800d30c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d310:	4610      	mov	r0, r2
 800d312:	b003      	add	sp, #12
 800d314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d318:	bfbc      	itt	lt
 800d31a:	464b      	movlt	r3, r9
 800d31c:	46a1      	movlt	r9, r4
 800d31e:	4630      	mov	r0, r6
 800d320:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d324:	bfba      	itte	lt
 800d326:	461c      	movlt	r4, r3
 800d328:	2501      	movlt	r5, #1
 800d32a:	2500      	movge	r5, #0
 800d32c:	f7ff fd40 	bl	800cdb0 <_Balloc>
 800d330:	4602      	mov	r2, r0
 800d332:	b918      	cbnz	r0, 800d33c <__mdiff+0x60>
 800d334:	4b31      	ldr	r3, [pc, #196]	@ (800d3fc <__mdiff+0x120>)
 800d336:	f240 2145 	movw	r1, #581	@ 0x245
 800d33a:	e7e3      	b.n	800d304 <__mdiff+0x28>
 800d33c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d340:	6926      	ldr	r6, [r4, #16]
 800d342:	60c5      	str	r5, [r0, #12]
 800d344:	f109 0310 	add.w	r3, r9, #16
 800d348:	f109 0514 	add.w	r5, r9, #20
 800d34c:	f104 0e14 	add.w	lr, r4, #20
 800d350:	f100 0b14 	add.w	fp, r0, #20
 800d354:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d358:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d35c:	9301      	str	r3, [sp, #4]
 800d35e:	46d9      	mov	r9, fp
 800d360:	f04f 0c00 	mov.w	ip, #0
 800d364:	9b01      	ldr	r3, [sp, #4]
 800d366:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d36a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	fa1f f38a 	uxth.w	r3, sl
 800d374:	4619      	mov	r1, r3
 800d376:	b283      	uxth	r3, r0
 800d378:	1acb      	subs	r3, r1, r3
 800d37a:	0c00      	lsrs	r0, r0, #16
 800d37c:	4463      	add	r3, ip
 800d37e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d382:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d386:	b29b      	uxth	r3, r3
 800d388:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d38c:	4576      	cmp	r6, lr
 800d38e:	f849 3b04 	str.w	r3, [r9], #4
 800d392:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d396:	d8e5      	bhi.n	800d364 <__mdiff+0x88>
 800d398:	1b33      	subs	r3, r6, r4
 800d39a:	3b15      	subs	r3, #21
 800d39c:	f023 0303 	bic.w	r3, r3, #3
 800d3a0:	3415      	adds	r4, #21
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	42a6      	cmp	r6, r4
 800d3a6:	bf38      	it	cc
 800d3a8:	2304      	movcc	r3, #4
 800d3aa:	441d      	add	r5, r3
 800d3ac:	445b      	add	r3, fp
 800d3ae:	461e      	mov	r6, r3
 800d3b0:	462c      	mov	r4, r5
 800d3b2:	4544      	cmp	r4, r8
 800d3b4:	d30e      	bcc.n	800d3d4 <__mdiff+0xf8>
 800d3b6:	f108 0103 	add.w	r1, r8, #3
 800d3ba:	1b49      	subs	r1, r1, r5
 800d3bc:	f021 0103 	bic.w	r1, r1, #3
 800d3c0:	3d03      	subs	r5, #3
 800d3c2:	45a8      	cmp	r8, r5
 800d3c4:	bf38      	it	cc
 800d3c6:	2100      	movcc	r1, #0
 800d3c8:	440b      	add	r3, r1
 800d3ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3ce:	b191      	cbz	r1, 800d3f6 <__mdiff+0x11a>
 800d3d0:	6117      	str	r7, [r2, #16]
 800d3d2:	e79d      	b.n	800d310 <__mdiff+0x34>
 800d3d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d3d8:	46e6      	mov	lr, ip
 800d3da:	0c08      	lsrs	r0, r1, #16
 800d3dc:	fa1c fc81 	uxtah	ip, ip, r1
 800d3e0:	4471      	add	r1, lr
 800d3e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d3e6:	b289      	uxth	r1, r1
 800d3e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d3ec:	f846 1b04 	str.w	r1, [r6], #4
 800d3f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3f4:	e7dd      	b.n	800d3b2 <__mdiff+0xd6>
 800d3f6:	3f01      	subs	r7, #1
 800d3f8:	e7e7      	b.n	800d3ca <__mdiff+0xee>
 800d3fa:	bf00      	nop
 800d3fc:	0800e348 	.word	0x0800e348
 800d400:	0800e359 	.word	0x0800e359

0800d404 <__d2b>:
 800d404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d408:	460f      	mov	r7, r1
 800d40a:	2101      	movs	r1, #1
 800d40c:	ec59 8b10 	vmov	r8, r9, d0
 800d410:	4616      	mov	r6, r2
 800d412:	f7ff fccd 	bl	800cdb0 <_Balloc>
 800d416:	4604      	mov	r4, r0
 800d418:	b930      	cbnz	r0, 800d428 <__d2b+0x24>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4b23      	ldr	r3, [pc, #140]	@ (800d4ac <__d2b+0xa8>)
 800d41e:	4824      	ldr	r0, [pc, #144]	@ (800d4b0 <__d2b+0xac>)
 800d420:	f240 310f 	movw	r1, #783	@ 0x30f
 800d424:	f000 fa74 	bl	800d910 <__assert_func>
 800d428:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d42c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d430:	b10d      	cbz	r5, 800d436 <__d2b+0x32>
 800d432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	f1b8 0300 	subs.w	r3, r8, #0
 800d43c:	d023      	beq.n	800d486 <__d2b+0x82>
 800d43e:	4668      	mov	r0, sp
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	f7ff fd7c 	bl	800cf3e <__lo0bits>
 800d446:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d44a:	b1d0      	cbz	r0, 800d482 <__d2b+0x7e>
 800d44c:	f1c0 0320 	rsb	r3, r0, #32
 800d450:	fa02 f303 	lsl.w	r3, r2, r3
 800d454:	430b      	orrs	r3, r1
 800d456:	40c2      	lsrs	r2, r0
 800d458:	6163      	str	r3, [r4, #20]
 800d45a:	9201      	str	r2, [sp, #4]
 800d45c:	9b01      	ldr	r3, [sp, #4]
 800d45e:	61a3      	str	r3, [r4, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	bf0c      	ite	eq
 800d464:	2201      	moveq	r2, #1
 800d466:	2202      	movne	r2, #2
 800d468:	6122      	str	r2, [r4, #16]
 800d46a:	b1a5      	cbz	r5, 800d496 <__d2b+0x92>
 800d46c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d470:	4405      	add	r5, r0
 800d472:	603d      	str	r5, [r7, #0]
 800d474:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d478:	6030      	str	r0, [r6, #0]
 800d47a:	4620      	mov	r0, r4
 800d47c:	b003      	add	sp, #12
 800d47e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d482:	6161      	str	r1, [r4, #20]
 800d484:	e7ea      	b.n	800d45c <__d2b+0x58>
 800d486:	a801      	add	r0, sp, #4
 800d488:	f7ff fd59 	bl	800cf3e <__lo0bits>
 800d48c:	9b01      	ldr	r3, [sp, #4]
 800d48e:	6163      	str	r3, [r4, #20]
 800d490:	3020      	adds	r0, #32
 800d492:	2201      	movs	r2, #1
 800d494:	e7e8      	b.n	800d468 <__d2b+0x64>
 800d496:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d49a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d49e:	6038      	str	r0, [r7, #0]
 800d4a0:	6918      	ldr	r0, [r3, #16]
 800d4a2:	f7ff fd2d 	bl	800cf00 <__hi0bits>
 800d4a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4aa:	e7e5      	b.n	800d478 <__d2b+0x74>
 800d4ac:	0800e348 	.word	0x0800e348
 800d4b0:	0800e359 	.word	0x0800e359

0800d4b4 <__ssputs_r>:
 800d4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4b8:	688e      	ldr	r6, [r1, #8]
 800d4ba:	461f      	mov	r7, r3
 800d4bc:	42be      	cmp	r6, r7
 800d4be:	680b      	ldr	r3, [r1, #0]
 800d4c0:	4682      	mov	sl, r0
 800d4c2:	460c      	mov	r4, r1
 800d4c4:	4690      	mov	r8, r2
 800d4c6:	d82d      	bhi.n	800d524 <__ssputs_r+0x70>
 800d4c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4d0:	d026      	beq.n	800d520 <__ssputs_r+0x6c>
 800d4d2:	6965      	ldr	r5, [r4, #20]
 800d4d4:	6909      	ldr	r1, [r1, #16]
 800d4d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4da:	eba3 0901 	sub.w	r9, r3, r1
 800d4de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4e2:	1c7b      	adds	r3, r7, #1
 800d4e4:	444b      	add	r3, r9
 800d4e6:	106d      	asrs	r5, r5, #1
 800d4e8:	429d      	cmp	r5, r3
 800d4ea:	bf38      	it	cc
 800d4ec:	461d      	movcc	r5, r3
 800d4ee:	0553      	lsls	r3, r2, #21
 800d4f0:	d527      	bpl.n	800d542 <__ssputs_r+0x8e>
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	f7ff fbd0 	bl	800cc98 <_malloc_r>
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	b360      	cbz	r0, 800d556 <__ssputs_r+0xa2>
 800d4fc:	6921      	ldr	r1, [r4, #16]
 800d4fe:	464a      	mov	r2, r9
 800d500:	f7fe fcf9 	bl	800bef6 <memcpy>
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d50e:	81a3      	strh	r3, [r4, #12]
 800d510:	6126      	str	r6, [r4, #16]
 800d512:	6165      	str	r5, [r4, #20]
 800d514:	444e      	add	r6, r9
 800d516:	eba5 0509 	sub.w	r5, r5, r9
 800d51a:	6026      	str	r6, [r4, #0]
 800d51c:	60a5      	str	r5, [r4, #8]
 800d51e:	463e      	mov	r6, r7
 800d520:	42be      	cmp	r6, r7
 800d522:	d900      	bls.n	800d526 <__ssputs_r+0x72>
 800d524:	463e      	mov	r6, r7
 800d526:	6820      	ldr	r0, [r4, #0]
 800d528:	4632      	mov	r2, r6
 800d52a:	4641      	mov	r1, r8
 800d52c:	f000 f9c6 	bl	800d8bc <memmove>
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	1b9b      	subs	r3, r3, r6
 800d534:	60a3      	str	r3, [r4, #8]
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4433      	add	r3, r6
 800d53a:	6023      	str	r3, [r4, #0]
 800d53c:	2000      	movs	r0, #0
 800d53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d542:	462a      	mov	r2, r5
 800d544:	f000 fa28 	bl	800d998 <_realloc_r>
 800d548:	4606      	mov	r6, r0
 800d54a:	2800      	cmp	r0, #0
 800d54c:	d1e0      	bne.n	800d510 <__ssputs_r+0x5c>
 800d54e:	6921      	ldr	r1, [r4, #16]
 800d550:	4650      	mov	r0, sl
 800d552:	f7ff fb2d 	bl	800cbb0 <_free_r>
 800d556:	230c      	movs	r3, #12
 800d558:	f8ca 3000 	str.w	r3, [sl]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	e7e9      	b.n	800d53e <__ssputs_r+0x8a>
	...

0800d56c <_svfiprintf_r>:
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4698      	mov	r8, r3
 800d572:	898b      	ldrh	r3, [r1, #12]
 800d574:	061b      	lsls	r3, r3, #24
 800d576:	b09d      	sub	sp, #116	@ 0x74
 800d578:	4607      	mov	r7, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	4614      	mov	r4, r2
 800d57e:	d510      	bpl.n	800d5a2 <_svfiprintf_r+0x36>
 800d580:	690b      	ldr	r3, [r1, #16]
 800d582:	b973      	cbnz	r3, 800d5a2 <_svfiprintf_r+0x36>
 800d584:	2140      	movs	r1, #64	@ 0x40
 800d586:	f7ff fb87 	bl	800cc98 <_malloc_r>
 800d58a:	6028      	str	r0, [r5, #0]
 800d58c:	6128      	str	r0, [r5, #16]
 800d58e:	b930      	cbnz	r0, 800d59e <_svfiprintf_r+0x32>
 800d590:	230c      	movs	r3, #12
 800d592:	603b      	str	r3, [r7, #0]
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	b01d      	add	sp, #116	@ 0x74
 800d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59e:	2340      	movs	r3, #64	@ 0x40
 800d5a0:	616b      	str	r3, [r5, #20]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5a6:	2320      	movs	r3, #32
 800d5a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b0:	2330      	movs	r3, #48	@ 0x30
 800d5b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d750 <_svfiprintf_r+0x1e4>
 800d5b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ba:	f04f 0901 	mov.w	r9, #1
 800d5be:	4623      	mov	r3, r4
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5c6:	b10a      	cbz	r2, 800d5cc <_svfiprintf_r+0x60>
 800d5c8:	2a25      	cmp	r2, #37	@ 0x25
 800d5ca:	d1f9      	bne.n	800d5c0 <_svfiprintf_r+0x54>
 800d5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d0:	d00b      	beq.n	800d5ea <_svfiprintf_r+0x7e>
 800d5d2:	465b      	mov	r3, fp
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	4638      	mov	r0, r7
 800d5da:	f7ff ff6b 	bl	800d4b4 <__ssputs_r>
 800d5de:	3001      	adds	r0, #1
 800d5e0:	f000 80a7 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5e6:	445a      	add	r2, fp
 800d5e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 809f 	beq.w	800d732 <_svfiprintf_r+0x1c6>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5fe:	f10a 0a01 	add.w	sl, sl, #1
 800d602:	9304      	str	r3, [sp, #16]
 800d604:	9307      	str	r3, [sp, #28]
 800d606:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d60a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d60c:	4654      	mov	r4, sl
 800d60e:	2205      	movs	r2, #5
 800d610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d614:	484e      	ldr	r0, [pc, #312]	@ (800d750 <_svfiprintf_r+0x1e4>)
 800d616:	f7f2 fe03 	bl	8000220 <memchr>
 800d61a:	9a04      	ldr	r2, [sp, #16]
 800d61c:	b9d8      	cbnz	r0, 800d656 <_svfiprintf_r+0xea>
 800d61e:	06d0      	lsls	r0, r2, #27
 800d620:	bf44      	itt	mi
 800d622:	2320      	movmi	r3, #32
 800d624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d628:	0711      	lsls	r1, r2, #28
 800d62a:	bf44      	itt	mi
 800d62c:	232b      	movmi	r3, #43	@ 0x2b
 800d62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d632:	f89a 3000 	ldrb.w	r3, [sl]
 800d636:	2b2a      	cmp	r3, #42	@ 0x2a
 800d638:	d015      	beq.n	800d666 <_svfiprintf_r+0xfa>
 800d63a:	9a07      	ldr	r2, [sp, #28]
 800d63c:	4654      	mov	r4, sl
 800d63e:	2000      	movs	r0, #0
 800d640:	f04f 0c0a 	mov.w	ip, #10
 800d644:	4621      	mov	r1, r4
 800d646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64a:	3b30      	subs	r3, #48	@ 0x30
 800d64c:	2b09      	cmp	r3, #9
 800d64e:	d94b      	bls.n	800d6e8 <_svfiprintf_r+0x17c>
 800d650:	b1b0      	cbz	r0, 800d680 <_svfiprintf_r+0x114>
 800d652:	9207      	str	r2, [sp, #28]
 800d654:	e014      	b.n	800d680 <_svfiprintf_r+0x114>
 800d656:	eba0 0308 	sub.w	r3, r0, r8
 800d65a:	fa09 f303 	lsl.w	r3, r9, r3
 800d65e:	4313      	orrs	r3, r2
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	46a2      	mov	sl, r4
 800d664:	e7d2      	b.n	800d60c <_svfiprintf_r+0xa0>
 800d666:	9b03      	ldr	r3, [sp, #12]
 800d668:	1d19      	adds	r1, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9103      	str	r1, [sp, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	bfbb      	ittet	lt
 800d672:	425b      	neglt	r3, r3
 800d674:	f042 0202 	orrlt.w	r2, r2, #2
 800d678:	9307      	strge	r3, [sp, #28]
 800d67a:	9307      	strlt	r3, [sp, #28]
 800d67c:	bfb8      	it	lt
 800d67e:	9204      	strlt	r2, [sp, #16]
 800d680:	7823      	ldrb	r3, [r4, #0]
 800d682:	2b2e      	cmp	r3, #46	@ 0x2e
 800d684:	d10a      	bne.n	800d69c <_svfiprintf_r+0x130>
 800d686:	7863      	ldrb	r3, [r4, #1]
 800d688:	2b2a      	cmp	r3, #42	@ 0x2a
 800d68a:	d132      	bne.n	800d6f2 <_svfiprintf_r+0x186>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	1d1a      	adds	r2, r3, #4
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	9203      	str	r2, [sp, #12]
 800d694:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d698:	3402      	adds	r4, #2
 800d69a:	9305      	str	r3, [sp, #20]
 800d69c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d760 <_svfiprintf_r+0x1f4>
 800d6a0:	7821      	ldrb	r1, [r4, #0]
 800d6a2:	2203      	movs	r2, #3
 800d6a4:	4650      	mov	r0, sl
 800d6a6:	f7f2 fdbb 	bl	8000220 <memchr>
 800d6aa:	b138      	cbz	r0, 800d6bc <_svfiprintf_r+0x150>
 800d6ac:	9b04      	ldr	r3, [sp, #16]
 800d6ae:	eba0 000a 	sub.w	r0, r0, sl
 800d6b2:	2240      	movs	r2, #64	@ 0x40
 800d6b4:	4082      	lsls	r2, r0
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	3401      	adds	r4, #1
 800d6ba:	9304      	str	r3, [sp, #16]
 800d6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6c0:	4824      	ldr	r0, [pc, #144]	@ (800d754 <_svfiprintf_r+0x1e8>)
 800d6c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6c6:	2206      	movs	r2, #6
 800d6c8:	f7f2 fdaa 	bl	8000220 <memchr>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d036      	beq.n	800d73e <_svfiprintf_r+0x1d2>
 800d6d0:	4b21      	ldr	r3, [pc, #132]	@ (800d758 <_svfiprintf_r+0x1ec>)
 800d6d2:	bb1b      	cbnz	r3, 800d71c <_svfiprintf_r+0x1b0>
 800d6d4:	9b03      	ldr	r3, [sp, #12]
 800d6d6:	3307      	adds	r3, #7
 800d6d8:	f023 0307 	bic.w	r3, r3, #7
 800d6dc:	3308      	adds	r3, #8
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e2:	4433      	add	r3, r6
 800d6e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6e6:	e76a      	b.n	800d5be <_svfiprintf_r+0x52>
 800d6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6ec:	460c      	mov	r4, r1
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	e7a8      	b.n	800d644 <_svfiprintf_r+0xd8>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	3401      	adds	r4, #1
 800d6f6:	9305      	str	r3, [sp, #20]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	f04f 0c0a 	mov.w	ip, #10
 800d6fe:	4620      	mov	r0, r4
 800d700:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d704:	3a30      	subs	r2, #48	@ 0x30
 800d706:	2a09      	cmp	r2, #9
 800d708:	d903      	bls.n	800d712 <_svfiprintf_r+0x1a6>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0c6      	beq.n	800d69c <_svfiprintf_r+0x130>
 800d70e:	9105      	str	r1, [sp, #20]
 800d710:	e7c4      	b.n	800d69c <_svfiprintf_r+0x130>
 800d712:	fb0c 2101 	mla	r1, ip, r1, r2
 800d716:	4604      	mov	r4, r0
 800d718:	2301      	movs	r3, #1
 800d71a:	e7f0      	b.n	800d6fe <_svfiprintf_r+0x192>
 800d71c:	ab03      	add	r3, sp, #12
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	462a      	mov	r2, r5
 800d722:	4b0e      	ldr	r3, [pc, #56]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d724:	a904      	add	r1, sp, #16
 800d726:	4638      	mov	r0, r7
 800d728:	f7fd fe5e 	bl	800b3e8 <_printf_float>
 800d72c:	1c42      	adds	r2, r0, #1
 800d72e:	4606      	mov	r6, r0
 800d730:	d1d6      	bne.n	800d6e0 <_svfiprintf_r+0x174>
 800d732:	89ab      	ldrh	r3, [r5, #12]
 800d734:	065b      	lsls	r3, r3, #25
 800d736:	f53f af2d 	bmi.w	800d594 <_svfiprintf_r+0x28>
 800d73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d73c:	e72c      	b.n	800d598 <_svfiprintf_r+0x2c>
 800d73e:	ab03      	add	r3, sp, #12
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	462a      	mov	r2, r5
 800d744:	4b05      	ldr	r3, [pc, #20]	@ (800d75c <_svfiprintf_r+0x1f0>)
 800d746:	a904      	add	r1, sp, #16
 800d748:	4638      	mov	r0, r7
 800d74a:	f7fe f8e5 	bl	800b918 <_printf_i>
 800d74e:	e7ed      	b.n	800d72c <_svfiprintf_r+0x1c0>
 800d750:	0800e4b0 	.word	0x0800e4b0
 800d754:	0800e4ba 	.word	0x0800e4ba
 800d758:	0800b3e9 	.word	0x0800b3e9
 800d75c:	0800d4b5 	.word	0x0800d4b5
 800d760:	0800e4b6 	.word	0x0800e4b6

0800d764 <__sflush_r>:
 800d764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d76c:	0716      	lsls	r6, r2, #28
 800d76e:	4605      	mov	r5, r0
 800d770:	460c      	mov	r4, r1
 800d772:	d454      	bmi.n	800d81e <__sflush_r+0xba>
 800d774:	684b      	ldr	r3, [r1, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dc02      	bgt.n	800d780 <__sflush_r+0x1c>
 800d77a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd48      	ble.n	800d812 <__sflush_r+0xae>
 800d780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d782:	2e00      	cmp	r6, #0
 800d784:	d045      	beq.n	800d812 <__sflush_r+0xae>
 800d786:	2300      	movs	r3, #0
 800d788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d78c:	682f      	ldr	r7, [r5, #0]
 800d78e:	6a21      	ldr	r1, [r4, #32]
 800d790:	602b      	str	r3, [r5, #0]
 800d792:	d030      	beq.n	800d7f6 <__sflush_r+0x92>
 800d794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	0759      	lsls	r1, r3, #29
 800d79a:	d505      	bpl.n	800d7a8 <__sflush_r+0x44>
 800d79c:	6863      	ldr	r3, [r4, #4]
 800d79e:	1ad2      	subs	r2, r2, r3
 800d7a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a2:	b10b      	cbz	r3, 800d7a8 <__sflush_r+0x44>
 800d7a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	47b0      	blx	r6
 800d7b2:	1c43      	adds	r3, r0, #1
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	d106      	bne.n	800d7c6 <__sflush_r+0x62>
 800d7b8:	6829      	ldr	r1, [r5, #0]
 800d7ba:	291d      	cmp	r1, #29
 800d7bc:	d82b      	bhi.n	800d816 <__sflush_r+0xb2>
 800d7be:	4a2a      	ldr	r2, [pc, #168]	@ (800d868 <__sflush_r+0x104>)
 800d7c0:	410a      	asrs	r2, r1
 800d7c2:	07d6      	lsls	r6, r2, #31
 800d7c4:	d427      	bmi.n	800d816 <__sflush_r+0xb2>
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	6062      	str	r2, [r4, #4]
 800d7ca:	04d9      	lsls	r1, r3, #19
 800d7cc:	6922      	ldr	r2, [r4, #16]
 800d7ce:	6022      	str	r2, [r4, #0]
 800d7d0:	d504      	bpl.n	800d7dc <__sflush_r+0x78>
 800d7d2:	1c42      	adds	r2, r0, #1
 800d7d4:	d101      	bne.n	800d7da <__sflush_r+0x76>
 800d7d6:	682b      	ldr	r3, [r5, #0]
 800d7d8:	b903      	cbnz	r3, 800d7dc <__sflush_r+0x78>
 800d7da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7de:	602f      	str	r7, [r5, #0]
 800d7e0:	b1b9      	cbz	r1, 800d812 <__sflush_r+0xae>
 800d7e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7e6:	4299      	cmp	r1, r3
 800d7e8:	d002      	beq.n	800d7f0 <__sflush_r+0x8c>
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7ff f9e0 	bl	800cbb0 <_free_r>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f4:	e00d      	b.n	800d812 <__sflush_r+0xae>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	47b0      	blx	r6
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	1c50      	adds	r0, r2, #1
 800d800:	d1c9      	bne.n	800d796 <__sflush_r+0x32>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c6      	beq.n	800d796 <__sflush_r+0x32>
 800d808:	2b1d      	cmp	r3, #29
 800d80a:	d001      	beq.n	800d810 <__sflush_r+0xac>
 800d80c:	2b16      	cmp	r3, #22
 800d80e:	d11e      	bne.n	800d84e <__sflush_r+0xea>
 800d810:	602f      	str	r7, [r5, #0]
 800d812:	2000      	movs	r0, #0
 800d814:	e022      	b.n	800d85c <__sflush_r+0xf8>
 800d816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81a:	b21b      	sxth	r3, r3
 800d81c:	e01b      	b.n	800d856 <__sflush_r+0xf2>
 800d81e:	690f      	ldr	r7, [r1, #16]
 800d820:	2f00      	cmp	r7, #0
 800d822:	d0f6      	beq.n	800d812 <__sflush_r+0xae>
 800d824:	0793      	lsls	r3, r2, #30
 800d826:	680e      	ldr	r6, [r1, #0]
 800d828:	bf08      	it	eq
 800d82a:	694b      	ldreq	r3, [r1, #20]
 800d82c:	600f      	str	r7, [r1, #0]
 800d82e:	bf18      	it	ne
 800d830:	2300      	movne	r3, #0
 800d832:	eba6 0807 	sub.w	r8, r6, r7
 800d836:	608b      	str	r3, [r1, #8]
 800d838:	f1b8 0f00 	cmp.w	r8, #0
 800d83c:	dde9      	ble.n	800d812 <__sflush_r+0xae>
 800d83e:	6a21      	ldr	r1, [r4, #32]
 800d840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d842:	4643      	mov	r3, r8
 800d844:	463a      	mov	r2, r7
 800d846:	4628      	mov	r0, r5
 800d848:	47b0      	blx	r6
 800d84a:	2800      	cmp	r0, #0
 800d84c:	dc08      	bgt.n	800d860 <__sflush_r+0xfc>
 800d84e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d856:	81a3      	strh	r3, [r4, #12]
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d860:	4407      	add	r7, r0
 800d862:	eba8 0800 	sub.w	r8, r8, r0
 800d866:	e7e7      	b.n	800d838 <__sflush_r+0xd4>
 800d868:	dfbffffe 	.word	0xdfbffffe

0800d86c <_fflush_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	690b      	ldr	r3, [r1, #16]
 800d870:	4605      	mov	r5, r0
 800d872:	460c      	mov	r4, r1
 800d874:	b913      	cbnz	r3, 800d87c <_fflush_r+0x10>
 800d876:	2500      	movs	r5, #0
 800d878:	4628      	mov	r0, r5
 800d87a:	bd38      	pop	{r3, r4, r5, pc}
 800d87c:	b118      	cbz	r0, 800d886 <_fflush_r+0x1a>
 800d87e:	6a03      	ldr	r3, [r0, #32]
 800d880:	b90b      	cbnz	r3, 800d886 <_fflush_r+0x1a>
 800d882:	f7fe f9f5 	bl	800bc70 <__sinit>
 800d886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0f3      	beq.n	800d876 <_fflush_r+0xa>
 800d88e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d890:	07d0      	lsls	r0, r2, #31
 800d892:	d404      	bmi.n	800d89e <_fflush_r+0x32>
 800d894:	0599      	lsls	r1, r3, #22
 800d896:	d402      	bmi.n	800d89e <_fflush_r+0x32>
 800d898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89a:	f7fe fb22 	bl	800bee2 <__retarget_lock_acquire_recursive>
 800d89e:	4628      	mov	r0, r5
 800d8a0:	4621      	mov	r1, r4
 800d8a2:	f7ff ff5f 	bl	800d764 <__sflush_r>
 800d8a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8a8:	07da      	lsls	r2, r3, #31
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	d4e4      	bmi.n	800d878 <_fflush_r+0xc>
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	059b      	lsls	r3, r3, #22
 800d8b2:	d4e1      	bmi.n	800d878 <_fflush_r+0xc>
 800d8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8b6:	f7fe fb15 	bl	800bee4 <__retarget_lock_release_recursive>
 800d8ba:	e7dd      	b.n	800d878 <_fflush_r+0xc>

0800d8bc <memmove>:
 800d8bc:	4288      	cmp	r0, r1
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	eb01 0402 	add.w	r4, r1, r2
 800d8c4:	d902      	bls.n	800d8cc <memmove+0x10>
 800d8c6:	4284      	cmp	r4, r0
 800d8c8:	4623      	mov	r3, r4
 800d8ca:	d807      	bhi.n	800d8dc <memmove+0x20>
 800d8cc:	1e43      	subs	r3, r0, #1
 800d8ce:	42a1      	cmp	r1, r4
 800d8d0:	d008      	beq.n	800d8e4 <memmove+0x28>
 800d8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8da:	e7f8      	b.n	800d8ce <memmove+0x12>
 800d8dc:	4402      	add	r2, r0
 800d8de:	4601      	mov	r1, r0
 800d8e0:	428a      	cmp	r2, r1
 800d8e2:	d100      	bne.n	800d8e6 <memmove+0x2a>
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8ee:	e7f7      	b.n	800d8e0 <memmove+0x24>

0800d8f0 <_sbrk_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4d06      	ldr	r5, [pc, #24]	@ (800d90c <_sbrk_r+0x1c>)
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	4608      	mov	r0, r1
 800d8fa:	602b      	str	r3, [r5, #0]
 800d8fc:	f7f4 fab6 	bl	8001e6c <_sbrk>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d102      	bne.n	800d90a <_sbrk_r+0x1a>
 800d904:	682b      	ldr	r3, [r5, #0]
 800d906:	b103      	cbz	r3, 800d90a <_sbrk_r+0x1a>
 800d908:	6023      	str	r3, [r4, #0]
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	20004c98 	.word	0x20004c98

0800d910 <__assert_func>:
 800d910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d912:	4614      	mov	r4, r2
 800d914:	461a      	mov	r2, r3
 800d916:	4b09      	ldr	r3, [pc, #36]	@ (800d93c <__assert_func+0x2c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4605      	mov	r5, r0
 800d91c:	68d8      	ldr	r0, [r3, #12]
 800d91e:	b954      	cbnz	r4, 800d936 <__assert_func+0x26>
 800d920:	4b07      	ldr	r3, [pc, #28]	@ (800d940 <__assert_func+0x30>)
 800d922:	461c      	mov	r4, r3
 800d924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d928:	9100      	str	r1, [sp, #0]
 800d92a:	462b      	mov	r3, r5
 800d92c:	4905      	ldr	r1, [pc, #20]	@ (800d944 <__assert_func+0x34>)
 800d92e:	f000 f86f 	bl	800da10 <fiprintf>
 800d932:	f000 f87f 	bl	800da34 <abort>
 800d936:	4b04      	ldr	r3, [pc, #16]	@ (800d948 <__assert_func+0x38>)
 800d938:	e7f4      	b.n	800d924 <__assert_func+0x14>
 800d93a:	bf00      	nop
 800d93c:	20000190 	.word	0x20000190
 800d940:	0800e506 	.word	0x0800e506
 800d944:	0800e4d8 	.word	0x0800e4d8
 800d948:	0800e4cb 	.word	0x0800e4cb

0800d94c <_calloc_r>:
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	fba1 5402 	umull	r5, r4, r1, r2
 800d952:	b93c      	cbnz	r4, 800d964 <_calloc_r+0x18>
 800d954:	4629      	mov	r1, r5
 800d956:	f7ff f99f 	bl	800cc98 <_malloc_r>
 800d95a:	4606      	mov	r6, r0
 800d95c:	b928      	cbnz	r0, 800d96a <_calloc_r+0x1e>
 800d95e:	2600      	movs	r6, #0
 800d960:	4630      	mov	r0, r6
 800d962:	bd70      	pop	{r4, r5, r6, pc}
 800d964:	220c      	movs	r2, #12
 800d966:	6002      	str	r2, [r0, #0]
 800d968:	e7f9      	b.n	800d95e <_calloc_r+0x12>
 800d96a:	462a      	mov	r2, r5
 800d96c:	4621      	mov	r1, r4
 800d96e:	f7fe fa18 	bl	800bda2 <memset>
 800d972:	e7f5      	b.n	800d960 <_calloc_r+0x14>

0800d974 <__ascii_mbtowc>:
 800d974:	b082      	sub	sp, #8
 800d976:	b901      	cbnz	r1, 800d97a <__ascii_mbtowc+0x6>
 800d978:	a901      	add	r1, sp, #4
 800d97a:	b142      	cbz	r2, 800d98e <__ascii_mbtowc+0x1a>
 800d97c:	b14b      	cbz	r3, 800d992 <__ascii_mbtowc+0x1e>
 800d97e:	7813      	ldrb	r3, [r2, #0]
 800d980:	600b      	str	r3, [r1, #0]
 800d982:	7812      	ldrb	r2, [r2, #0]
 800d984:	1e10      	subs	r0, r2, #0
 800d986:	bf18      	it	ne
 800d988:	2001      	movne	r0, #1
 800d98a:	b002      	add	sp, #8
 800d98c:	4770      	bx	lr
 800d98e:	4610      	mov	r0, r2
 800d990:	e7fb      	b.n	800d98a <__ascii_mbtowc+0x16>
 800d992:	f06f 0001 	mvn.w	r0, #1
 800d996:	e7f8      	b.n	800d98a <__ascii_mbtowc+0x16>

0800d998 <_realloc_r>:
 800d998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d99c:	4680      	mov	r8, r0
 800d99e:	4615      	mov	r5, r2
 800d9a0:	460c      	mov	r4, r1
 800d9a2:	b921      	cbnz	r1, 800d9ae <_realloc_r+0x16>
 800d9a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a8:	4611      	mov	r1, r2
 800d9aa:	f7ff b975 	b.w	800cc98 <_malloc_r>
 800d9ae:	b92a      	cbnz	r2, 800d9bc <_realloc_r+0x24>
 800d9b0:	f7ff f8fe 	bl	800cbb0 <_free_r>
 800d9b4:	2400      	movs	r4, #0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9bc:	f000 f841 	bl	800da42 <_malloc_usable_size_r>
 800d9c0:	4285      	cmp	r5, r0
 800d9c2:	4606      	mov	r6, r0
 800d9c4:	d802      	bhi.n	800d9cc <_realloc_r+0x34>
 800d9c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9ca:	d8f4      	bhi.n	800d9b6 <_realloc_r+0x1e>
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	4640      	mov	r0, r8
 800d9d0:	f7ff f962 	bl	800cc98 <_malloc_r>
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d0ec      	beq.n	800d9b4 <_realloc_r+0x1c>
 800d9da:	42b5      	cmp	r5, r6
 800d9dc:	462a      	mov	r2, r5
 800d9de:	4621      	mov	r1, r4
 800d9e0:	bf28      	it	cs
 800d9e2:	4632      	movcs	r2, r6
 800d9e4:	f7fe fa87 	bl	800bef6 <memcpy>
 800d9e8:	4621      	mov	r1, r4
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	f7ff f8e0 	bl	800cbb0 <_free_r>
 800d9f0:	463c      	mov	r4, r7
 800d9f2:	e7e0      	b.n	800d9b6 <_realloc_r+0x1e>

0800d9f4 <__ascii_wctomb>:
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	b141      	cbz	r1, 800da0c <__ascii_wctomb+0x18>
 800d9fa:	2aff      	cmp	r2, #255	@ 0xff
 800d9fc:	d904      	bls.n	800da08 <__ascii_wctomb+0x14>
 800d9fe:	228a      	movs	r2, #138	@ 0x8a
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	4770      	bx	lr
 800da08:	700a      	strb	r2, [r1, #0]
 800da0a:	2001      	movs	r0, #1
 800da0c:	4770      	bx	lr
	...

0800da10 <fiprintf>:
 800da10:	b40e      	push	{r1, r2, r3}
 800da12:	b503      	push	{r0, r1, lr}
 800da14:	4601      	mov	r1, r0
 800da16:	ab03      	add	r3, sp, #12
 800da18:	4805      	ldr	r0, [pc, #20]	@ (800da30 <fiprintf+0x20>)
 800da1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da1e:	6800      	ldr	r0, [r0, #0]
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	f000 f83f 	bl	800daa4 <_vfiprintf_r>
 800da26:	b002      	add	sp, #8
 800da28:	f85d eb04 	ldr.w	lr, [sp], #4
 800da2c:	b003      	add	sp, #12
 800da2e:	4770      	bx	lr
 800da30:	20000190 	.word	0x20000190

0800da34 <abort>:
 800da34:	b508      	push	{r3, lr}
 800da36:	2006      	movs	r0, #6
 800da38:	f000 fa08 	bl	800de4c <raise>
 800da3c:	2001      	movs	r0, #1
 800da3e:	f7f4 f99d 	bl	8001d7c <_exit>

0800da42 <_malloc_usable_size_r>:
 800da42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da46:	1f18      	subs	r0, r3, #4
 800da48:	2b00      	cmp	r3, #0
 800da4a:	bfbc      	itt	lt
 800da4c:	580b      	ldrlt	r3, [r1, r0]
 800da4e:	18c0      	addlt	r0, r0, r3
 800da50:	4770      	bx	lr

0800da52 <__sfputc_r>:
 800da52:	6893      	ldr	r3, [r2, #8]
 800da54:	3b01      	subs	r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	b410      	push	{r4}
 800da5a:	6093      	str	r3, [r2, #8]
 800da5c:	da08      	bge.n	800da70 <__sfputc_r+0x1e>
 800da5e:	6994      	ldr	r4, [r2, #24]
 800da60:	42a3      	cmp	r3, r4
 800da62:	db01      	blt.n	800da68 <__sfputc_r+0x16>
 800da64:	290a      	cmp	r1, #10
 800da66:	d103      	bne.n	800da70 <__sfputc_r+0x1e>
 800da68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da6c:	f000 b932 	b.w	800dcd4 <__swbuf_r>
 800da70:	6813      	ldr	r3, [r2, #0]
 800da72:	1c58      	adds	r0, r3, #1
 800da74:	6010      	str	r0, [r2, #0]
 800da76:	7019      	strb	r1, [r3, #0]
 800da78:	4608      	mov	r0, r1
 800da7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <__sfputs_r>:
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	4606      	mov	r6, r0
 800da84:	460f      	mov	r7, r1
 800da86:	4614      	mov	r4, r2
 800da88:	18d5      	adds	r5, r2, r3
 800da8a:	42ac      	cmp	r4, r5
 800da8c:	d101      	bne.n	800da92 <__sfputs_r+0x12>
 800da8e:	2000      	movs	r0, #0
 800da90:	e007      	b.n	800daa2 <__sfputs_r+0x22>
 800da92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da96:	463a      	mov	r2, r7
 800da98:	4630      	mov	r0, r6
 800da9a:	f7ff ffda 	bl	800da52 <__sfputc_r>
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	d1f3      	bne.n	800da8a <__sfputs_r+0xa>
 800daa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800daa4 <_vfiprintf_r>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	460d      	mov	r5, r1
 800daaa:	b09d      	sub	sp, #116	@ 0x74
 800daac:	4614      	mov	r4, r2
 800daae:	4698      	mov	r8, r3
 800dab0:	4606      	mov	r6, r0
 800dab2:	b118      	cbz	r0, 800dabc <_vfiprintf_r+0x18>
 800dab4:	6a03      	ldr	r3, [r0, #32]
 800dab6:	b90b      	cbnz	r3, 800dabc <_vfiprintf_r+0x18>
 800dab8:	f7fe f8da 	bl	800bc70 <__sinit>
 800dabc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d405      	bmi.n	800dace <_vfiprintf_r+0x2a>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	059a      	lsls	r2, r3, #22
 800dac6:	d402      	bmi.n	800dace <_vfiprintf_r+0x2a>
 800dac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daca:	f7fe fa0a 	bl	800bee2 <__retarget_lock_acquire_recursive>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	071b      	lsls	r3, r3, #28
 800dad2:	d501      	bpl.n	800dad8 <_vfiprintf_r+0x34>
 800dad4:	692b      	ldr	r3, [r5, #16]
 800dad6:	b99b      	cbnz	r3, 800db00 <_vfiprintf_r+0x5c>
 800dad8:	4629      	mov	r1, r5
 800dada:	4630      	mov	r0, r6
 800dadc:	f000 f938 	bl	800dd50 <__swsetup_r>
 800dae0:	b170      	cbz	r0, 800db00 <_vfiprintf_r+0x5c>
 800dae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dae4:	07dc      	lsls	r4, r3, #31
 800dae6:	d504      	bpl.n	800daf2 <_vfiprintf_r+0x4e>
 800dae8:	f04f 30ff 	mov.w	r0, #4294967295
 800daec:	b01d      	add	sp, #116	@ 0x74
 800daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf2:	89ab      	ldrh	r3, [r5, #12]
 800daf4:	0598      	lsls	r0, r3, #22
 800daf6:	d4f7      	bmi.n	800dae8 <_vfiprintf_r+0x44>
 800daf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dafa:	f7fe f9f3 	bl	800bee4 <__retarget_lock_release_recursive>
 800dafe:	e7f3      	b.n	800dae8 <_vfiprintf_r+0x44>
 800db00:	2300      	movs	r3, #0
 800db02:	9309      	str	r3, [sp, #36]	@ 0x24
 800db04:	2320      	movs	r3, #32
 800db06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800db0e:	2330      	movs	r3, #48	@ 0x30
 800db10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dcc0 <_vfiprintf_r+0x21c>
 800db14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db18:	f04f 0901 	mov.w	r9, #1
 800db1c:	4623      	mov	r3, r4
 800db1e:	469a      	mov	sl, r3
 800db20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db24:	b10a      	cbz	r2, 800db2a <_vfiprintf_r+0x86>
 800db26:	2a25      	cmp	r2, #37	@ 0x25
 800db28:	d1f9      	bne.n	800db1e <_vfiprintf_r+0x7a>
 800db2a:	ebba 0b04 	subs.w	fp, sl, r4
 800db2e:	d00b      	beq.n	800db48 <_vfiprintf_r+0xa4>
 800db30:	465b      	mov	r3, fp
 800db32:	4622      	mov	r2, r4
 800db34:	4629      	mov	r1, r5
 800db36:	4630      	mov	r0, r6
 800db38:	f7ff ffa2 	bl	800da80 <__sfputs_r>
 800db3c:	3001      	adds	r0, #1
 800db3e:	f000 80a7 	beq.w	800dc90 <_vfiprintf_r+0x1ec>
 800db42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db44:	445a      	add	r2, fp
 800db46:	9209      	str	r2, [sp, #36]	@ 0x24
 800db48:	f89a 3000 	ldrb.w	r3, [sl]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 809f 	beq.w	800dc90 <_vfiprintf_r+0x1ec>
 800db52:	2300      	movs	r3, #0
 800db54:	f04f 32ff 	mov.w	r2, #4294967295
 800db58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db5c:	f10a 0a01 	add.w	sl, sl, #1
 800db60:	9304      	str	r3, [sp, #16]
 800db62:	9307      	str	r3, [sp, #28]
 800db64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db68:	931a      	str	r3, [sp, #104]	@ 0x68
 800db6a:	4654      	mov	r4, sl
 800db6c:	2205      	movs	r2, #5
 800db6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db72:	4853      	ldr	r0, [pc, #332]	@ (800dcc0 <_vfiprintf_r+0x21c>)
 800db74:	f7f2 fb54 	bl	8000220 <memchr>
 800db78:	9a04      	ldr	r2, [sp, #16]
 800db7a:	b9d8      	cbnz	r0, 800dbb4 <_vfiprintf_r+0x110>
 800db7c:	06d1      	lsls	r1, r2, #27
 800db7e:	bf44      	itt	mi
 800db80:	2320      	movmi	r3, #32
 800db82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db86:	0713      	lsls	r3, r2, #28
 800db88:	bf44      	itt	mi
 800db8a:	232b      	movmi	r3, #43	@ 0x2b
 800db8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db90:	f89a 3000 	ldrb.w	r3, [sl]
 800db94:	2b2a      	cmp	r3, #42	@ 0x2a
 800db96:	d015      	beq.n	800dbc4 <_vfiprintf_r+0x120>
 800db98:	9a07      	ldr	r2, [sp, #28]
 800db9a:	4654      	mov	r4, sl
 800db9c:	2000      	movs	r0, #0
 800db9e:	f04f 0c0a 	mov.w	ip, #10
 800dba2:	4621      	mov	r1, r4
 800dba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dba8:	3b30      	subs	r3, #48	@ 0x30
 800dbaa:	2b09      	cmp	r3, #9
 800dbac:	d94b      	bls.n	800dc46 <_vfiprintf_r+0x1a2>
 800dbae:	b1b0      	cbz	r0, 800dbde <_vfiprintf_r+0x13a>
 800dbb0:	9207      	str	r2, [sp, #28]
 800dbb2:	e014      	b.n	800dbde <_vfiprintf_r+0x13a>
 800dbb4:	eba0 0308 	sub.w	r3, r0, r8
 800dbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	46a2      	mov	sl, r4
 800dbc2:	e7d2      	b.n	800db6a <_vfiprintf_r+0xc6>
 800dbc4:	9b03      	ldr	r3, [sp, #12]
 800dbc6:	1d19      	adds	r1, r3, #4
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	9103      	str	r1, [sp, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	bfbb      	ittet	lt
 800dbd0:	425b      	neglt	r3, r3
 800dbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800dbd6:	9307      	strge	r3, [sp, #28]
 800dbd8:	9307      	strlt	r3, [sp, #28]
 800dbda:	bfb8      	it	lt
 800dbdc:	9204      	strlt	r2, [sp, #16]
 800dbde:	7823      	ldrb	r3, [r4, #0]
 800dbe0:	2b2e      	cmp	r3, #46	@ 0x2e
 800dbe2:	d10a      	bne.n	800dbfa <_vfiprintf_r+0x156>
 800dbe4:	7863      	ldrb	r3, [r4, #1]
 800dbe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbe8:	d132      	bne.n	800dc50 <_vfiprintf_r+0x1ac>
 800dbea:	9b03      	ldr	r3, [sp, #12]
 800dbec:	1d1a      	adds	r2, r3, #4
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	9203      	str	r2, [sp, #12]
 800dbf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbf6:	3402      	adds	r4, #2
 800dbf8:	9305      	str	r3, [sp, #20]
 800dbfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dcd0 <_vfiprintf_r+0x22c>
 800dbfe:	7821      	ldrb	r1, [r4, #0]
 800dc00:	2203      	movs	r2, #3
 800dc02:	4650      	mov	r0, sl
 800dc04:	f7f2 fb0c 	bl	8000220 <memchr>
 800dc08:	b138      	cbz	r0, 800dc1a <_vfiprintf_r+0x176>
 800dc0a:	9b04      	ldr	r3, [sp, #16]
 800dc0c:	eba0 000a 	sub.w	r0, r0, sl
 800dc10:	2240      	movs	r2, #64	@ 0x40
 800dc12:	4082      	lsls	r2, r0
 800dc14:	4313      	orrs	r3, r2
 800dc16:	3401      	adds	r4, #1
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1e:	4829      	ldr	r0, [pc, #164]	@ (800dcc4 <_vfiprintf_r+0x220>)
 800dc20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc24:	2206      	movs	r2, #6
 800dc26:	f7f2 fafb 	bl	8000220 <memchr>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d03f      	beq.n	800dcae <_vfiprintf_r+0x20a>
 800dc2e:	4b26      	ldr	r3, [pc, #152]	@ (800dcc8 <_vfiprintf_r+0x224>)
 800dc30:	bb1b      	cbnz	r3, 800dc7a <_vfiprintf_r+0x1d6>
 800dc32:	9b03      	ldr	r3, [sp, #12]
 800dc34:	3307      	adds	r3, #7
 800dc36:	f023 0307 	bic.w	r3, r3, #7
 800dc3a:	3308      	adds	r3, #8
 800dc3c:	9303      	str	r3, [sp, #12]
 800dc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc40:	443b      	add	r3, r7
 800dc42:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc44:	e76a      	b.n	800db1c <_vfiprintf_r+0x78>
 800dc46:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc4a:	460c      	mov	r4, r1
 800dc4c:	2001      	movs	r0, #1
 800dc4e:	e7a8      	b.n	800dba2 <_vfiprintf_r+0xfe>
 800dc50:	2300      	movs	r3, #0
 800dc52:	3401      	adds	r4, #1
 800dc54:	9305      	str	r3, [sp, #20]
 800dc56:	4619      	mov	r1, r3
 800dc58:	f04f 0c0a 	mov.w	ip, #10
 800dc5c:	4620      	mov	r0, r4
 800dc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc62:	3a30      	subs	r2, #48	@ 0x30
 800dc64:	2a09      	cmp	r2, #9
 800dc66:	d903      	bls.n	800dc70 <_vfiprintf_r+0x1cc>
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0c6      	beq.n	800dbfa <_vfiprintf_r+0x156>
 800dc6c:	9105      	str	r1, [sp, #20]
 800dc6e:	e7c4      	b.n	800dbfa <_vfiprintf_r+0x156>
 800dc70:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc74:	4604      	mov	r4, r0
 800dc76:	2301      	movs	r3, #1
 800dc78:	e7f0      	b.n	800dc5c <_vfiprintf_r+0x1b8>
 800dc7a:	ab03      	add	r3, sp, #12
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	462a      	mov	r2, r5
 800dc80:	4b12      	ldr	r3, [pc, #72]	@ (800dccc <_vfiprintf_r+0x228>)
 800dc82:	a904      	add	r1, sp, #16
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7fd fbaf 	bl	800b3e8 <_printf_float>
 800dc8a:	4607      	mov	r7, r0
 800dc8c:	1c78      	adds	r0, r7, #1
 800dc8e:	d1d6      	bne.n	800dc3e <_vfiprintf_r+0x19a>
 800dc90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc92:	07d9      	lsls	r1, r3, #31
 800dc94:	d405      	bmi.n	800dca2 <_vfiprintf_r+0x1fe>
 800dc96:	89ab      	ldrh	r3, [r5, #12]
 800dc98:	059a      	lsls	r2, r3, #22
 800dc9a:	d402      	bmi.n	800dca2 <_vfiprintf_r+0x1fe>
 800dc9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc9e:	f7fe f921 	bl	800bee4 <__retarget_lock_release_recursive>
 800dca2:	89ab      	ldrh	r3, [r5, #12]
 800dca4:	065b      	lsls	r3, r3, #25
 800dca6:	f53f af1f 	bmi.w	800dae8 <_vfiprintf_r+0x44>
 800dcaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcac:	e71e      	b.n	800daec <_vfiprintf_r+0x48>
 800dcae:	ab03      	add	r3, sp, #12
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	462a      	mov	r2, r5
 800dcb4:	4b05      	ldr	r3, [pc, #20]	@ (800dccc <_vfiprintf_r+0x228>)
 800dcb6:	a904      	add	r1, sp, #16
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f7fd fe2d 	bl	800b918 <_printf_i>
 800dcbe:	e7e4      	b.n	800dc8a <_vfiprintf_r+0x1e6>
 800dcc0:	0800e4b0 	.word	0x0800e4b0
 800dcc4:	0800e4ba 	.word	0x0800e4ba
 800dcc8:	0800b3e9 	.word	0x0800b3e9
 800dccc:	0800da81 	.word	0x0800da81
 800dcd0:	0800e4b6 	.word	0x0800e4b6

0800dcd4 <__swbuf_r>:
 800dcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd6:	460e      	mov	r6, r1
 800dcd8:	4614      	mov	r4, r2
 800dcda:	4605      	mov	r5, r0
 800dcdc:	b118      	cbz	r0, 800dce6 <__swbuf_r+0x12>
 800dcde:	6a03      	ldr	r3, [r0, #32]
 800dce0:	b90b      	cbnz	r3, 800dce6 <__swbuf_r+0x12>
 800dce2:	f7fd ffc5 	bl	800bc70 <__sinit>
 800dce6:	69a3      	ldr	r3, [r4, #24]
 800dce8:	60a3      	str	r3, [r4, #8]
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	071a      	lsls	r2, r3, #28
 800dcee:	d501      	bpl.n	800dcf4 <__swbuf_r+0x20>
 800dcf0:	6923      	ldr	r3, [r4, #16]
 800dcf2:	b943      	cbnz	r3, 800dd06 <__swbuf_r+0x32>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f000 f82a 	bl	800dd50 <__swsetup_r>
 800dcfc:	b118      	cbz	r0, 800dd06 <__swbuf_r+0x32>
 800dcfe:	f04f 37ff 	mov.w	r7, #4294967295
 800dd02:	4638      	mov	r0, r7
 800dd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	6922      	ldr	r2, [r4, #16]
 800dd0a:	1a98      	subs	r0, r3, r2
 800dd0c:	6963      	ldr	r3, [r4, #20]
 800dd0e:	b2f6      	uxtb	r6, r6
 800dd10:	4283      	cmp	r3, r0
 800dd12:	4637      	mov	r7, r6
 800dd14:	dc05      	bgt.n	800dd22 <__swbuf_r+0x4e>
 800dd16:	4621      	mov	r1, r4
 800dd18:	4628      	mov	r0, r5
 800dd1a:	f7ff fda7 	bl	800d86c <_fflush_r>
 800dd1e:	2800      	cmp	r0, #0
 800dd20:	d1ed      	bne.n	800dcfe <__swbuf_r+0x2a>
 800dd22:	68a3      	ldr	r3, [r4, #8]
 800dd24:	3b01      	subs	r3, #1
 800dd26:	60a3      	str	r3, [r4, #8]
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	6022      	str	r2, [r4, #0]
 800dd2e:	701e      	strb	r6, [r3, #0]
 800dd30:	6962      	ldr	r2, [r4, #20]
 800dd32:	1c43      	adds	r3, r0, #1
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d004      	beq.n	800dd42 <__swbuf_r+0x6e>
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	07db      	lsls	r3, r3, #31
 800dd3c:	d5e1      	bpl.n	800dd02 <__swbuf_r+0x2e>
 800dd3e:	2e0a      	cmp	r6, #10
 800dd40:	d1df      	bne.n	800dd02 <__swbuf_r+0x2e>
 800dd42:	4621      	mov	r1, r4
 800dd44:	4628      	mov	r0, r5
 800dd46:	f7ff fd91 	bl	800d86c <_fflush_r>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	d0d9      	beq.n	800dd02 <__swbuf_r+0x2e>
 800dd4e:	e7d6      	b.n	800dcfe <__swbuf_r+0x2a>

0800dd50 <__swsetup_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4b29      	ldr	r3, [pc, #164]	@ (800ddf8 <__swsetup_r+0xa8>)
 800dd54:	4605      	mov	r5, r0
 800dd56:	6818      	ldr	r0, [r3, #0]
 800dd58:	460c      	mov	r4, r1
 800dd5a:	b118      	cbz	r0, 800dd64 <__swsetup_r+0x14>
 800dd5c:	6a03      	ldr	r3, [r0, #32]
 800dd5e:	b90b      	cbnz	r3, 800dd64 <__swsetup_r+0x14>
 800dd60:	f7fd ff86 	bl	800bc70 <__sinit>
 800dd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd68:	0719      	lsls	r1, r3, #28
 800dd6a:	d422      	bmi.n	800ddb2 <__swsetup_r+0x62>
 800dd6c:	06da      	lsls	r2, r3, #27
 800dd6e:	d407      	bmi.n	800dd80 <__swsetup_r+0x30>
 800dd70:	2209      	movs	r2, #9
 800dd72:	602a      	str	r2, [r5, #0]
 800dd74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd78:	81a3      	strh	r3, [r4, #12]
 800dd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7e:	e033      	b.n	800dde8 <__swsetup_r+0x98>
 800dd80:	0758      	lsls	r0, r3, #29
 800dd82:	d512      	bpl.n	800ddaa <__swsetup_r+0x5a>
 800dd84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd86:	b141      	cbz	r1, 800dd9a <__swsetup_r+0x4a>
 800dd88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd8c:	4299      	cmp	r1, r3
 800dd8e:	d002      	beq.n	800dd96 <__swsetup_r+0x46>
 800dd90:	4628      	mov	r0, r5
 800dd92:	f7fe ff0d 	bl	800cbb0 <_free_r>
 800dd96:	2300      	movs	r3, #0
 800dd98:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd9a:	89a3      	ldrh	r3, [r4, #12]
 800dd9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dda0:	81a3      	strh	r3, [r4, #12]
 800dda2:	2300      	movs	r3, #0
 800dda4:	6063      	str	r3, [r4, #4]
 800dda6:	6923      	ldr	r3, [r4, #16]
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	f043 0308 	orr.w	r3, r3, #8
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	6923      	ldr	r3, [r4, #16]
 800ddb4:	b94b      	cbnz	r3, 800ddca <__swsetup_r+0x7a>
 800ddb6:	89a3      	ldrh	r3, [r4, #12]
 800ddb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ddbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ddc0:	d003      	beq.n	800ddca <__swsetup_r+0x7a>
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	f000 f883 	bl	800ded0 <__smakebuf_r>
 800ddca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddce:	f013 0201 	ands.w	r2, r3, #1
 800ddd2:	d00a      	beq.n	800ddea <__swsetup_r+0x9a>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	60a2      	str	r2, [r4, #8]
 800ddd8:	6962      	ldr	r2, [r4, #20]
 800ddda:	4252      	negs	r2, r2
 800dddc:	61a2      	str	r2, [r4, #24]
 800ddde:	6922      	ldr	r2, [r4, #16]
 800dde0:	b942      	cbnz	r2, 800ddf4 <__swsetup_r+0xa4>
 800dde2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dde6:	d1c5      	bne.n	800dd74 <__swsetup_r+0x24>
 800dde8:	bd38      	pop	{r3, r4, r5, pc}
 800ddea:	0799      	lsls	r1, r3, #30
 800ddec:	bf58      	it	pl
 800ddee:	6962      	ldrpl	r2, [r4, #20]
 800ddf0:	60a2      	str	r2, [r4, #8]
 800ddf2:	e7f4      	b.n	800ddde <__swsetup_r+0x8e>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e7f7      	b.n	800dde8 <__swsetup_r+0x98>
 800ddf8:	20000190 	.word	0x20000190

0800ddfc <_raise_r>:
 800ddfc:	291f      	cmp	r1, #31
 800ddfe:	b538      	push	{r3, r4, r5, lr}
 800de00:	4605      	mov	r5, r0
 800de02:	460c      	mov	r4, r1
 800de04:	d904      	bls.n	800de10 <_raise_r+0x14>
 800de06:	2316      	movs	r3, #22
 800de08:	6003      	str	r3, [r0, #0]
 800de0a:	f04f 30ff 	mov.w	r0, #4294967295
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800de12:	b112      	cbz	r2, 800de1a <_raise_r+0x1e>
 800de14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de18:	b94b      	cbnz	r3, 800de2e <_raise_r+0x32>
 800de1a:	4628      	mov	r0, r5
 800de1c:	f000 f830 	bl	800de80 <_getpid_r>
 800de20:	4622      	mov	r2, r4
 800de22:	4601      	mov	r1, r0
 800de24:	4628      	mov	r0, r5
 800de26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de2a:	f000 b817 	b.w	800de5c <_kill_r>
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d00a      	beq.n	800de48 <_raise_r+0x4c>
 800de32:	1c59      	adds	r1, r3, #1
 800de34:	d103      	bne.n	800de3e <_raise_r+0x42>
 800de36:	2316      	movs	r3, #22
 800de38:	6003      	str	r3, [r0, #0]
 800de3a:	2001      	movs	r0, #1
 800de3c:	e7e7      	b.n	800de0e <_raise_r+0x12>
 800de3e:	2100      	movs	r1, #0
 800de40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800de44:	4620      	mov	r0, r4
 800de46:	4798      	blx	r3
 800de48:	2000      	movs	r0, #0
 800de4a:	e7e0      	b.n	800de0e <_raise_r+0x12>

0800de4c <raise>:
 800de4c:	4b02      	ldr	r3, [pc, #8]	@ (800de58 <raise+0xc>)
 800de4e:	4601      	mov	r1, r0
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	f7ff bfd3 	b.w	800ddfc <_raise_r>
 800de56:	bf00      	nop
 800de58:	20000190 	.word	0x20000190

0800de5c <_kill_r>:
 800de5c:	b538      	push	{r3, r4, r5, lr}
 800de5e:	4d07      	ldr	r5, [pc, #28]	@ (800de7c <_kill_r+0x20>)
 800de60:	2300      	movs	r3, #0
 800de62:	4604      	mov	r4, r0
 800de64:	4608      	mov	r0, r1
 800de66:	4611      	mov	r1, r2
 800de68:	602b      	str	r3, [r5, #0]
 800de6a:	f7f3 ff77 	bl	8001d5c <_kill>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	d102      	bne.n	800de78 <_kill_r+0x1c>
 800de72:	682b      	ldr	r3, [r5, #0]
 800de74:	b103      	cbz	r3, 800de78 <_kill_r+0x1c>
 800de76:	6023      	str	r3, [r4, #0]
 800de78:	bd38      	pop	{r3, r4, r5, pc}
 800de7a:	bf00      	nop
 800de7c:	20004c98 	.word	0x20004c98

0800de80 <_getpid_r>:
 800de80:	f7f3 bf64 	b.w	8001d4c <_getpid>

0800de84 <__swhatbuf_r>:
 800de84:	b570      	push	{r4, r5, r6, lr}
 800de86:	460c      	mov	r4, r1
 800de88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de8c:	2900      	cmp	r1, #0
 800de8e:	b096      	sub	sp, #88	@ 0x58
 800de90:	4615      	mov	r5, r2
 800de92:	461e      	mov	r6, r3
 800de94:	da0d      	bge.n	800deb2 <__swhatbuf_r+0x2e>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de9c:	f04f 0100 	mov.w	r1, #0
 800dea0:	bf14      	ite	ne
 800dea2:	2340      	movne	r3, #64	@ 0x40
 800dea4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dea8:	2000      	movs	r0, #0
 800deaa:	6031      	str	r1, [r6, #0]
 800deac:	602b      	str	r3, [r5, #0]
 800deae:	b016      	add	sp, #88	@ 0x58
 800deb0:	bd70      	pop	{r4, r5, r6, pc}
 800deb2:	466a      	mov	r2, sp
 800deb4:	f000 f848 	bl	800df48 <_fstat_r>
 800deb8:	2800      	cmp	r0, #0
 800deba:	dbec      	blt.n	800de96 <__swhatbuf_r+0x12>
 800debc:	9901      	ldr	r1, [sp, #4]
 800debe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dec2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dec6:	4259      	negs	r1, r3
 800dec8:	4159      	adcs	r1, r3
 800deca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dece:	e7eb      	b.n	800dea8 <__swhatbuf_r+0x24>

0800ded0 <__smakebuf_r>:
 800ded0:	898b      	ldrh	r3, [r1, #12]
 800ded2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ded4:	079d      	lsls	r5, r3, #30
 800ded6:	4606      	mov	r6, r0
 800ded8:	460c      	mov	r4, r1
 800deda:	d507      	bpl.n	800deec <__smakebuf_r+0x1c>
 800dedc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dee0:	6023      	str	r3, [r4, #0]
 800dee2:	6123      	str	r3, [r4, #16]
 800dee4:	2301      	movs	r3, #1
 800dee6:	6163      	str	r3, [r4, #20]
 800dee8:	b003      	add	sp, #12
 800deea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deec:	ab01      	add	r3, sp, #4
 800deee:	466a      	mov	r2, sp
 800def0:	f7ff ffc8 	bl	800de84 <__swhatbuf_r>
 800def4:	9f00      	ldr	r7, [sp, #0]
 800def6:	4605      	mov	r5, r0
 800def8:	4639      	mov	r1, r7
 800defa:	4630      	mov	r0, r6
 800defc:	f7fe fecc 	bl	800cc98 <_malloc_r>
 800df00:	b948      	cbnz	r0, 800df16 <__smakebuf_r+0x46>
 800df02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df06:	059a      	lsls	r2, r3, #22
 800df08:	d4ee      	bmi.n	800dee8 <__smakebuf_r+0x18>
 800df0a:	f023 0303 	bic.w	r3, r3, #3
 800df0e:	f043 0302 	orr.w	r3, r3, #2
 800df12:	81a3      	strh	r3, [r4, #12]
 800df14:	e7e2      	b.n	800dedc <__smakebuf_r+0xc>
 800df16:	89a3      	ldrh	r3, [r4, #12]
 800df18:	6020      	str	r0, [r4, #0]
 800df1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df1e:	81a3      	strh	r3, [r4, #12]
 800df20:	9b01      	ldr	r3, [sp, #4]
 800df22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800df26:	b15b      	cbz	r3, 800df40 <__smakebuf_r+0x70>
 800df28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df2c:	4630      	mov	r0, r6
 800df2e:	f000 f81d 	bl	800df6c <_isatty_r>
 800df32:	b128      	cbz	r0, 800df40 <__smakebuf_r+0x70>
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	f023 0303 	bic.w	r3, r3, #3
 800df3a:	f043 0301 	orr.w	r3, r3, #1
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	89a3      	ldrh	r3, [r4, #12]
 800df42:	431d      	orrs	r5, r3
 800df44:	81a5      	strh	r5, [r4, #12]
 800df46:	e7cf      	b.n	800dee8 <__smakebuf_r+0x18>

0800df48 <_fstat_r>:
 800df48:	b538      	push	{r3, r4, r5, lr}
 800df4a:	4d07      	ldr	r5, [pc, #28]	@ (800df68 <_fstat_r+0x20>)
 800df4c:	2300      	movs	r3, #0
 800df4e:	4604      	mov	r4, r0
 800df50:	4608      	mov	r0, r1
 800df52:	4611      	mov	r1, r2
 800df54:	602b      	str	r3, [r5, #0]
 800df56:	f7f3 ff61 	bl	8001e1c <_fstat>
 800df5a:	1c43      	adds	r3, r0, #1
 800df5c:	d102      	bne.n	800df64 <_fstat_r+0x1c>
 800df5e:	682b      	ldr	r3, [r5, #0]
 800df60:	b103      	cbz	r3, 800df64 <_fstat_r+0x1c>
 800df62:	6023      	str	r3, [r4, #0]
 800df64:	bd38      	pop	{r3, r4, r5, pc}
 800df66:	bf00      	nop
 800df68:	20004c98 	.word	0x20004c98

0800df6c <_isatty_r>:
 800df6c:	b538      	push	{r3, r4, r5, lr}
 800df6e:	4d06      	ldr	r5, [pc, #24]	@ (800df88 <_isatty_r+0x1c>)
 800df70:	2300      	movs	r3, #0
 800df72:	4604      	mov	r4, r0
 800df74:	4608      	mov	r0, r1
 800df76:	602b      	str	r3, [r5, #0]
 800df78:	f7f3 ff60 	bl	8001e3c <_isatty>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_isatty_r+0x1a>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_isatty_r+0x1a>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	20004c98 	.word	0x20004c98

0800df8c <_init>:
 800df8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8e:	bf00      	nop
 800df90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df92:	bc08      	pop	{r3}
 800df94:	469e      	mov	lr, r3
 800df96:	4770      	bx	lr

0800df98 <_fini>:
 800df98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df9a:	bf00      	nop
 800df9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df9e:	bc08      	pop	{r3}
 800dfa0:	469e      	mov	lr, r3
 800dfa2:	4770      	bx	lr
